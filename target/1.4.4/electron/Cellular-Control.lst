
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Control/target/1.4.4/electron/Cellular-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005770  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08085790  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000164  20000000  08085794  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006f0  20000164  20000164  00040164  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080858f8  080858f8  000358f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08085920  08085920  00035920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c4ef2  00000000  00000000  00035924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000127bc  00000000  00000000  000fa816  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001814b  00000000  00000000  0010cfd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025b8  00000000  00000000  0012511d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003c38  00000000  00000000  001276d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00028db4  00000000  00000000  0012b30d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b9d7  00000000  00000000  001540c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a90d3  00000000  00000000  0017fa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cde8  00000000  00000000  00228b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fa8b 	bl	808454c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fa90 	bl	8084562 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08085794 	.word	0x08085794
 8080050:	20000164 	.word	0x20000164
 8080054:	20000164 	.word	0x20000164
 8080058:	20000854 	.word	0x20000854
 808005c:	20000854 	.word	0x20000854

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f003 f821 	bl	80830a8 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08085750 	.word	0x08085750
 8080088:	0808578c 	.word	0x0808578c

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 bccc 	b.w	8080a28 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fed9 	bl	8080e48 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 bfc7 	b.w	808302c <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bd95 	b.w	8081bcc <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bd9b 	b.w	8081bdc <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80800b6:	f001 bb4d 	b.w	8081754 <HAL_Pin_Map>
	...

080800bc <_Z17pumpTimerCallbackv>:
      }
    } break;
  }
}

void pumpTimerCallback() { pumpingEnabled = false; }
 80800bc:	4b01      	ldr	r3, [pc, #4]	; (80800c4 <_Z17pumpTimerCallbackv+0x8>)
 80800be:	2200      	movs	r2, #0
 80800c0:	701a      	strb	r2, [r3, #0]
 80800c2:	4770      	bx	lr
 80800c4:	200001d0 	.word	0x200001d0

080800c8 <_Z11watchdogISRv>:
  return temperatureF;
}

// Here is were we will put the timer and other ISRs
void watchdogISR() {
  watchdogFlag = true;
 80800c8:	4b01      	ldr	r3, [pc, #4]	; (80800d0 <_Z11watchdogISRv+0x8>)
 80800ca:	2201      	movs	r2, #1
 80800cc:	701a      	strb	r2, [r3, #0]
 80800ce:	4770      	bx	lr
 80800d0:	20000199 	.word	0x20000199

080800d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800d4:	6803      	ldr	r3, [r0, #0]
 80800d6:	4718      	bx	r3

080800d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800d8:	2a01      	cmp	r2, #1
 80800da:	d002      	beq.n	80800e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800dc:	2a02      	cmp	r2, #2
 80800de:	d002      	beq.n	80800e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800e0:	e004      	b.n	80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800e2:	6001      	str	r1, [r0, #0]
	      break;
 80800e4:	e002      	b.n	80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800e6:	680b      	ldr	r3, [r1, #0]
 80800e8:	b100      	cbz	r0, 80800ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800ea:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800ec:	2000      	movs	r0, #0
 80800ee:	4770      	bx	lr

080800f0 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 80800f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800f2:	4904      	ldr	r1, [pc, #16]	; (8080104 <_Z7sendNow6String+0x14>)
 80800f4:	f002 fd2f 	bl	8082b56 <_ZNK6String6equalsEPKc>
  if (command == "1") {
 80800f8:	b118      	cbz	r0, 8080102 <_Z7sendNow6String+0x12>
    state = REPORTING_STATE;
 80800fa:	4b03      	ldr	r3, [pc, #12]	; (8080108 <_Z7sendNow6String+0x18>)
 80800fc:	2205      	movs	r2, #5
 80800fe:	701a      	strb	r2, [r3, #0]
    return 1;
 8080100:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080102:	bd08      	pop	{r3, pc}
 8080104:	08085240 	.word	0x08085240
 8080108:	20000184 	.word	0x20000184

0808010c <_Z9resetFRAM6String>:
  else return 0;
}


int resetFRAM(String command)   // Will reset the local counts
{
 808010c:	b508      	push	{r3, lr}
 808010e:	4904      	ldr	r1, [pc, #16]	; (8080120 <_Z9resetFRAM6String+0x14>)
 8080110:	f002 fd21 	bl	8082b56 <_ZNK6String6equalsEPKc>
  if (command == "1") {
 8080114:	b118      	cbz	r0, 808011e <_Z9resetFRAM6String+0x12>
    fram.erase();
 8080116:	4803      	ldr	r0, [pc, #12]	; (8080124 <_Z9resetFRAM6String+0x18>)
 8080118:	f001 f95e 	bl	80813d8 <_ZN6MB85RC5eraseEv>
    return 1;
 808011c:	2001      	movs	r0, #1
  }
  else return 0;
}
 808011e:	bd08      	pop	{r3, pc}
 8080120:	08085240 	.word	0x08085240
 8080124:	20000224 	.word	0x20000224

08080128 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8080128:	6943      	ldr	r3, [r0, #20]
 808012a:	b113      	cbz	r3, 8080132 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808012c:	6983      	ldr	r3, [r0, #24]
 808012e:	300c      	adds	r0, #12
 8080130:	4718      	bx	r3
 8080132:	4770      	bx	lr

08080134 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080134:	b510      	push	{r4, lr}
 8080136:	4604      	mov	r4, r0
 8080138:	4b02      	ldr	r3, [pc, #8]	; (8080144 <_ZN8MB85RC64D1Ev+0x10>)
 808013a:	6003      	str	r3, [r0, #0]
 808013c:	f001 f914 	bl	8081368 <_ZN6MB85RCD1Ev>
 8080140:	4620      	mov	r0, r4
 8080142:	bd10      	pop	{r4, pc}
 8080144:	08084f20 	.word	0x08084f20

08080148 <_ZN8MB85RC64D0Ev>:
 8080148:	b510      	push	{r4, lr}
 808014a:	4604      	mov	r4, r0
 808014c:	f7ff fff2 	bl	8080134 <_ZN8MB85RC64D1Ev>
 8080150:	4620      	mov	r0, r4
 8080152:	2110      	movs	r1, #16
 8080154:	f003 f8d7 	bl	8083306 <_ZdlPvj>
 8080158:	4620      	mov	r0, r4
 808015a:	bd10      	pop	{r4, pc}

0808015c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 808015c:	b513      	push	{r0, r1, r4, lr}
 808015e:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8080160:	2100      	movs	r1, #0
 8080162:	4608      	mov	r0, r1
 8080164:	f001 fa7e 	bl	8081664 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080168:	a902      	add	r1, sp, #8
 808016a:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 808016c:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 808016e:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 8080172:	f001 fa8f 	bl	8081694 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 8080176:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 8080178:	b10c      	cbz	r4, 808017e <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 808017a:	2301      	movs	r3, #1
 808017c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 808017e:	2100      	movs	r1, #0
 8080180:	2001      	movs	r0, #1
 8080182:	f001 fa6f 	bl	8081664 <os_thread_scheduling>
            }
        }
        if (t) {
 8080186:	b12c      	cbz	r4, 8080194 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 8080188:	6823      	ldr	r3, [r4, #0]
 808018a:	4620      	mov	r0, r4
 808018c:	689b      	ldr	r3, [r3, #8]
 808018e:	4798      	blx	r3
            t->running = false;
 8080190:	2300      	movs	r3, #0
 8080192:	7123      	strb	r3, [r4, #4]
        }
    }
 8080194:	b002      	add	sp, #8
 8080196:	bd10      	pop	{r4, pc}

08080198 <_Z11pumpControl6String>:
 * They are intended to allow for customization and control during installations
 * and to allow for management.
*/

int pumpControl(String command)   // Will reset the local counts
{
 8080198:	b538      	push	{r3, r4, r5, lr}
 808019a:	4909      	ldr	r1, [pc, #36]	; (80801c0 <_Z11pumpControl6String+0x28>)
 808019c:	4605      	mov	r5, r0
 808019e:	f002 fcda 	bl	8082b56 <_ZNK6String6equalsEPKc>
  if (command == "1") {
 80801a2:	4604      	mov	r4, r0
 80801a4:	b118      	cbz	r0, 80801ae <_Z11pumpControl6String+0x16>
    pumpingEnabled = true;
 80801a6:	4b07      	ldr	r3, [pc, #28]	; (80801c4 <_Z11pumpControl6String+0x2c>)
 80801a8:	2001      	movs	r0, #1
 80801aa:	7018      	strb	r0, [r3, #0]
    return 1;
 80801ac:	bd38      	pop	{r3, r4, r5, pc}
 80801ae:	4906      	ldr	r1, [pc, #24]	; (80801c8 <_Z11pumpControl6String+0x30>)
 80801b0:	4628      	mov	r0, r5
 80801b2:	f002 fcd0 	bl	8082b56 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0") {
 80801b6:	b110      	cbz	r0, 80801be <_Z11pumpControl6String+0x26>
    pumpingEnabled = false;
 80801b8:	4b02      	ldr	r3, [pc, #8]	; (80801c4 <_Z11pumpControl6String+0x2c>)
    return 1;
 80801ba:	2001      	movs	r0, #1
  if (command == "1") {
    pumpingEnabled = true;
    return 1;
  }
  else if (command == "0") {
    pumpingEnabled = false;
 80801bc:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
}
 80801be:	bd38      	pop	{r3, r4, r5, pc}
 80801c0:	08085240 	.word	0x08085240
 80801c4:	200001d0 	.word	0x200001d0
 80801c8:	08084f34 	.word	0x08084f34

080801cc <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)   // Will perform a hard reset on the Electron
{
 80801cc:	b508      	push	{r3, lr}
 80801ce:	4905      	ldr	r1, [pc, #20]	; (80801e4 <_Z12hardResetNow6String+0x18>)
 80801d0:	f002 fcc1 	bl	8082b56 <_ZNK6String6equalsEPKc>
  if (command == "1") {
 80801d4:	b120      	cbz	r0, 80801e0 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 80801d6:	2004      	movs	r0, #4
 80801d8:	2101      	movs	r1, #1
 80801da:	f002 ffc6 	bl	808316a <digitalWrite>
 80801de:	2001      	movs	r0, #1
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}
 80801e0:	bd08      	pop	{r3, pc}
 80801e2:	bf00      	nop
 80801e4:	08085240 	.word	0x08085240

080801e8 <_ZN10CloudClass12syncTimeDoneEv.isra.31>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80801e8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80801ea:	2000      	movs	r0, #0
 80801ec:	f001 fc8e 	bl	8081b0c <spark_sync_time_pending>
 80801f0:	b128      	cbz	r0, 80801fe <_ZN10CloudClass12syncTimeDoneEv.isra.31+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801f2:	f001 fc63 	bl	8081abc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80801f6:	f080 0001 	eor.w	r0, r0, #1
 80801fa:	b2c0      	uxtb	r0, r0
 80801fc:	bd08      	pop	{r3, pc}
 80801fe:	2001      	movs	r0, #1
    }
 8080200:	bd08      	pop	{r3, pc}

08080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080204:	4605      	mov	r5, r0
 8080206:	f89d 4018 	ldrb.w	r4, [sp, #24]
 808020a:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808020c:	f88d 3000 	strb.w	r3, [sp]
 8080210:	233c      	movs	r3, #60	; 0x3c
 8080212:	f001 ffe3 	bl	80821dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 8080216:	4628      	mov	r0, r5
 8080218:	b003      	add	sp, #12
 808021a:	bd30      	pop	{r4, r5, pc}

0808021c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808021c:	2200      	movs	r2, #0
 808021e:	4611      	mov	r1, r2
 8080220:	6840      	ldr	r0, [r0, #4]
 8080222:	f001 bc9b 	b.w	8081b5c <network_ready>

08080226 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080226:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080228:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808022a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808022c:	b113      	cbz	r3, 8080234 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808022e:	2203      	movs	r2, #3
 8080230:	4601      	mov	r1, r0
 8080232:	4798      	blx	r3
    }
 8080234:	4620      	mov	r0, r4
 8080236:	bd10      	pop	{r4, pc}

08080238 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080238:	2000      	movs	r0, #0
 808023a:	f001 ba83 	b.w	8081744 <hal_timer_millis>

0808023e <_ZN5Timer4stopEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 808023e:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 8080240:	6880      	ldr	r0, [r0, #8]
 8080242:	2300      	movs	r3, #0
 8080244:	b140      	cbz	r0, 8080258 <_ZN5Timer4stopEj+0x1a>
 8080246:	e88d 000a 	stmia.w	sp, {r1, r3}
 808024a:	461a      	mov	r2, r3
 808024c:	2102      	movs	r1, #2
 808024e:	f001 fa29 	bl	80816a4 <os_timer_change>
 8080252:	fab0 f080 	clz	r0, r0
 8080256:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080258:	b003      	add	sp, #12
 808025a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080260 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080260:	b538      	push	{r3, r4, r5, lr}
 8080262:	4b0f      	ldr	r3, [pc, #60]	; (80802a0 <_ZN5TimerD1Ev+0x40>)
 8080264:	4604      	mov	r4, r0
 8080266:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 8080268:	6883      	ldr	r3, [r0, #8]
 808026a:	b19b      	cbz	r3, 8080294 <_ZN5TimerD1Ev+0x34>
            stop();
 808026c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8080270:	f7ff ffe5 	bl	808023e <_ZN5Timer4stopEj>
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 8080274:	2100      	movs	r1, #0
 8080276:	68a0      	ldr	r0, [r4, #8]
 8080278:	f001 fa24 	bl	80816c4 <os_timer_set_id>
            while (running) {
 808027c:	7923      	ldrb	r3, [r4, #4]
 808027e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8080282:	b113      	cbz	r3, 808028a <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
 8080284:	f001 f9e6 	bl	8081654 <os_thread_yield>
 8080288:	e7f8      	b.n	808027c <_ZN5TimerD1Ev+0x1c>
            }
            os_timer_destroy(handle, nullptr);
 808028a:	4629      	mov	r1, r5
 808028c:	68a0      	ldr	r0, [r4, #8]
 808028e:	f001 f9f9 	bl	8081684 <os_timer_destroy>
            handle = nullptr;
 8080292:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080294:	f104 000c 	add.w	r0, r4, #12
 8080298:	f7ff ffc5 	bl	8080226 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 808029c:	4620      	mov	r0, r4
 808029e:	bd38      	pop	{r3, r4, r5, pc}
 80802a0:	08084f0c 	.word	0x08084f0c

080802a4 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80802a4:	b510      	push	{r4, lr}
 80802a6:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80802a8:	f7ff ffda 	bl	8080260 <_ZN5TimerD1Ev>
 80802ac:	4620      	mov	r0, r4
 80802ae:	211c      	movs	r1, #28
 80802b0:	f003 f829 	bl	8083306 <_ZdlPvj>
 80802b4:	4620      	mov	r0, r4
 80802b6:	bd10      	pop	{r4, pc}

080802b8 <_Z17getSignalStrengthv>:
  }
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
}


void getSignalStrength() {
 80802b8:	b530      	push	{r4, r5, lr}
 80802ba:	b08f      	sub	sp, #60	; 0x3c
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 80802bc:	4910      	ldr	r1, [pc, #64]	; (8080300 <_Z17getSignalStrengthv+0x48>)
 80802be:	a804      	add	r0, sp, #16
 80802c0:	f001 fd30 	bl	8081d24 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 80802c4:	a804      	add	r0, sp, #16
 80802c6:	f001 fd80 	bl	8081dca <_ZNK14CellularSignal19getAccessTechnologyEv>
 80802ca:	4604      	mov	r4, r0
 
  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 80802cc:	a804      	add	r0, sp, #16
 80802ce:	f001 fddb 	bl	8081e88 <_ZNK14CellularSignal11getStrengthEv>
 80802d2:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 80802d4:	a804      	add	r0, sp, #16
 80802d6:	f001 fdbf 	bl	8081e58 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80802da:	f003 fac5 	bl	8083868 <__aeabi_f2d>
 80802de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80802e2:	4628      	mov	r0, r5
 80802e4:	f003 fac0 	bl	8083868 <__aeabi_f2d>
 80802e8:	e9cd 0100 	strd	r0, r1, [sp]
 80802ec:	4b05      	ldr	r3, [pc, #20]	; (8080304 <_Z17getSignalStrengthv+0x4c>)
 80802ee:	4a06      	ldr	r2, [pc, #24]	; (8080308 <_Z17getSignalStrengthv+0x50>)
 80802f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80802f4:	2140      	movs	r1, #64	; 0x40
 80802f6:	4805      	ldr	r0, [pc, #20]	; (808030c <_Z17getSignalStrengthv+0x54>)
 80802f8:	f001 fc88 	bl	8081c0c <snprintf>
}
 80802fc:	b00f      	add	sp, #60	; 0x3c
 80802fe:	bd30      	pop	{r4, r5, pc}
 8080300:	20000234 	.word	0x20000234
 8080304:	20000084 	.word	0x20000084
 8080308:	08084f36 	.word	0x08084f36
 808030c:	200001d1 	.word	0x200001d1

08080310 <_Z14getTemperaturev>:

int getTemperature() {
 8080310:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080312:	200a      	movs	r0, #10
 8080314:	f002 ff55 	bl	80831c2 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080318:	f003 fa94 	bl	8083844 <__aeabi_i2d>
 808031c:	a314      	add	r3, pc, #80	; (adr r3, 8080370 <_Z14getTemperaturev+0x60>)
 808031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080322:	f003 faf5 	bl	8083910 <__aeabi_dmul>
 8080326:	f003 fd2d 	bl	8083d84 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808032a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808032e:	f003 fe87 	bl	8084040 <__aeabi_fmul>
 8080332:	f003 fa99 	bl	8083868 <__aeabi_f2d>
 8080336:	2200      	movs	r2, #0
 8080338:	4b0f      	ldr	r3, [pc, #60]	; (8080378 <_Z14getTemperaturev+0x68>)
 808033a:	f003 f935 	bl	80835a8 <__aeabi_dsub>
 808033e:	2200      	movs	r2, #0
 8080340:	4b0e      	ldr	r3, [pc, #56]	; (808037c <_Z14getTemperaturev+0x6c>)
 8080342:	f003 fae5 	bl	8083910 <__aeabi_dmul>
 8080346:	f003 fcf5 	bl	8083d34 <__aeabi_d2iz>
 808034a:	f003 fa7b 	bl	8083844 <__aeabi_i2d>
 808034e:	2200      	movs	r2, #0
 8080350:	4b0b      	ldr	r3, [pc, #44]	; (8080380 <_Z14getTemperaturev+0x70>)
 8080352:	f003 fadd 	bl	8083910 <__aeabi_dmul>
 8080356:	2200      	movs	r2, #0
 8080358:	4b0a      	ldr	r3, [pc, #40]	; (8080384 <_Z14getTemperaturev+0x74>)
 808035a:	f003 fc03 	bl	8083b64 <__aeabi_ddiv>
 808035e:	2200      	movs	r2, #0
 8080360:	4b09      	ldr	r3, [pc, #36]	; (8080388 <_Z14getTemperaturev+0x78>)
 8080362:	f003 f923 	bl	80835ac <__adddf3>
 8080366:	f003 fce5 	bl	8083d34 <__aeabi_d2iz>
 808036a:	4b08      	ldr	r3, [pc, #32]	; (808038c <_Z14getTemperaturev+0x7c>)
 808036c:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 808036e:	bd08      	pop	{r3, pc}
 8080370:	66666666 	.word	0x66666666
 8080374:	400a6666 	.word	0x400a6666
 8080378:	3fe00000 	.word	0x3fe00000
 808037c:	40590000 	.word	0x40590000
 8080380:	40220000 	.word	0x40220000
 8080384:	40140000 	.word	0x40140000
 8080388:	40400000 	.word	0x40400000
 808038c:	20000194 	.word	0x20000194

08080390 <_Z11petWatchdogv>:
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8080390:	4b07      	ldr	r3, [pc, #28]	; (80803b0 <_Z11petWatchdogv+0x20>)
 8080392:	681b      	ldr	r3, [r3, #0]
 8080394:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8080398:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 808039c:	8311      	strh	r1, [r2, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808039e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80803a2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80803a6:	8353      	strh	r3, [r2, #26]
}

void petWatchdog() {
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
 80803a8:	4b02      	ldr	r3, [pc, #8]	; (80803b4 <_Z11petWatchdogv+0x24>)
 80803aa:	2200      	movs	r2, #0
 80803ac:	701a      	strb	r2, [r3, #0]
 80803ae:	4770      	bx	lr
 80803b0:	200001a8 	.word	0x200001a8
 80803b4:	20000199 	.word	0x20000199

080803b8 <_Z17connectToParticlev>:
}

// These functions manage our connecion to Particle
bool connectToParticle() {
 80803b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!Cellular.ready())
 80803bc:	4d2d      	ldr	r5, [pc, #180]	; (8080474 <_Z17connectToParticlev+0xbc>)
 80803be:	4628      	mov	r0, r5
 80803c0:	f7ff ff2c 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 80803c4:	4604      	mov	r4, r0
 80803c6:	bb28      	cbnz	r0, 8080414 <_Z17connectToParticlev+0x5c>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80803c8:	4603      	mov	r3, r0
 80803ca:	4602      	mov	r2, r0
 80803cc:	4601      	mov	r1, r0
 80803ce:	6868      	ldr	r0, [r5, #4]
 80803d0:	f001 fbcc 	bl	8081b6c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80803d4:	4623      	mov	r3, r4
 80803d6:	4622      	mov	r2, r4
 80803d8:	4621      	mov	r1, r4
 80803da:	6868      	ldr	r0, [r5, #4]
 80803dc:	f001 fba6 	bl	8081b2c <network_connect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 80803e0:	f7ff ff2a 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803e4:	4604      	mov	r4, r0
 80803e6:	4e24      	ldr	r6, [pc, #144]	; (8080478 <_Z17connectToParticlev+0xc0>)
 80803e8:	2500      	movs	r5, #0
 80803ea:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80803ec:	f7ff ff24 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80803f0:	1b00      	subs	r0, r0, r4
 80803f2:	eb61 0105 	sbc.w	r1, r1, r5
 80803f6:	428f      	cmp	r7, r1
 80803f8:	bf08      	it	eq
 80803fa:	4286      	cmpeq	r6, r0
 80803fc:	d306      	bcc.n	808040c <_Z17connectToParticlev+0x54>
  {
    Cellular.on();                                           // turn on the Modem
    Cellular.connect();                                      // Connect to the cellular network
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 80803fe:	481d      	ldr	r0, [pc, #116]	; (8080474 <_Z17connectToParticlev+0xbc>)
 8080400:	f7ff ff0c 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 8080404:	b910      	cbnz	r0, 808040c <_Z17connectToParticlev+0x54>
            spark_process();
 8080406:	f001 fb41 	bl	8081a8c <spark_process>
 808040a:	e7ef      	b.n	80803ec <_Z17connectToParticlev+0x34>
 808040c:	4819      	ldr	r0, [pc, #100]	; (8080474 <_Z17connectToParticlev+0xbc>)
 808040e:	f7ff ff05 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 8080412:	b1f8      	cbz	r0, 8080454 <_Z17connectToParticlev+0x9c>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080414:	f001 f97e 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080418:	4c18      	ldr	r4, [pc, #96]	; (808047c <_Z17connectToParticlev+0xc4>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808041a:	f247 582f 	movw	r8, #29999	; 0x752f
 808041e:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080420:	f001 fb34 	bl	8081a8c <spark_process>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080424:	f001 fb3a 	bl	8081a9c <spark_cloud_flag_connect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 8080428:	f7ff ff06 	bl	8080238 <_ZN11SystemClass6millisEv>
 808042c:	4625      	mov	r5, r4


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808042e:	4606      	mov	r6, r0
 8080430:	2700      	movs	r7, #0
 8080432:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080436:	f7ff feff 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808043a:	1b80      	subs	r0, r0, r6
 808043c:	eb61 0107 	sbc.w	r1, r1, r7
 8080440:	4589      	cmp	r9, r1
 8080442:	bf08      	it	eq
 8080444:	4580      	cmpeq	r8, r0
 8080446:	d307      	bcc.n	8080458 <_Z17connectToParticlev+0xa0>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080448:	f001 fb38 	bl	8081abc <spark_cloud_flag_connected>
 808044c:	b920      	cbnz	r0, 8080458 <_Z17connectToParticlev+0xa0>
            spark_process();
 808044e:	f001 fb1d 	bl	8081a8c <spark_process>
 8080452:	e7f0      	b.n	8080436 <_Z17connectToParticlev+0x7e>
 8080454:	2400      	movs	r4, #0
 8080456:	e009      	b.n	808046c <_Z17connectToParticlev+0xb4>
 8080458:	f001 fb30 	bl	8081abc <spark_cloud_flag_connected>
  }
  Particle.process();
  Particle.connect();                                      // Connect to Particle
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 808045c:	4604      	mov	r4, r0
 808045e:	2800      	cmp	r0, #0
 8080460:	d0f8      	beq.n	8080454 <_Z17connectToParticlev+0x9c>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080462:	f001 f957 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080466:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080468:	f001 fb10 	bl	8081a8c <spark_process>
  Particle.process();
  return true;
}
 808046c:	4620      	mov	r0, r4
 808046e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080472:	bf00      	nop
 8080474:	20000234 	.word	0x20000234
 8080478:	00015f8f 	.word	0x00015f8f
 808047c:	20000720 	.word	0x20000720

08080480 <_Z12notConnectedv>:
  delay(3000);
  Cellular.off();                                           // Turn off the cellular modem
  return true;
}

bool notConnected() {
 8080480:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080482:	f001 fb1b 	bl	8081abc <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 8080486:	f080 0001 	eor.w	r0, r0, #1
}
 808048a:	b2c0      	uxtb	r0, r0
 808048c:	bd08      	pop	{r3, pc}
	...

08080490 <_Z22disconnectFromParticlev>:
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
  Particle.process();
  return true;
}

bool disconnectFromParticle() {
 8080490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080492:	f001 fb0b 	bl	8081aac <spark_cloud_flag_disconnect>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 8080496:	f7ff fecf 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808049a:	f242 760f 	movw	r6, #9999	; 0x270f
 808049e:	4604      	mov	r4, r0
 80804a0:	2500      	movs	r5, #0
 80804a2:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80804a4:	f7ff fec8 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80804a8:	1b00      	subs	r0, r0, r4
 80804aa:	eb61 0105 	sbc.w	r1, r1, r5
 80804ae:	428f      	cmp	r7, r1
 80804b0:	bf08      	it	eq
 80804b2:	4286      	cmpeq	r6, r0
 80804b4:	d305      	bcc.n	80804c2 <_Z22disconnectFromParticlev+0x32>
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
  waitFor(notConnected,10000);
 80804b6:	f7ff ffe3 	bl	8080480 <_Z12notConnectedv>
 80804ba:	b910      	cbnz	r0, 80804c2 <_Z22disconnectFromParticlev+0x32>
            spark_process();
 80804bc:	f001 fae6 	bl	8081a8c <spark_process>
 80804c0:	e7f0      	b.n	80804a4 <_Z22disconnectFromParticlev+0x14>
 80804c2:	4c0a      	ldr	r4, [pc, #40]	; (80804ec <_Z22disconnectFromParticlev+0x5c>)
 80804c4:	f7ff ffdc 	bl	8080480 <_Z12notConnectedv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80804c8:	2200      	movs	r2, #0
 80804ca:	2102      	movs	r1, #2
 80804cc:	6860      	ldr	r0, [r4, #4]
 80804ce:	f001 fb3d 	bl	8081b4c <network_disconnect>
  Cellular.disconnect();                                   // Disconnect from the cellular network
  delay(3000);
 80804d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80804d6:	f001 fbbd 	bl	8081c54 <delay>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80804da:	2300      	movs	r3, #0
 80804dc:	6860      	ldr	r0, [r4, #4]
 80804de:	461a      	mov	r2, r3
 80804e0:	4619      	mov	r1, r3
 80804e2:	f001 fb4b 	bl	8081b7c <network_off>
  Cellular.off();                                           // Turn off the cellular modem
  return true;
}
 80804e6:	2001      	movs	r0, #1
 80804e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80804ea:	bf00      	nop
 80804ec:	20000234 	.word	0x20000234

080804f0 <_Z12getLostPowerv>:
    return 1;
  }
  else return 0;
}

bool getLostPower() {
 80804f0:	b508      	push	{r3, lr}
	// Bit 2 (mask 0x4) == PG_STAT. If non-zero, power is good but we want to return 1 if power is lost.
	// This means we're powered off USB or VIN, so we don't know for sure if there's a battery
	byte systemStatus = power.getSystemStatus();
 80804f2:	4804      	ldr	r0, [pc, #16]	; (8080504 <_Z12getLostPowerv+0x14>)
 80804f4:	f002 fa0b 	bl	808290e <_ZN4PMIC15getSystemStatusEv>
	return ((systemStatus & 0x04) == 0);
 80804f8:	f080 0004 	eor.w	r0, r0, #4
}
 80804fc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8080500:	bd08      	pop	{r3, pc}
 8080502:	bf00      	nop
 8080504:	20000168 	.word	0x20000168

08080508 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
 8080508:	b510      	push	{r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808050a:	f001 f903 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;             // Keep track of when we publish a webhook
  if(millis() - lastPublish >= 1000) {
 808050e:	4c06      	ldr	r4, [pc, #24]	; (8080528 <_Z20meterParticlePublishv+0x20>)
 8080510:	6823      	ldr	r3, [r4, #0]
 8080512:	1ac0      	subs	r0, r0, r3
 8080514:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8080518:	d304      	bcc.n	8080524 <_Z20meterParticlePublishv+0x1c>
 808051a:	f001 f8fb 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 808051e:	6020      	str	r0, [r4, #0]
 8080520:	2001      	movs	r0, #1
 8080522:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
 8080524:	2000      	movs	r0, #0
}
 8080526:	bd10      	pop	{r4, pc}
 8080528:	20000214 	.word	0x20000214

0808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 808052c:	b508      	push	{r3, lr}
void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected() && state != IDLE_STATE) {
    waitUntil(meterParticlePublish);
 808052e:	f7ff ffeb 	bl	8080508 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080532:	b118      	cbz	r0, 808053c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8080534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080538:	f7ff bfe6 	b.w	8080508 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 808053c:	f001 faa6 	bl	8081a8c <spark_process>
 8080540:	e7f5      	b.n	808052e <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81+0x2>
	...

08080544 <_Z15meterSampleRatev>:
  }
  else return 0;
}

bool meterSampleRate(void)
{
 8080544:	b508      	push	{r3, lr}
 8080546:	f001 f8e5 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastSample = 0;
  if(millis() - lastSample >= sampleFrequency) {
 808054a:	4b03      	ldr	r3, [pc, #12]	; (8080558 <_Z15meterSampleRatev+0x14>)
 808054c:	681b      	ldr	r3, [r3, #0]
    return 1;
    lastSample = millis();
  }
  else return 0;
}
 808054e:	4283      	cmp	r3, r0
 8080550:	bf8c      	ite	hi
 8080552:	2000      	movhi	r0, #0
 8080554:	2001      	movls	r0, #1
 8080556:	bd08      	pop	{r3, pc}
 8080558:	20000078 	.word	0x20000078

0808055c <_Z14fullModemResetv>:

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 808055c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808055e:	f001 faa5 	bl	8081aac <spark_cloud_flag_disconnect>
 8080562:	f001 f8d7 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080566:	f643 2597 	movw	r5, #14999	; 0x3a97
 808056a:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808056c:	f001 faa6 	bl	8081abc <spark_cloud_flag_connected>
 8080570:	b140      	cbz	r0, 8080584 <_Z14fullModemResetv+0x28>
 8080572:	f001 f8cf 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
 8080576:	1b00      	subs	r0, r0, r4
 8080578:	42a8      	cmp	r0, r5
 808057a:	d803      	bhi.n	8080584 <_Z14fullModemResetv+0x28>
		delay(100);
 808057c:	2064      	movs	r0, #100	; 0x64
 808057e:	f001 fb69 	bl	8081c54 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080582:	e7f3      	b.n	808056c <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080584:	2100      	movs	r1, #0
 8080586:	4b09      	ldr	r3, [pc, #36]	; (80805ac <_Z14fullModemResetv+0x50>)
 8080588:	f247 5230 	movw	r2, #30000	; 0x7530
 808058c:	4608      	mov	r0, r1
 808058e:	f001 f859 	bl	8081644 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080596:	f001 fb5d 	bl	8081c54 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808059a:	4b05      	ldr	r3, [pc, #20]	; (80805b0 <_Z14fullModemResetv+0x54>)
 808059c:	220a      	movs	r2, #10
 808059e:	681b      	ldr	r3, [r3, #0]
 80805a0:	2101      	movs	r1, #1
 80805a2:	4668      	mov	r0, sp
 80805a4:	f002 fb0a 	bl	8082bbc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80805a8:	b003      	add	sp, #12
 80805aa:	bd30      	pop	{r4, r5, pc}
 80805ac:	08084f4f 	.word	0x08084f4f
 80805b0:	2000019c 	.word	0x2000019c

080805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80805b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80805b6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80805b8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80805ba:	b17c      	cbz	r4, 80805dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80805bc:	6863      	ldr	r3, [r4, #4]
 80805be:	3b01      	subs	r3, #1
 80805c0:	6063      	str	r3, [r4, #4]
 80805c2:	b95b      	cbnz	r3, 80805dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80805c4:	6823      	ldr	r3, [r4, #0]
 80805c6:	4620      	mov	r0, r4
 80805c8:	689b      	ldr	r3, [r3, #8]
 80805ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80805cc:	68a3      	ldr	r3, [r4, #8]
 80805ce:	3b01      	subs	r3, #1
 80805d0:	60a3      	str	r3, [r4, #8]
 80805d2:	b91b      	cbnz	r3, 80805dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80805d4:	6823      	ldr	r3, [r4, #0]
 80805d6:	4620      	mov	r0, r4
 80805d8:	68db      	ldr	r3, [r3, #12]
 80805da:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80805dc:	4628      	mov	r0, r5
 80805de:	bd38      	pop	{r3, r4, r5, pc}

080805e0 <_Z12resolveAlertv>:
  }
}

void pumpTimerCallback() { pumpingEnabled = false; }

void resolveAlert() {
 80805e0:	b510      	push	{r4, lr}
  char data[128];
  if (alertValue & 0b00000001) strcat(data,"Control Power - ");
 80805e2:	4b19      	ldr	r3, [pc, #100]	; (8080648 <_Z12resolveAlertv+0x68>)
  }
}

void pumpTimerCallback() { pumpingEnabled = false; }

void resolveAlert() {
 80805e4:	b0a4      	sub	sp, #144	; 0x90
  char data[128];
  if (alertValue & 0b00000001) strcat(data,"Control Power - ");
 80805e6:	781c      	ldrb	r4, [r3, #0]
 80805e8:	07e0      	lsls	r0, r4, #31
 80805ea:	d503      	bpl.n	80805f4 <_Z12resolveAlertv+0x14>
 80805ec:	4917      	ldr	r1, [pc, #92]	; (808064c <_Z12resolveAlertv+0x6c>)
 80805ee:	a804      	add	r0, sp, #16
 80805f0:	f003 ffe8 	bl	80845c4 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Low Level - ");
 80805f4:	07a1      	lsls	r1, r4, #30
 80805f6:	d503      	bpl.n	8080600 <_Z12resolveAlertv+0x20>
 80805f8:	4915      	ldr	r1, [pc, #84]	; (8080650 <_Z12resolveAlertv+0x70>)
 80805fa:	a804      	add	r0, sp, #16
 80805fc:	f003 ffe2 	bl	80845c4 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Pump On - ");
 8080600:	0762      	lsls	r2, r4, #29
 8080602:	d503      	bpl.n	808060c <_Z12resolveAlertv+0x2c>
 8080604:	4913      	ldr	r1, [pc, #76]	; (8080654 <_Z12resolveAlertv+0x74>)
 8080606:	a804      	add	r0, sp, #16
 8080608:	f003 ffdc 	bl	80845c4 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Particle Power");
 808060c:	0623      	lsls	r3, r4, #24
 808060e:	d503      	bpl.n	8080618 <_Z12resolveAlertv+0x38>
 8080610:	4911      	ldr	r1, [pc, #68]	; (8080658 <_Z12resolveAlertv+0x78>)
 8080612:	a804      	add	r0, sp, #16
 8080614:	f003 ffd6 	bl	80845c4 <strcat>
  waitUntil(meterParticlePublish);
 8080618:	f7ff ff88 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 808061c:	f001 fa4e 	bl	8081abc <spark_cloud_flag_connected>
  if(Particle.connected() && verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080620:	b178      	cbz	r0, 8080642 <_Z12resolveAlertv+0x62>
 8080622:	4b0e      	ldr	r3, [pc, #56]	; (808065c <_Z12resolveAlertv+0x7c>)
 8080624:	781b      	ldrb	r3, [r3, #0]
 8080626:	b163      	cbz	r3, 8080642 <_Z12resolveAlertv+0x62>
 8080628:	4b0d      	ldr	r3, [pc, #52]	; (8080660 <_Z12resolveAlertv+0x80>)
 808062a:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808062c:	781b      	ldrb	r3, [r3, #0]
 808062e:	a802      	add	r0, sp, #8
 8080630:	f88d 2000 	strb.w	r2, [sp]
 8080634:	490b      	ldr	r1, [pc, #44]	; (8080664 <_Z12resolveAlertv+0x84>)
 8080636:	aa04      	add	r2, sp, #16
 8080638:	f7ff fde3 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808063c:	a803      	add	r0, sp, #12
 808063e:	f7ff ffb9 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080642:	b024      	add	sp, #144	; 0x90
 8080644:	bd10      	pop	{r4, pc}
 8080646:	bf00      	nop
 8080648:	20000171 	.word	0x20000171
 808064c:	08084f5c 	.word	0x08084f5c
 8080650:	08084f6d 	.word	0x08084f6d
 8080654:	08084f7a 	.word	0x08084f7a
 8080658:	08084f85 	.word	0x08084f85
 808065c:	200001ac 	.word	0x200001ac
 8080660:	20000170 	.word	0x20000170
 8080664:	08084f94 	.word	0x08084f94

08080668 <_Z9sendEventv>:

void sendEvent() {
 8080668:	b500      	push	{lr}
  char data[256];                                                   // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 808066a:	4a1a      	ldr	r2, [pc, #104]	; (80806d4 <_Z9sendEventv+0x6c>)
 808066c:	4b1a      	ldr	r3, [pc, #104]	; (80806d8 <_Z9sendEventv+0x70>)
 808066e:	6812      	ldr	r2, [r2, #0]
  if (alertValue & 0b10000000) strcat(data,"Particle Power");
  waitUntil(meterParticlePublish);
  if(Particle.connected() && verboseMode) Particle.publish("Alerts",data,PRIVATE);
}

void sendEvent() {
 8080670:	b0c9      	sub	sp, #292	; 0x124
  char data[256];                                                   // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080672:	781b      	ldrb	r3, [r3, #0]
 8080674:	9204      	str	r2, [sp, #16]
 8080676:	4a19      	ldr	r2, [pc, #100]	; (80806dc <_Z9sendEventv+0x74>)
 8080678:	f44f 7180 	mov.w	r1, #256	; 0x100
 808067c:	6812      	ldr	r2, [r2, #0]
 808067e:	a808      	add	r0, sp, #32
 8080680:	9203      	str	r2, [sp, #12]
 8080682:	4a17      	ldr	r2, [pc, #92]	; (80806e0 <_Z9sendEventv+0x78>)
 8080684:	6812      	ldr	r2, [r2, #0]
 8080686:	9202      	str	r2, [sp, #8]
 8080688:	4a16      	ldr	r2, [pc, #88]	; (80806e4 <_Z9sendEventv+0x7c>)
 808068a:	6812      	ldr	r2, [r2, #0]
 808068c:	9201      	str	r2, [sp, #4]
 808068e:	4a16      	ldr	r2, [pc, #88]	; (80806e8 <_Z9sendEventv+0x80>)
 8080690:	6812      	ldr	r2, [r2, #0]
 8080692:	9200      	str	r2, [sp, #0]
 8080694:	4a15      	ldr	r2, [pc, #84]	; (80806ec <_Z9sendEventv+0x84>)
 8080696:	f001 fab9 	bl	8081c0c <snprintf>
  waitUntil(meterParticlePublish);
 808069a:	f7ff ff47 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 808069e:	4b14      	ldr	r3, [pc, #80]	; (80806f0 <_Z9sendEventv+0x88>)
  Particle.publish("Monitoring_Event", data, PRIVATE);
 80806a0:	2200      	movs	r2, #0
 80806a2:	781b      	ldrb	r3, [r3, #0]
 80806a4:	4913      	ldr	r1, [pc, #76]	; (80806f4 <_Z9sendEventv+0x8c>)
 80806a6:	f88d 2000 	strb.w	r2, [sp]
 80806aa:	a806      	add	r0, sp, #24
 80806ac:	aa08      	add	r2, sp, #32
 80806ae:	f7ff fda8 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 80806b2:	a807      	add	r0, sp, #28
 80806b4:	f7ff ff7e 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806b8:	f001 f82c 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80806bc:	4b0e      	ldr	r3, [pc, #56]	; (80806f8 <_Z9sendEventv+0x90>)
 80806be:	6018      	str	r0, [r3, #0]
  currentHourlyPeriod = Time.hour();                                // Change the time period since we have reported for this one 
 80806c0:	f002 fb08 	bl	8082cd4 <_ZN9TimeClass4hourEv>
 80806c4:	4b0d      	ldr	r3, [pc, #52]	; (80806fc <_Z9sendEventv+0x94>)
  dataInFlight = true;                                              // set the data inflight flag
 80806c6:	2201      	movs	r2, #1
  char data[256];                                                   // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
  waitUntil(meterParticlePublish);
  Particle.publish("Monitoring_Event", data, PRIVATE);
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();                                // Change the time period since we have reported for this one 
 80806c8:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                              // set the data inflight flag
 80806ca:	4b0d      	ldr	r3, [pc, #52]	; (8080700 <_Z9sendEventv+0x98>)
 80806cc:	701a      	strb	r2, [r3, #0]
}
 80806ce:	b049      	add	sp, #292	; 0x124
 80806d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80806d4:	20000190 	.word	0x20000190
 80806d8:	20000171 	.word	0x20000171
 80806dc:	20000194 	.word	0x20000194
 80806e0:	2000018c 	.word	0x2000018c
 80806e4:	20000188 	.word	0x20000188
 80806e8:	20000180 	.word	0x20000180
 80806ec:	08084f9b 	.word	0x08084f9b
 80806f0:	20000170 	.word	0x20000170
 80806f4:	08084ff1 	.word	0x08084ff1
 80806f8:	2000016c 	.word	0x2000016c
 80806fc:	20000198 	.word	0x20000198
 8080700:	20000220 	.word	0x20000220

08080704 <_Z18pumpControlHandlerPKcS0_>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void pumpControlHandler(const char *event, const char *data)
{
 8080704:	b510      	push	{r4, lr}
 8080706:	b086      	sub	sp, #24
 8080708:	4608      	mov	r0, r1
  char * pEND;
  int onOrOff = strtol(data,&pEND,10);
 808070a:	220a      	movs	r2, #10
 808070c:	a903      	add	r1, sp, #12
 808070e:	f004 f84d 	bl	80847ac <strtol>
  if (onOrOff == 1) {
 8080712:	2801      	cmp	r0, #1
}

void pumpControlHandler(const char *event, const char *data)
{
  char * pEND;
  int onOrOff = strtol(data,&pEND,10);
 8080714:	4604      	mov	r4, r0
  if (onOrOff == 1) {
 8080716:	d10a      	bne.n	808072e <_Z18pumpControlHandlerPKcS0_+0x2a>
    pumpingEnabled = true;
 8080718:	4b0e      	ldr	r3, [pc, #56]	; (8080754 <_Z18pumpControlHandlerPKcS0_+0x50>)
 808071a:	7018      	strb	r0, [r3, #0]
    waitUntil(meterParticlePublish);
 808071c:	f7ff ff06 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080720:	4b0d      	ldr	r3, [pc, #52]	; (8080758 <_Z18pumpControlHandlerPKcS0_+0x54>)
    Particle.publish("Status", "Pump On Received",PRIVATE);
 8080722:	2200      	movs	r2, #0
 8080724:	781b      	ldrb	r3, [r3, #0]
 8080726:	f88d 2000 	strb.w	r2, [sp]
 808072a:	4a0c      	ldr	r2, [pc, #48]	; (808075c <_Z18pumpControlHandlerPKcS0_+0x58>)
 808072c:	e009      	b.n	8080742 <_Z18pumpControlHandlerPKcS0_+0x3e>
  }
  else if (onOrOff == 0) {
 808072e:	b978      	cbnz	r0, 8080750 <_Z18pumpControlHandlerPKcS0_+0x4c>
    pumpingEnabled = false;
 8080730:	4b08      	ldr	r3, [pc, #32]	; (8080754 <_Z18pumpControlHandlerPKcS0_+0x50>)
 8080732:	7018      	strb	r0, [r3, #0]
    waitUntil(meterParticlePublish);
 8080734:	f7ff fefa 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080738:	4b07      	ldr	r3, [pc, #28]	; (8080758 <_Z18pumpControlHandlerPKcS0_+0x54>)
    Particle.publish("Status", "Pump Off Received",PRIVATE);
 808073a:	4a09      	ldr	r2, [pc, #36]	; (8080760 <_Z18pumpControlHandlerPKcS0_+0x5c>)
 808073c:	781b      	ldrb	r3, [r3, #0]
 808073e:	f88d 4000 	strb.w	r4, [sp]
 8080742:	a804      	add	r0, sp, #16
 8080744:	4907      	ldr	r1, [pc, #28]	; (8080764 <_Z18pumpControlHandlerPKcS0_+0x60>)
 8080746:	f7ff fd5c 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 808074a:	a805      	add	r0, sp, #20
 808074c:	f7ff ff32 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
}
 8080750:	b006      	add	sp, #24
 8080752:	bd10      	pop	{r4, pc}
 8080754:	200001d0 	.word	0x200001d0
 8080758:	20000170 	.word	0x20000170
 808075c:	08085002 	.word	0x08085002
 8080760:	0808501a 	.word	0x0808501a
 8080764:	08085013 	.word	0x08085013

08080768 <_Z22publishStateTransitionv>:
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete

  fram.put(FRAM::controlRegisterAddr, controlRegister);
}

void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 8080768:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808076a:	4c15      	ldr	r4, [pc, #84]	; (80807c0 <_Z22publishStateTransitionv+0x58>)
 808076c:	4915      	ldr	r1, [pc, #84]	; (80807c4 <_Z22publishStateTransitionv+0x5c>)
 808076e:	7822      	ldrb	r2, [r4, #0]
 8080770:	230e      	movs	r3, #14
 8080772:	fb03 1202 	mla	r2, r3, r2, r1
 8080776:	4d14      	ldr	r5, [pc, #80]	; (80807c8 <_Z22publishStateTransitionv+0x60>)
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete

  fram.put(FRAM::controlRegisterAddr, controlRegister);
}

void publishStateTransition(void) {                                     // Mainly for troubleshooting - publishes the transition between states
 8080778:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808077a:	7828      	ldrb	r0, [r5, #0]
 808077c:	9200      	str	r2, [sp, #0]
 808077e:	fb03 1300 	mla	r3, r3, r0, r1
 8080782:	4a12      	ldr	r2, [pc, #72]	; (80807cc <_Z22publishStateTransitionv+0x64>)
 8080784:	2128      	movs	r1, #40	; 0x28
 8080786:	a804      	add	r0, sp, #16
 8080788:	f001 fa40 	bl	8081c0c <snprintf>
  oldState = state;
 808078c:	7823      	ldrb	r3, [r4, #0]
 808078e:	702b      	strb	r3, [r5, #0]
 8080790:	f001 f994 	bl	8081abc <spark_cloud_flag_connected>
  if(Particle.connected() && state != IDLE_STATE) {
 8080794:	b188      	cbz	r0, 80807ba <_Z22publishStateTransitionv+0x52>
 8080796:	7823      	ldrb	r3, [r4, #0]
 8080798:	2b02      	cmp	r3, #2
 808079a:	d00e      	beq.n	80807ba <_Z22publishStateTransitionv+0x52>
    waitUntil(meterParticlePublish);
 808079c:	f7ff fec6 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 80807a0:	4b0b      	ldr	r3, [pc, #44]	; (80807d0 <_Z22publishStateTransitionv+0x68>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80807a2:	2200      	movs	r2, #0
 80807a4:	781b      	ldrb	r3, [r3, #0]
 80807a6:	a802      	add	r0, sp, #8
 80807a8:	f88d 2000 	strb.w	r2, [sp]
 80807ac:	4909      	ldr	r1, [pc, #36]	; (80807d4 <_Z22publishStateTransitionv+0x6c>)
 80807ae:	aa04      	add	r2, sp, #16
 80807b0:	f7ff fd27 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 80807b4:	a803      	add	r0, sp, #12
 80807b6:	f7ff fefd 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
 80807ba:	b00f      	add	sp, #60	; 0x3c
 80807bc:	bd30      	pop	{r4, r5, pc}
 80807be:	bf00      	nop
 80807c0:	20000184 	.word	0x20000184
 80807c4:	20000004 	.word	0x20000004
 80807c8:	2000017d 	.word	0x2000017d
 80807cc:	0808502c 	.word	0x0808502c
 80807d0:	20000170 	.word	0x20000170
 80807d4:	0808503a 	.word	0x0808503a

080807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80807d8:	2300      	movs	r3, #0
 80807da:	2202      	movs	r2, #2
 80807dc:	f001 b946 	b.w	8081a6c <spark_variable>

080807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80807e0:	4602      	mov	r2, r0
 80807e2:	4801      	ldr	r0, [pc, #4]	; (80807e8 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80807e4:	f001 bbd2 	b.w	8081f8c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80807e8:	08081f61 	.word	0x08081f61

080807ec <_ZN6MB85RC3getIhEERT_jS2_>:
	 * @brief Read from FRAM using EEPROM-style API
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
 80807ec:	b538      	push	{r3, r4, r5, lr}
 80807ee:	4614      	mov	r4, r2
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 80807f0:	6803      	ldr	r3, [r0, #0]
 80807f2:	689d      	ldr	r5, [r3, #8]
 80807f4:	2301      	movs	r3, #1
 80807f6:	47a8      	blx	r5
        return t;
    }
 80807f8:	4620      	mov	r0, r4
 80807fa:	bd38      	pop	{r3, r4, r5, pc}

080807fc <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80807fc:	b530      	push	{r4, r5, lr}
 80807fe:	4925      	ldr	r1, [pc, #148]	; (8080894 <_Z14setVerboseMode6String+0x98>)
 8080800:	b085      	sub	sp, #20
 8080802:	4604      	mov	r4, r0
 8080804:	f002 f9a7 	bl	8082b56 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080808:	4605      	mov	r5, r0
 808080a:	b1d8      	cbz	r0, 8080844 <_Z14setVerboseMode6String+0x48>
  {
    verboseMode = true;
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 808080c:	4d22      	ldr	r5, [pc, #136]	; (8080898 <_Z14setVerboseMode6String+0x9c>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 808080e:	2401      	movs	r4, #1
 8080810:	4b22      	ldr	r3, [pc, #136]	; (808089c <_Z14setVerboseMode6String+0xa0>)
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 8080812:	462a      	mov	r2, r5
 8080814:	4621      	mov	r1, r4
 8080816:	4822      	ldr	r0, [pc, #136]	; (80808a0 <_Z14setVerboseMode6String+0xa4>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 8080818:	701c      	strb	r4, [r3, #0]
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 808081a:	f7ff ffe7 	bl	80807ec <_ZN6MB85RC3getIhEERT_jS2_>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 808081e:	782b      	ldrb	r3, [r5, #0]
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080820:	462a      	mov	r2, r5
 8080822:	f043 0308 	orr.w	r3, r3, #8
 8080826:	702b      	strb	r3, [r5, #0]
 8080828:	4621      	mov	r1, r4
 808082a:	4623      	mov	r3, r4
 808082c:	481c      	ldr	r0, [pc, #112]	; (80808a0 <_Z14setVerboseMode6String+0xa4>)
 808082e:	f000 fe60 	bl	80814f2 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::controlRegisterAddr, controlRegister);               // Write it to the register
    waitUntil(meterParticlePublish);
 8080832:	f7ff fe7b 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080836:	4b1b      	ldr	r3, [pc, #108]	; (80808a4 <_Z14setVerboseMode6String+0xa8>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080838:	2200      	movs	r2, #0
 808083a:	781b      	ldrb	r3, [r3, #0]
 808083c:	f88d 2000 	strb.w	r2, [sp]
 8080840:	4a19      	ldr	r2, [pc, #100]	; (80808a8 <_Z14setVerboseMode6String+0xac>)
 8080842:	e01d      	b.n	8080880 <_Z14setVerboseMode6String+0x84>
 8080844:	4919      	ldr	r1, [pc, #100]	; (80808ac <_Z14setVerboseMode6String+0xb0>)
 8080846:	4620      	mov	r0, r4
 8080848:	f002 f985 	bl	8082b56 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808084c:	b300      	cbz	r0, 8080890 <_Z14setVerboseMode6String+0x94>
  {
    verboseMode = false;
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 808084e:	4c12      	ldr	r4, [pc, #72]	; (8080898 <_Z14setVerboseMode6String+0x9c>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080850:	4b12      	ldr	r3, [pc, #72]	; (808089c <_Z14setVerboseMode6String+0xa0>)
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 8080852:	4622      	mov	r2, r4
 8080854:	2101      	movs	r1, #1
 8080856:	4812      	ldr	r0, [pc, #72]	; (80808a0 <_Z14setVerboseMode6String+0xa4>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080858:	701d      	strb	r5, [r3, #0]
    fram.get(FRAM::controlRegisterAddr,controlRegister);
 808085a:	f7ff ffc7 	bl	80807ec <_ZN6MB85RC3getIhEERT_jS2_>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808085e:	7823      	ldrb	r3, [r4, #0]
 8080860:	4622      	mov	r2, r4
 8080862:	f023 0308 	bic.w	r3, r3, #8
 8080866:	7023      	strb	r3, [r4, #0]
 8080868:	2301      	movs	r3, #1
 808086a:	4619      	mov	r1, r3
 808086c:	480c      	ldr	r0, [pc, #48]	; (80808a0 <_Z14setVerboseMode6String+0xa4>)
 808086e:	f000 fe40 	bl	80814f2 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::controlRegisterAddr, controlRegister);               // Write it to the register
    waitUntil(meterParticlePublish);
 8080872:	f7ff fe5b 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080876:	4b0b      	ldr	r3, [pc, #44]	; (80808a4 <_Z14setVerboseMode6String+0xa8>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080878:	4a0d      	ldr	r2, [pc, #52]	; (80808b0 <_Z14setVerboseMode6String+0xb4>)
 808087a:	781b      	ldrb	r3, [r3, #0]
 808087c:	f88d 5000 	strb.w	r5, [sp]
 8080880:	490c      	ldr	r1, [pc, #48]	; (80808b4 <_Z14setVerboseMode6String+0xb8>)
 8080882:	a802      	add	r0, sp, #8
 8080884:	f7ff fcbd 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8080888:	a803      	add	r0, sp, #12
 808088a:	f7ff fe93 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 808088e:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080890:	b005      	add	sp, #20
 8080892:	bd30      	pop	{r4, r5, pc}
 8080894:	08085240 	.word	0x08085240
 8080898:	20000221 	.word	0x20000221
 808089c:	200001ac 	.word	0x200001ac
 80808a0:	20000224 	.word	0x20000224
 80808a4:	20000170 	.word	0x20000170
 80808a8:	0808504b 	.word	0x0808504b
 80808ac:	08084f34 	.word	0x08084f34
 80808b0:	0808505c 	.word	0x0808505c
 80808b4:	0808506c 	.word	0x0808506c

080808b8 <_ZN6MB85RC3getImEERT_jS2_>:
	 * @brief Read from FRAM using EEPROM-style API
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
 80808b8:	b538      	push	{r3, r4, r5, lr}
 80808ba:	4614      	mov	r4, r2
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 80808bc:	6803      	ldr	r3, [r0, #0]
 80808be:	689d      	ldr	r5, [r3, #8]
 80808c0:	2304      	movs	r3, #4
 80808c2:	47a8      	blx	r5
        return t;
    }
 80808c4:	4620      	mov	r0, r4
 80808c6:	bd38      	pop	{r3, r4, r5, pc}

080808c8 <_ZN6MB85RC3putIlEERKT_jS3_>:
	 * @brief Write from FRAM using EEPROM-style API
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
 80808c8:	b538      	push	{r3, r4, r5, lr}
 80808ca:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 80808cc:	6803      	ldr	r3, [r0, #0]
 80808ce:	68dd      	ldr	r5, [r3, #12]
 80808d0:	2304      	movs	r3, #4
 80808d2:	47a8      	blx	r5
        return t;
    }
 80808d4:	4620      	mov	r0, r4
 80808d6:	bd38      	pop	{r3, r4, r5, pc}

080808d8 <_Z14UbidotsHandlerPKcS0_>:
  webhookTimeStamp = millis();
  currentHourlyPeriod = Time.hour();                                // Change the time period since we have reported for this one 
  dataInFlight = true;                                              // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data) { // Looks at the response from Ubidots - Will reset Photon if no successful response
 80808d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                            // First check to see if there is any data
 80808da:	460c      	mov	r4, r1
 80808dc:	b939      	cbnz	r1, 80808ee <_Z14UbidotsHandlerPKcS0_+0x16>
    waitUntil(meterParticlePublish);
 80808de:	f7ff fe25 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 80808e2:	4b1c      	ldr	r3, [pc, #112]	; (8080954 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 80808e4:	4a1c      	ldr	r2, [pc, #112]	; (8080958 <_Z14UbidotsHandlerPKcS0_+0x80>)
 80808e6:	781b      	ldrb	r3, [r3, #0]
 80808e8:	f88d 4000 	strb.w	r4, [sp]
 80808ec:	e029      	b.n	8080942 <_Z14UbidotsHandlerPKcS0_+0x6a>
    return;
  }
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 80808ee:	4608      	mov	r0, r1
 80808f0:	f003 fd1c 	bl	808432c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80808f4:	38c8      	subs	r0, #200	; 0xc8
 80808f6:	2801      	cmp	r0, #1
 80808f8:	d81d      	bhi.n	8080936 <_Z14UbidotsHandlerPKcS0_+0x5e>
  {
    waitUntil(meterParticlePublish);
 80808fa:	f7ff fe17 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 80808fe:	4b17      	ldr	r3, [pc, #92]	; (808095c <_Z14UbidotsHandlerPKcS0_+0x84>)
 8080900:	781b      	ldrb	r3, [r3, #0]
 8080902:	b163      	cbz	r3, 808091e <_Z14UbidotsHandlerPKcS0_+0x46>
 8080904:	4b13      	ldr	r3, [pc, #76]	; (8080954 <_Z14UbidotsHandlerPKcS0_+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080906:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080908:	781b      	ldrb	r3, [r3, #0]
 808090a:	a802      	add	r0, sp, #8
 808090c:	f88d 2000 	strb.w	r2, [sp]
 8080910:	4913      	ldr	r1, [pc, #76]	; (8080960 <_Z14UbidotsHandlerPKcS0_+0x88>)
 8080912:	4a14      	ldr	r2, [pc, #80]	; (8080964 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8080914:	f7ff fc75 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8080918:	a803      	add	r0, sp, #12
 808091a:	f7ff fe4b 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    fram.put(FRAM::lastHookResponseAddr,Time.now());      // Keep track of last hook response
 808091e:	f002 f9d1 	bl	8082cc4 <_ZN9TimeClass3nowEv>
 8080922:	aa02      	add	r2, sp, #8
 8080924:	9002      	str	r0, [sp, #8]
 8080926:	2109      	movs	r1, #9
 8080928:	480f      	ldr	r0, [pc, #60]	; (8080968 <_Z14UbidotsHandlerPKcS0_+0x90>)
 808092a:	f7ff ffcd 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
    dataInFlight = false;                                 // Data has been received
 808092e:	4b0f      	ldr	r3, [pc, #60]	; (808096c <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080930:	2200      	movs	r2, #0
 8080932:	701a      	strb	r2, [r3, #0]
 8080934:	e00c      	b.n	8080950 <_Z14UbidotsHandlerPKcS0_+0x78>
 8080936:	4b07      	ldr	r3, [pc, #28]	; (8080954 <_Z14UbidotsHandlerPKcS0_+0x7c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080938:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808093a:	781b      	ldrb	r3, [r3, #0]
  }
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
 808093c:	f88d 2000 	strb.w	r2, [sp]
 8080940:	4622      	mov	r2, r4
 8080942:	a802      	add	r0, sp, #8
 8080944:	490a      	ldr	r1, [pc, #40]	; (8080970 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8080946:	f7ff fc5c 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 808094a:	a803      	add	r0, sp, #12
 808094c:	f7ff fe32 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080950:	b004      	add	sp, #16
 8080952:	bd10      	pop	{r4, pc}
 8080954:	20000170 	.word	0x20000170
 8080958:	08085071 	.word	0x08085071
 808095c:	200001ac 	.word	0x200001ac
 8080960:	08085098 	.word	0x08085098
 8080964:	08085086 	.word	0x08085086
 8080968:	20000224 	.word	0x20000224
 808096c:	20000220 	.word	0x20000220
 8080970:	08085079 	.word	0x08085079

08080974 <_Z12dailyCleanupv>:
    Particle.publish("Status", "Pump Off Received",PRIVATE);
  }
}


void dailyCleanup() {                                                 // Function to clean house at the end of the day
 8080974:	b5f0      	push	{r4, r5, r6, r7, lr}
  fram.get(FRAM::controlRegisterAddr,controlRegister);
 8080976:	4d25      	ldr	r5, [pc, #148]	; (8080a0c <_Z12dailyCleanupv+0x98>)
    Particle.publish("Status", "Pump Off Received",PRIVATE);
  }
}


void dailyCleanup() {                                                 // Function to clean house at the end of the day
 8080978:	b085      	sub	sp, #20
  fram.get(FRAM::controlRegisterAddr,controlRegister);
 808097a:	462a      	mov	r2, r5
 808097c:	2101      	movs	r1, #1
 808097e:	4824      	ldr	r0, [pc, #144]	; (8080a10 <_Z12dailyCleanupv+0x9c>)
 8080980:	f7ff ff34 	bl	80807ec <_ZN6MB85RC3getIhEERT_jS2_>

  waitUntil(meterParticlePublish);
 8080984:	f7ff fdd2 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080988:	4b22      	ldr	r3, [pc, #136]	; (8080a14 <_Z12dailyCleanupv+0xa0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808098a:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808098c:	781b      	ldrb	r3, [r3, #0]
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 808098e:	4a22      	ldr	r2, [pc, #136]	; (8080a18 <_Z12dailyCleanupv+0xa4>)
 8080990:	4922      	ldr	r1, [pc, #136]	; (8080a1c <_Z12dailyCleanupv+0xa8>)
 8080992:	a802      	add	r0, sp, #8
 8080994:	f88d 4000 	strb.w	r4, [sp]
 8080998:	f7ff fc33 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 808099c:	a803      	add	r0, sp, #12
 808099e:	f7ff fe09 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  verboseMode = false;
 80809a2:	4b1f      	ldr	r3, [pc, #124]	; (8080a20 <_Z12dailyCleanupv+0xac>)
  controlRegister = (0b11110111 & controlRegister);                   // Turn off verboseMode

  dailyPumpingMins = 0;                                               // Zero for the day
  fram.put(FRAM::dailyPumpingMinsAddr,0);
 80809a4:	aa02      	add	r2, sp, #8
  fram.get(FRAM::controlRegisterAddr,controlRegister);

  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run

  verboseMode = false;
 80809a6:	701c      	strb	r4, [r3, #0]
  controlRegister = (0b11110111 & controlRegister);                   // Turn off verboseMode
 80809a8:	782b      	ldrb	r3, [r5, #0]

  dailyPumpingMins = 0;                                               // Zero for the day
  fram.put(FRAM::dailyPumpingMinsAddr,0);
 80809aa:	2103      	movs	r1, #3

  waitUntil(meterParticlePublish);
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run

  verboseMode = false;
  controlRegister = (0b11110111 & controlRegister);                   // Turn off verboseMode
 80809ac:	f023 0308 	bic.w	r3, r3, #8
 80809b0:	702b      	strb	r3, [r5, #0]

  dailyPumpingMins = 0;                                               // Zero for the day
 80809b2:	4b1c      	ldr	r3, [pc, #112]	; (8080a24 <_Z12dailyCleanupv+0xb0>)
  fram.put(FRAM::dailyPumpingMinsAddr,0);
 80809b4:	4816      	ldr	r0, [pc, #88]	; (8080a10 <_Z12dailyCleanupv+0x9c>)
  Particle.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run

  verboseMode = false;
  controlRegister = (0b11110111 & controlRegister);                   // Turn off verboseMode

  dailyPumpingMins = 0;                                               // Zero for the day
 80809b6:	601c      	str	r4, [r3, #0]
  fram.put(FRAM::dailyPumpingMinsAddr,0);
 80809b8:	9402      	str	r4, [sp, #8]
 80809ba:	f7ff ff85 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80809be:	f001 f87d 	bl	8081abc <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80809c2:	b110      	cbz	r0, 80809ca <_Z12dailyCleanupv+0x56>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 80809c4:	4620      	mov	r0, r4
 80809c6:	f001 f899 	bl	8081afc <spark_sync_time>
    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
 80809ca:	f7ff fc35 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80809ce:	f247 562f 	movw	r6, #29999	; 0x752f
 80809d2:	4604      	mov	r4, r0
 80809d4:	2500      	movs	r5, #0
 80809d6:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, []{ return true; });
    }

    template<typename Condition> static bool waitCondition(Condition _condition, system_tick_t timeout) {
        const system_tick_t start = millis();
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80809d8:	f7ff fc2e 	bl	8080238 <_ZN11SystemClass6millisEv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80809dc:	1b00      	subs	r0, r0, r4
 80809de:	eb61 0105 	sbc.w	r1, r1, r5
 80809e2:	428f      	cmp	r7, r1
 80809e4:	bf08      	it	eq
 80809e6:	4286      	cmpeq	r6, r0
 80809e8:	d305      	bcc.n	80809f6 <_Z12dailyCleanupv+0x82>

  Particle.syncTime();                                                // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 80809ea:	f7ff fbfd 	bl	80801e8 <_ZN10CloudClass12syncTimeDoneEv.isra.31>
 80809ee:	b910      	cbnz	r0, 80809f6 <_Z12dailyCleanupv+0x82>
            spark_process();
 80809f0:	f001 f84c 	bl	8081a8c <spark_process>
 80809f4:	e7f0      	b.n	80809d8 <_Z12dailyCleanupv+0x64>
 80809f6:	f7ff fbf7 	bl	80801e8 <_ZN10CloudClass12syncTimeDoneEv.isra.31>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 80809fa:	2301      	movs	r3, #1
 80809fc:	4a03      	ldr	r2, [pc, #12]	; (8080a0c <_Z12dailyCleanupv+0x98>)
 80809fe:	4619      	mov	r1, r3
 8080a00:	4803      	ldr	r0, [pc, #12]	; (8080a10 <_Z12dailyCleanupv+0x9c>)
 8080a02:	f000 fd76 	bl	80814f2 <_ZN6MB85RC9writeDataEjPKhj>

  fram.put(FRAM::controlRegisterAddr, controlRegister);
}
 8080a06:	b005      	add	sp, #20
 8080a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080a0a:	bf00      	nop
 8080a0c:	20000221 	.word	0x20000221
 8080a10:	20000224 	.word	0x20000224
 8080a14:	20000170 	.word	0x20000170
 8080a18:	0808509e 	.word	0x0808509e
 8080a1c:	080850a6 	.word	0x080850a6
 8080a20:	200001ac 	.word	0x200001ac
 8080a24:	20000188 	.word	0x20000188

08080a28 <setup>:
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);       // This sets a limit on how long we can pump - set to 60 minutes

void setup()                                                   // Note: Disconnected Setup()
{
 8080a28:	b510      	push	{r4, lr}
  pinMode(pumpControlPin,OUTPUT);                               // Turns on the pump
 8080a2a:	2101      	movs	r1, #1
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);       // This sets a limit on how long we can pump - set to 60 minutes

void setup()                                                   // Note: Disconnected Setup()
{
 8080a2c:	b0a8      	sub	sp, #160	; 0xa0
  pinMode(pumpControlPin,OUTPUT);                               // Turns on the pump
 8080a2e:	200e      	movs	r0, #14
 8080a30:	f002 fb8a 	bl	8083148 <pinMode>
  pinMode(pumpCurrentPin,INPUT);                                // Senses the pump current
 8080a34:	2100      	movs	r1, #0
 8080a36:	200c      	movs	r0, #12
 8080a38:	f002 fb86 	bl	8083148 <pinMode>
  pinMode(controlPowerPin,INPUT);                               // Voltage Sensor Interrupt pin
 8080a3c:	2100      	movs	r1, #0
 8080a3e:	2019      	movs	r0, #25
 8080a40:	f002 fb82 	bl	8083148 <pinMode>
  // pinMode(pumpOnPin,INPUT);                                     // Voltage Sensor Interrupt pin
  pinMode(lowLevelPin,INPUT);                                   // Voltage Sensor Interrupt pin
 8080a44:	2100      	movs	r1, #0
 8080a46:	201b      	movs	r0, #27
 8080a48:	f002 fb7e 	bl	8083148 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080a4c:	2100      	movs	r1, #0
 8080a4e:	2011      	movs	r0, #17
 8080a50:	f002 fb7a 	bl	8083148 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080a54:	2100      	movs	r1, #0
 8080a56:	2005      	movs	r0, #5
 8080a58:	f002 fb76 	bl	8083148 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080a5c:	2101      	movs	r1, #1
 8080a5e:	2007      	movs	r0, #7
 8080a60:	f002 fb72 	bl	8083148 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080a64:	2101      	movs	r1, #1
 8080a66:	201d      	movs	r0, #29
 8080a68:	f002 fb6e 	bl	8083148 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 8080a6c:	2101      	movs	r1, #1
 8080a6e:	201d      	movs	r0, #29
 8080a70:	f002 fb7b 	bl	808316a <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080a74:	2101      	movs	r1, #1
 8080a76:	2006      	movs	r0, #6
 8080a78:	f002 fb66 	bl	8083148 <pinMode>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080a7c:	2101      	movs	r1, #1
 8080a7e:	2004      	movs	r0, #4
 8080a80:	f002 fb62 	bl	8083148 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080a84:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080a86:	2400      	movs	r4, #0
 8080a88:	f001 f820 	bl	8081acc <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080a8c:	2300      	movs	r3, #0
 8080a8e:	227d      	movs	r2, #125	; 0x7d
 8080a90:	a908      	add	r1, sp, #32
 8080a92:	a804      	add	r0, sp, #16
 8080a94:	f002 f871 	bl	8082b7a <_ZNK6String8getBytesEPhjj>
 8080a98:	4623      	mov	r3, r4
 8080a9a:	4622      	mov	r2, r4
 8080a9c:	495c      	ldr	r1, [pc, #368]	; (8080c10 <setup+0x1e8>)
 8080a9e:	9401      	str	r4, [sp, #4]
 8080aa0:	9400      	str	r4, [sp, #0]
 8080aa2:	a808      	add	r0, sp, #32
 8080aa4:	f001 f822 	bl	8081aec <spark_subscribe>
 8080aa8:	4623      	mov	r3, r4
 8080aaa:	9401      	str	r4, [sp, #4]
 8080aac:	9400      	str	r4, [sp, #0]
 8080aae:	4622      	mov	r2, r4
 8080ab0:	4958      	ldr	r1, [pc, #352]	; (8080c14 <setup+0x1ec>)
 8080ab2:	4859      	ldr	r0, [pc, #356]	; (8080c18 <setup+0x1f0>)
 8080ab4:	f001 f81a 	bl	8081aec <spark_subscribe>
 8080ab8:	4b58      	ldr	r3, [pc, #352]	; (8080c1c <setup+0x1f4>)
 8080aba:	781b      	ldrb	r3, [r3, #0]
  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  if (Particle.subscribe(PUMPCHANNEL, pumpControlHandler, MY_DEVICES)) {
 8080abc:	b118      	cbz	r0, 8080ac6 <setup+0x9e>
    Particle.publish("PubSub", "Subscribe successful",PRIVATE);
 8080abe:	f88d 4000 	strb.w	r4, [sp]
 8080ac2:	4a57      	ldr	r2, [pc, #348]	; (8080c20 <setup+0x1f8>)
 8080ac4:	e002      	b.n	8080acc <setup+0xa4>
  }
  else Particle.publish("PubSub", "Subscribe Not successful",PRIVATE);
 8080ac6:	4a57      	ldr	r2, [pc, #348]	; (8080c24 <setup+0x1fc>)
 8080ac8:	f88d 0000 	strb.w	r0, [sp]
 8080acc:	4956      	ldr	r1, [pc, #344]	; (8080c28 <setup+0x200>)
 8080ace:	a802      	add	r0, sp, #8
 8080ad0:	f7ff fb97 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8080ad4:	a803      	add	r0, sp, #12
 8080ad6:	f7ff fd6d 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.variable("Alerts", (int)alertValue);
 8080ada:	4b54      	ldr	r3, [pc, #336]	; (8080c2c <setup+0x204>)
 8080adc:	a902      	add	r1, sp, #8
 8080ade:	781b      	ldrb	r3, [r3, #0]
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", resetCount);
 8080ae0:	4c53      	ldr	r4, [pc, #332]	; (8080c30 <setup+0x208>)
  if (Particle.subscribe(PUMPCHANNEL, pumpControlHandler, MY_DEVICES)) {
    Particle.publish("PubSub", "Subscribe successful",PRIVATE);
  }
  else Particle.publish("PubSub", "Subscribe Not successful",PRIVATE);

  Particle.variable("Alerts", (int)alertValue);
 8080ae2:	4854      	ldr	r0, [pc, #336]	; (8080c34 <setup+0x20c>)
 8080ae4:	9302      	str	r3, [sp, #8]
 8080ae6:	f7ff fe77 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080aea:	2300      	movs	r3, #0
 8080aec:	2204      	movs	r2, #4
 8080aee:	4952      	ldr	r1, [pc, #328]	; (8080c38 <setup+0x210>)
 8080af0:	4852      	ldr	r0, [pc, #328]	; (8080c3c <setup+0x214>)
 8080af2:	f000 ffbb 	bl	8081a6c <spark_variable>
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", resetCount);
 8080af6:	4621      	mov	r1, r4
 8080af8:	4851      	ldr	r0, [pc, #324]	; (8080c40 <setup+0x218>)
 8080afa:	f7ff fe6d 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Temperature",temperatureF);
 8080afe:	4951      	ldr	r1, [pc, #324]	; (8080c44 <setup+0x21c>)
 8080b00:	4851      	ldr	r0, [pc, #324]	; (8080c48 <setup+0x220>)
 8080b02:	f7ff fe69 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
 8080b06:	4951      	ldr	r1, [pc, #324]	; (8080c4c <setup+0x224>)
 8080b08:	2300      	movs	r3, #0
 8080b0a:	2204      	movs	r2, #4
 8080b0c:	6809      	ldr	r1, [r1, #0]
 8080b0e:	4850      	ldr	r0, [pc, #320]	; (8080c50 <setup+0x228>)
 8080b10:	f000 ffac 	bl	8081a6c <spark_variable>
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", stateOfCharge);
 8080b14:	494f      	ldr	r1, [pc, #316]	; (8080c54 <setup+0x22c>)
 8080b16:	4850      	ldr	r0, [pc, #320]	; (8080c58 <setup+0x230>)
 8080b18:	f7ff fe5e 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("pumpAmps",pumpAmps);
 8080b1c:	494f      	ldr	r1, [pc, #316]	; (8080c5c <setup+0x234>)
 8080b1e:	4850      	ldr	r0, [pc, #320]	; (8080c60 <setup+0x238>)
 8080b20:	f7ff fe5a 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("pumpMinutes",dailyPumpingMins);
 8080b24:	494f      	ldr	r1, [pc, #316]	; (8080c64 <setup+0x23c>)
 8080b26:	4850      	ldr	r0, [pc, #320]	; (8080c68 <setup+0x240>)
 8080b28:	f7ff fe56 	bl	80807d8 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>

  Particle.function("Reset-FRAM", resetFRAM);
 8080b2c:	494f      	ldr	r1, [pc, #316]	; (8080c6c <setup+0x244>)
 8080b2e:	4850      	ldr	r0, [pc, #320]	; (8080c70 <setup+0x248>)
 8080b30:	f7ff fe56 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("PumpControl",pumpControl);
 8080b34:	494f      	ldr	r1, [pc, #316]	; (8080c74 <setup+0x24c>)
 8080b36:	4850      	ldr	r0, [pc, #320]	; (8080c78 <setup+0x250>)
 8080b38:	f7ff fe52 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Reset-Counts",resetCounts);
 8080b3c:	494f      	ldr	r1, [pc, #316]	; (8080c7c <setup+0x254>)
 8080b3e:	4850      	ldr	r0, [pc, #320]	; (8080c80 <setup+0x258>)
 8080b40:	f7ff fe4e 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Hard-Reset",hardResetNow);
 8080b44:	494f      	ldr	r1, [pc, #316]	; (8080c84 <setup+0x25c>)
 8080b46:	4850      	ldr	r0, [pc, #320]	; (8080c88 <setup+0x260>)
 8080b48:	f7ff fe4a 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Now",sendNow);
 8080b4c:	494f      	ldr	r1, [pc, #316]	; (8080c8c <setup+0x264>)
 8080b4e:	4850      	ldr	r0, [pc, #320]	; (8080c90 <setup+0x268>)
 8080b50:	f7ff fe46 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080b54:	494f      	ldr	r1, [pc, #316]	; (8080c94 <setup+0x26c>)
 8080b56:	4850      	ldr	r0, [pc, #320]	; (8080c98 <setup+0x270>)
 8080b58:	f7ff fe42 	bl	80807e0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080b5c:	f000 ff9e 	bl	8081a9c <spark_cloud_flag_connect>

  Particle.connect();

  fram.begin();                                                         // Initializes Wire but does not return a boolean on successful initialization
 8080b60:	484e      	ldr	r0, [pc, #312]	; (8080c9c <setup+0x274>)
 8080b62:	f000 fc2f 	bl	80813c4 <_ZN6MB85RC5beginEv>

  fram.get(FRAM::resetCountAddr, resetCount);                           // Retrive system recount data from FRAM
 8080b66:	4622      	mov	r2, r4
 8080b68:	2102      	movs	r1, #2
 8080b6a:	484c      	ldr	r0, [pc, #304]	; (8080c9c <setup+0x274>)
 8080b6c:	f7ff fea4 	bl	80808b8 <_ZN6MB85RC3getImEERT_jS2_>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080b70:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080b72:	4611      	mov	r1, r2
 8080b74:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080b76:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080b78:	f000 fdbc 	bl	80816f4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080b7c:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET) {               // Check to see if we are starting from a pin reset
 8080b7e:	2b14      	cmp	r3, #20
 8080b80:	d107      	bne.n	8080b92 <setup+0x16a>
    resetCount++;
 8080b82:	6823      	ldr	r3, [r4, #0]
    fram.put(FRAM::resetCountAddr,resetCount);                          // If so, store incremented number - watchdog must have done This
 8080b84:	4622      	mov	r2, r4

  fram.begin();                                                         // Initializes Wire but does not return a boolean on successful initialization

  fram.get(FRAM::resetCountAddr, resetCount);                           // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET) {               // Check to see if we are starting from a pin reset
    resetCount++;
 8080b86:	3301      	adds	r3, #1
    fram.put(FRAM::resetCountAddr,resetCount);                          // If so, store incremented number - watchdog must have done This
 8080b88:	2102      	movs	r1, #2
 8080b8a:	4844      	ldr	r0, [pc, #272]	; (8080c9c <setup+0x274>)

  fram.begin();                                                         // Initializes Wire but does not return a boolean on successful initialization

  fram.get(FRAM::resetCountAddr, resetCount);                           // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET) {               // Check to see if we are starting from a pin reset
    resetCount++;
 8080b8c:	6023      	str	r3, [r4, #0]
    fram.put(FRAM::resetCountAddr,resetCount);                          // If so, store incremented number - watchdog must have done This
 8080b8e:	f7ff fe9b 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
  }

  fram.get(FRAM::controlRegisterAddr, controlRegister);
 8080b92:	4c43      	ldr	r4, [pc, #268]	; (8080ca0 <setup+0x278>)
 8080b94:	2101      	movs	r1, #1
 8080b96:	4622      	mov	r2, r4
 8080b98:	4840      	ldr	r0, [pc, #256]	; (8080c9c <setup+0x274>)
 8080b9a:	f7ff fe27 	bl	80807ec <_ZN6MB85RC3getIhEERT_jS2_>
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080b9e:	7823      	ldrb	r3, [r4, #0]
 8080ba0:	4a40      	ldr	r2, [pc, #256]	; (8080ca4 <setup+0x27c>)
 8080ba2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8080ba6:	7013      	strb	r3, [r2, #0]
  fram.get(FRAM::dailyPumpingMinsAddr,dailyPumpingMins);                // Reload so we don't loose track
 8080ba8:	2103      	movs	r1, #3
 8080baa:	4a2e      	ldr	r2, [pc, #184]	; (8080c64 <setup+0x23c>)
 8080bac:	483b      	ldr	r0, [pc, #236]	; (8080c9c <setup+0x274>)
 8080bae:	f7ff fe83 	bl	80808b8 <_ZN6MB85RC3getImEERT_jS2_>
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 8080bb2:	7823      	ldrb	r3, [r4, #0]
 8080bb4:	079b      	lsls	r3, r3, #30
 8080bb6:	d504      	bpl.n	8080bc2 <setup+0x19a>
    fram.get(FRAM::pumpingStartAddr,pumpingStart);                      // Reload the pumping start time
 8080bb8:	4a3b      	ldr	r2, [pc, #236]	; (8080ca8 <setup+0x280>)
 8080bba:	2105      	movs	r1, #5
 8080bbc:	4837      	ldr	r0, [pc, #220]	; (8080c9c <setup+0x274>)
 8080bbe:	f7ff fe7b 	bl	80808b8 <_ZN6MB85RC3getImEERT_jS2_>
  }

  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 8080bc2:	483a      	ldr	r0, [pc, #232]	; (8080cac <setup+0x284>)
 8080bc4:	f001 fcd8 	bl	8082578 <_ZN9FuelGauge6getSoCEv>
 8080bc8:	f003 fb8a 	bl	80842e0 <__aeabi_f2iz>
 8080bcc:	4b21      	ldr	r3, [pc, #132]	; (8080c54 <setup+0x22c>)
 8080bce:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 8080bd0:	4b37      	ldr	r3, [pc, #220]	; (8080cb0 <setup+0x288>)
 8080bd2:	681b      	ldr	r3, [r3, #0]
 8080bd4:	4298      	cmp	r0, r3
 8080bd6:	dd01      	ble.n	8080bdc <setup+0x1b4>
 8080bd8:	f7ff fbee 	bl	80803b8 <_Z17connectToParticlev>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to response
 8080bdc:	2300      	movs	r3, #0
 8080bde:	9300      	str	r3, [sp, #0]
 8080be0:	2201      	movs	r2, #1
 8080be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080be6:	4933      	ldr	r1, [pc, #204]	; (8080cb4 <setup+0x28c>)
 8080be8:	2011      	movs	r0, #17
 8080bea:	f001 fd5d 	bl	80826a8 <_Z15attachInterrupttPFvvE13InterruptModeah>

  pumpBackupTimer.stop();
 8080bee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8080bf2:	4831      	ldr	r0, [pc, #196]	; (8080cb8 <setup+0x290>)
 8080bf4:	f7ff fb23 	bl	808023e <_ZN5Timer4stopEj>

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080bf8:	4b30      	ldr	r3, [pc, #192]	; (8080cbc <setup+0x294>)
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080bfa:	a804      	add	r0, sp, #16

  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to response

  pumpBackupTimer.stop();

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080bfc:	781a      	ldrb	r2, [r3, #0]
 8080bfe:	2a01      	cmp	r2, #1
 8080c00:	bf1c      	itt	ne
 8080c02:	2202      	movne	r2, #2
 8080c04:	701a      	strbne	r2, [r3, #0]
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8080c06:	f001 ff32 	bl	8082a6e <_ZN6StringD1Ev>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to response

  pumpBackupTimer.stop();

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}
 8080c0a:	b028      	add	sp, #160	; 0xa0
 8080c0c:	bd10      	pop	{r4, pc}
 8080c0e:	bf00      	nop
 8080c10:	080808d9 	.word	0x080808d9
 8080c14:	08080705 	.word	0x08080705
 8080c18:	080850b4 	.word	0x080850b4
 8080c1c:	20000170 	.word	0x20000170
 8080c20:	080850df 	.word	0x080850df
 8080c24:	080850fb 	.word	0x080850fb
 8080c28:	080850f4 	.word	0x080850f4
 8080c2c:	20000171 	.word	0x20000171
 8080c30:	20000190 	.word	0x20000190
 8080c34:	08084f94 	.word	0x08084f94
 8080c38:	200001d1 	.word	0x200001d1
 8080c3c:	08085114 	.word	0x08085114
 8080c40:	0808511b 	.word	0x0808511b
 8080c44:	20000194 	.word	0x20000194
 8080c48:	08085126 	.word	0x08085126
 8080c4c:	20000074 	.word	0x20000074
 8080c50:	08085132 	.word	0x08085132
 8080c54:	2000018c 	.word	0x2000018c
 8080c58:	0808513a 	.word	0x0808513a
 8080c5c:	20000180 	.word	0x20000180
 8080c60:	08085145 	.word	0x08085145
 8080c64:	20000188 	.word	0x20000188
 8080c68:	0808514e 	.word	0x0808514e
 8080c6c:	0808010d 	.word	0x0808010d
 8080c70:	0808515a 	.word	0x0808515a
 8080c74:	08080199 	.word	0x08080199
 8080c78:	080850d3 	.word	0x080850d3
 8080c7c:	080811cd 	.word	0x080811cd
 8080c80:	08085165 	.word	0x08085165
 8080c84:	080801cd 	.word	0x080801cd
 8080c88:	08085172 	.word	0x08085172
 8080c8c:	080800f1 	.word	0x080800f1
 8080c90:	0808517d 	.word	0x0808517d
 8080c94:	080807fd 	.word	0x080807fd
 8080c98:	08085186 	.word	0x08085186
 8080c9c:	20000224 	.word	0x20000224
 8080ca0:	20000221 	.word	0x20000221
 8080ca4:	200001ac 	.word	0x200001ac
 8080ca8:	200001b0 	.word	0x200001b0
 8080cac:	20000174 	.word	0x20000174
 8080cb0:	2000007c 	.word	0x2000007c
 8080cb4:	080800c9 	.word	0x080800c9
 8080cb8:	200001b4 	.word	0x200001b4
 8080cbc:	20000184 	.word	0x20000184

08080cc0 <_Z16takeMeasurementsv>:
  return !Particle.connected();                             // This is a requirement to use waitFor
}


// Take measurements
void takeMeasurements() {
 8080cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
 8080cc4:	4a52      	ldr	r2, [pc, #328]	; (8080e10 <_Z16takeMeasurementsv+0x150>)
  return !Particle.connected();                             // This is a requirement to use waitFor
}


// Take measurements
void takeMeasurements() {
 8080cc6:	b085      	sub	sp, #20
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080cc8:	4c52      	ldr	r4, [pc, #328]	; (8080e14 <_Z16takeMeasurementsv+0x154>)
}


// Take measurements
void takeMeasurements() {
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
 8080cca:	2101      	movs	r1, #1
 8080ccc:	4852      	ldr	r0, [pc, #328]	; (8080e18 <_Z16takeMeasurementsv+0x158>)
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 8080cce:	4f53      	ldr	r7, [pc, #332]	; (8080e1c <_Z16takeMeasurementsv+0x15c>)
}


// Take measurements
void takeMeasurements() {
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
 8080cd0:	f7ff fd8c 	bl	80807ec <_ZN6MB85RC3getIhEERT_jS2_>
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080cd4:	2300      	movs	r3, #0

  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080cd6:	4852      	ldr	r0, [pc, #328]	; (8080e20 <_Z16takeMeasurementsv+0x160>)


// Take measurements
void takeMeasurements() {
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080cd8:	7826      	ldrb	r6, [r4, #0]
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 8080cda:	f8d7 9000 	ldr.w	r9, [r7]
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080cde:	7023      	strb	r3, [r4, #0]

  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080ce0:	f7ff fa9c 	bl	808021c <_ZN5spark13CellularClass5readyEv>
 8080ce4:	b108      	cbz	r0, 8080cea <_Z16takeMeasurementsv+0x2a>
 8080ce6:	f7ff fae7 	bl	80802b8 <_Z17getSignalStrengthv>
  getTemperature();                                                             // Get Temperature at startup as well
 8080cea:	f7ff fb11 	bl	8080310 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
 8080cee:	484d      	ldr	r0, [pc, #308]	; (8080e24 <_Z16takeMeasurementsv+0x164>)
 8080cf0:	f001 fc42 	bl	8082578 <_ZN9FuelGauge6getSoCEv>
 8080cf4:	f003 faf4 	bl	80842e0 <__aeabi_f2iz>
 8080cf8:	4b4b      	ldr	r3, [pc, #300]	; (8080e28 <_Z16takeMeasurementsv+0x168>)
 8080cfa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8080e10 <_Z16takeMeasurementsv+0x150>
 8080cfe:	6018      	str	r0, [r3, #0]
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080d00:	4b4a      	ldr	r3, [pc, #296]	; (8080e2c <_Z16takeMeasurementsv+0x16c>)
 8080d02:	681b      	ldr	r3, [r3, #0]
 8080d04:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;      // Set the value for alertValue - This is opposite - power is good
 8080d08:	f8b3 12c0 	ldrh.w	r1, [r3, #704]	; 0x2c0
 8080d0c:	6912      	ldr	r2, [r2, #16]
 8080d0e:	4211      	tst	r1, r2
 8080d10:	bf02      	ittt	eq
 8080d12:	7822      	ldrbeq	r2, [r4, #0]
 8080d14:	f042 0201 	orreq.w	r2, r2, #1
 8080d18:	7022      	strbeq	r2, [r4, #0]
 8080d1a:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
 8080d1e:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8080d22:	6912      	ldr	r2, [r2, #16]
 8080d24:	4213      	tst	r3, r2
 8080d26:	bf02      	ittt	eq
 8080d28:	7823      	ldrbeq	r3, [r4, #0]
 8080d2a:	f043 0302 	orreq.w	r3, r3, #2
 8080d2e:	7023      	strbeq	r3, [r4, #0]
  if (pumpingEnabled)                                                           // If the pump is on, we need to sample the current
 8080d30:	4b3f      	ldr	r3, [pc, #252]	; (8080e30 <_Z16takeMeasurementsv+0x170>)
 8080d32:	781d      	ldrb	r5, [r3, #0]
 8080d34:	2d00      	cmp	r5, #0
 8080d36:	d032      	beq.n	8080d9e <_Z16takeMeasurementsv+0xde>
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 8080d38:	7823      	ldrb	r3, [r4, #0]
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080d3a:	200c      	movs	r0, #12
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;      // Set the value for alertValue - This is opposite - power is good
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (pumpingEnabled)                                                           // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 8080d3c:	f043 0304 	orr.w	r3, r3, #4
 8080d40:	7023      	strb	r3, [r4, #0]
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080d42:	f002 fa3e 	bl	80831c2 <analogRead>
 8080d46:	4b3b      	ldr	r3, [pc, #236]	; (8080e34 <_Z16takeMeasurementsv+0x174>)
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 8080d48:	f640 72ff 	movw	r2, #4095	; 0xfff
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;      // Set the value for alertValue - This is opposite - power is good
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (pumpingEnabled)                                                           // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080d4c:	6018      	str	r0, [r3, #0]
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 8080d4e:	2320      	movs	r3, #32
 8080d50:	9300      	str	r3, [sp, #0]
 8080d52:	2300      	movs	r3, #0
 8080d54:	4619      	mov	r1, r3
 8080d56:	f000 ff71 	bl	8081c3c <_Z3mapiiiii>
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 8080d5a:	f109 0301 	add.w	r3, r9, #1
 8080d5e:	4298      	cmp	r0, r3
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (pumpingEnabled)                                                           // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 8080d60:	6038      	str	r0, [r7, #0]
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 8080d62:	dc06      	bgt.n	8080d72 <_Z16takeMeasurementsv+0xb2>
 8080d64:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8080d68:	4298      	cmp	r0, r3
 8080d6a:	bfac      	ite	ge
 8080d6c:	2500      	movge	r5, #0
 8080d6e:	2501      	movlt	r5, #1
 8080d70:	e000      	b.n	8080d74 <_Z16takeMeasurementsv+0xb4>
 8080d72:	2501      	movs	r5, #1
    if (!(controlRegister & 0b00000010)) {                                      // This is a new pumping session
 8080d74:	f898 3000 	ldrb.w	r3, [r8]
 8080d78:	079b      	lsls	r3, r3, #30
 8080d7a:	d438      	bmi.n	8080dee <_Z16takeMeasurementsv+0x12e>
      pumpingStart = Time.now();
 8080d7c:	f001 ffa2 	bl	8082cc4 <_ZN9TimeClass3nowEv>
 8080d80:	4a2d      	ldr	r2, [pc, #180]	; (8080e38 <_Z16takeMeasurementsv+0x178>)
      fram.put(FRAM::pumpingStartAddr,pumpingStart);                            // Write to FRAM in case of a reset
 8080d82:	2105      	movs	r1, #5
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
    if (!(controlRegister & 0b00000010)) {                                      // This is a new pumping session
      pumpingStart = Time.now();
 8080d84:	6010      	str	r0, [r2, #0]
      fram.put(FRAM::pumpingStartAddr,pumpingStart);                            // Write to FRAM in case of a reset
 8080d86:	4824      	ldr	r0, [pc, #144]	; (8080e18 <_Z16takeMeasurementsv+0x158>)
 8080d88:	f7ff fd9e 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
      fram.put(FRAM::controlRegisterAddr, controlRegister | 0b00000010);        // Turn on the pumping bit
 8080d8c:	4b20      	ldr	r3, [pc, #128]	; (8080e10 <_Z16takeMeasurementsv+0x150>)
 8080d8e:	aa04      	add	r2, sp, #16
 8080d90:	781b      	ldrb	r3, [r3, #0]
 8080d92:	2101      	movs	r1, #1
 8080d94:	f043 0302 	orr.w	r3, r3, #2
 8080d98:	f842 3d04 	str.w	r3, [r2, #-4]!
 8080d9c:	e021      	b.n	8080de2 <_Z16takeMeasurementsv+0x122>
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
 8080d9e:	f898 3000 	ldrb.w	r3, [r8]
 8080da2:	f003 0202 	and.w	r2, r3, #2
 8080da6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8080daa:	b1f2      	cbz	r2, 8080dea <_Z16takeMeasurementsv+0x12a>
    fram.put(FRAM::controlRegisterAddr, controlRegister ^ 0b00000010);          // It is on and I want to turn the pumping bit off with an xor
 8080dac:	aa04      	add	r2, sp, #16
 8080dae:	f083 0302 	eor.w	r3, r3, #2
 8080db2:	f842 3d04 	str.w	r3, [r2, #-4]!
 8080db6:	2101      	movs	r1, #1
 8080db8:	4817      	ldr	r0, [pc, #92]	; (8080e18 <_Z16takeMeasurementsv+0x158>)
 8080dba:	f7ff fd85 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
    time_t pumpingStop = Time.now();
 8080dbe:	f001 ff81 	bl	8082cc4 <_ZN9TimeClass3nowEv>
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);             // Add to the total for the day
 8080dc2:	4b1d      	ldr	r3, [pc, #116]	; (8080e38 <_Z16takeMeasurementsv+0x178>)
 8080dc4:	4f1d      	ldr	r7, [pc, #116]	; (8080e3c <_Z16takeMeasurementsv+0x17c>)
 8080dc6:	6819      	ldr	r1, [r3, #0]
 8080dc8:	f003 fac2 	bl	8084350 <difftime>
 8080dcc:	2200      	movs	r2, #0
 8080dce:	4b1c      	ldr	r3, [pc, #112]	; (8080e40 <_Z16takeMeasurementsv+0x180>)
 8080dd0:	f002 fec8 	bl	8083b64 <__aeabi_ddiv>
 8080dd4:	f002 ffae 	bl	8083d34 <__aeabi_d2iz>
    fram.put(FRAM::dailyPumpingMinsAddr,dailyPumpingMins);                      // Store it in FRAM in case of a reset
 8080dd8:	463a      	mov	r2, r7
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
    fram.put(FRAM::controlRegisterAddr, controlRegister ^ 0b00000010);          // It is on and I want to turn the pumping bit off with an xor
    time_t pumpingStop = Time.now();
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);             // Add to the total for the day
 8080dda:	683b      	ldr	r3, [r7, #0]
    fram.put(FRAM::dailyPumpingMinsAddr,dailyPumpingMins);                      // Store it in FRAM in case of a reset
 8080ddc:	2103      	movs	r1, #3
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
    fram.put(FRAM::controlRegisterAddr, controlRegister ^ 0b00000010);          // It is on and I want to turn the pumping bit off with an xor
    time_t pumpingStop = Time.now();
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);             // Add to the total for the day
 8080dde:	4418      	add	r0, r3
 8080de0:	6038      	str	r0, [r7, #0]
    fram.put(FRAM::dailyPumpingMinsAddr,dailyPumpingMins);                      // Store it in FRAM in case of a reset
 8080de2:	480d      	ldr	r0, [pc, #52]	; (8080e18 <_Z16takeMeasurementsv+0x158>)
 8080de4:	f7ff fd70 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
 8080de8:	e001      	b.n	8080dee <_Z16takeMeasurementsv+0x12e>

// Take measurements
void takeMeasurements() {
  fram.get(FRAM::controlRegisterAddr, controlRegister);                         // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
 8080dea:	4605      	mov	r5, r0
    fram.put(FRAM::controlRegisterAddr, controlRegister ^ 0b00000010);          // It is on and I want to turn the pumping bit off with an xor
    time_t pumpingStop = Time.now();
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);             // Add to the total for the day
    fram.put(FRAM::dailyPumpingMinsAddr,dailyPumpingMins);                      // Store it in FRAM in case of a reset
  }
  else pumpAmps = 0;
 8080dec:	6038      	str	r0, [r7, #0]
  if (getLostPower()) alertValue = alertValue | 0b10000000;                     // Set the value for alertValue
 8080dee:	f7ff fb7f 	bl	80804f0 <_Z12getLostPowerv>
 8080df2:	b118      	cbz	r0, 8080dfc <_Z16takeMeasurementsv+0x13c>
 8080df4:	7823      	ldrb	r3, [r4, #0]
 8080df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080dfa:	7023      	strb	r3, [r4, #0]
  if (alertValue != lastAlertValue || pumpAmpsSignificantChange) state = REPORTING_STATE;
 8080dfc:	7823      	ldrb	r3, [r4, #0]
 8080dfe:	42b3      	cmp	r3, r6
 8080e00:	d100      	bne.n	8080e04 <_Z16takeMeasurementsv+0x144>
 8080e02:	b115      	cbz	r5, 8080e0a <_Z16takeMeasurementsv+0x14a>
 8080e04:	4b0f      	ldr	r3, [pc, #60]	; (8080e44 <_Z16takeMeasurementsv+0x184>)
 8080e06:	2205      	movs	r2, #5
 8080e08:	701a      	strb	r2, [r3, #0]
}
 8080e0a:	b005      	add	sp, #20
 8080e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080e10:	20000221 	.word	0x20000221
 8080e14:	20000171 	.word	0x20000171
 8080e18:	20000224 	.word	0x20000224
 8080e1c:	20000180 	.word	0x20000180
 8080e20:	20000234 	.word	0x20000234
 8080e24:	20000174 	.word	0x20000174
 8080e28:	2000018c 	.word	0x2000018c
 8080e2c:	200001a8 	.word	0x200001a8
 8080e30:	200001d0 	.word	0x200001d0
 8080e34:	2000021c 	.word	0x2000021c
 8080e38:	200001b0 	.word	0x200001b0
 8080e3c:	20000188 	.word	0x20000188
 8080e40:	404e0000 	.word	0x404e0000
 8080e44:	20000184 	.word	0x20000184

08080e48 <loop>:

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}

void loop()
{
 8080e48:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
 8080e4a:	4c98      	ldr	r4, [pc, #608]	; (80810ac <loop+0x264>)

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}

void loop()
{
 8080e4c:	b086      	sub	sp, #24
  switch(state) {
 8080e4e:	7823      	ldrb	r3, [r4, #0]
 8080e50:	3b01      	subs	r3, #1
 8080e52:	2b05      	cmp	r3, #5
 8080e54:	f200 81ae 	bhi.w	80811b4 <loop+0x36c>
 8080e58:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080e5c:	000600ca 	.word	0x000600ca
 8080e60:	004d0036 	.word	0x004d0036
 8080e64:	008f0073 	.word	0x008f0073
  case IDLE_STATE:
    if (watchdogFlag) petWatchdog();
 8080e68:	4b91      	ldr	r3, [pc, #580]	; (80810b0 <loop+0x268>)
 8080e6a:	781b      	ldrb	r3, [r3, #0]
 8080e6c:	b10b      	cbz	r3, 8080e72 <loop+0x2a>
 8080e6e:	f7ff fa8f 	bl	8080390 <_Z11petWatchdogv>
    if (verboseMode && state != oldState) publishStateTransition();
 8080e72:	4b90      	ldr	r3, [pc, #576]	; (80810b4 <loop+0x26c>)
 8080e74:	781b      	ldrb	r3, [r3, #0]
 8080e76:	b133      	cbz	r3, 8080e86 <loop+0x3e>
 8080e78:	4b8f      	ldr	r3, [pc, #572]	; (80810b8 <loop+0x270>)
 8080e7a:	7822      	ldrb	r2, [r4, #0]
 8080e7c:	781b      	ldrb	r3, [r3, #0]
 8080e7e:	429a      	cmp	r2, r3
 8080e80:	d001      	beq.n	8080e86 <loop+0x3e>
 8080e82:	f7ff fc71 	bl	8080768 <_Z22publishStateTransitionv>
    if (meterSampleRate()) takeMeasurements();                                    // Take measurements every couple seconds
 8080e86:	f7ff fb5d 	bl	8080544 <_Z15meterSampleRatev>
 8080e8a:	b108      	cbz	r0, 8080e90 <loop+0x48>
 8080e8c:	f7ff ff18 	bl	8080cc0 <_Z16takeMeasurementsv>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;              // We want to report on the hour
 8080e90:	f001 ff20 	bl	8082cd4 <_ZN9TimeClass4hourEv>
 8080e94:	4b89      	ldr	r3, [pc, #548]	; (80810bc <loop+0x274>)
 8080e96:	781b      	ldrb	r3, [r3, #0]
 8080e98:	4298      	cmp	r0, r3
 8080e9a:	bf1c      	itt	ne
 8080e9c:	2305      	movne	r3, #5
 8080e9e:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                 // The battery is low - sleep
 8080ea0:	4b87      	ldr	r3, [pc, #540]	; (80810c0 <loop+0x278>)
 8080ea2:	681a      	ldr	r2, [r3, #0]
 8080ea4:	4b87      	ldr	r3, [pc, #540]	; (80810c4 <loop+0x27c>)
 8080ea6:	681b      	ldr	r3, [r3, #0]
 8080ea8:	429a      	cmp	r2, r3
 8080eaa:	bfdc      	itt	le
 8080eac:	2304      	movle	r3, #4
 8080eae:	7023      	strble	r3, [r4, #0]
    if (pumpingEnabled || digitalRead(pumpControlPin)) state = PUMPING_STATE;     // If we are pumping, we need to report
 8080eb0:	4b85      	ldr	r3, [pc, #532]	; (80810c8 <loop+0x280>)
 8080eb2:	781b      	ldrb	r3, [r3, #0]
 8080eb4:	2b00      	cmp	r3, #0
 8080eb6:	f040 8149 	bne.w	808114c <loop+0x304>
 8080eba:	200e      	movs	r0, #14
 8080ebc:	f002 f96e 	bl	808319c <digitalRead>
 8080ec0:	2800      	cmp	r0, #0
 8080ec2:	f040 8143 	bne.w	808114c <loop+0x304>
 8080ec6:	e175      	b.n	80811b4 <loop+0x36c>
    break;

  case PUMPING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
 8080ec8:	4b7a      	ldr	r3, [pc, #488]	; (80810b4 <loop+0x26c>)
 8080eca:	781b      	ldrb	r3, [r3, #0]
 8080ecc:	b12b      	cbz	r3, 8080eda <loop+0x92>
 8080ece:	4b7a      	ldr	r3, [pc, #488]	; (80810b8 <loop+0x270>)
 8080ed0:	781b      	ldrb	r3, [r3, #0]
 8080ed2:	2b03      	cmp	r3, #3
 8080ed4:	d001      	beq.n	8080eda <loop+0x92>
 8080ed6:	f7ff fc47 	bl	8080768 <_Z22publishStateTransitionv>
    if (pumpingEnabled && !digitalRead(pumpControlPin)) {       // First time to this state we will turn on the pump and report
 8080eda:	4b7b      	ldr	r3, [pc, #492]	; (80810c8 <loop+0x280>)
 8080edc:	781a      	ldrb	r2, [r3, #0]
 8080ede:	461e      	mov	r6, r3
 8080ee0:	2a00      	cmp	r2, #0
 8080ee2:	f000 8135 	beq.w	8081150 <loop+0x308>
 8080ee6:	200e      	movs	r0, #14
 8080ee8:	f002 f958 	bl	808319c <digitalRead>
 8080eec:	4605      	mov	r5, r0
 8080eee:	2800      	cmp	r0, #0
 8080ef0:	f000 8144 	beq.w	808117c <loop+0x334>
 8080ef4:	e12c      	b.n	8081150 <loop+0x308>
      state = REPORTING_STATE;                                 // Report a change in the pumping status
    }
  } break;

  case LOW_BATTERY_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
 8080ef6:	4b6f      	ldr	r3, [pc, #444]	; (80810b4 <loop+0x26c>)
 8080ef8:	781b      	ldrb	r3, [r3, #0]
 8080efa:	b12b      	cbz	r3, 8080f08 <loop+0xc0>
 8080efc:	4b6e      	ldr	r3, [pc, #440]	; (80810b8 <loop+0x270>)
 8080efe:	781b      	ldrb	r3, [r3, #0]
 8080f00:	2b04      	cmp	r3, #4
 8080f02:	d001      	beq.n	8080f08 <loop+0xc0>
 8080f04:	f7ff fc30 	bl	8080768 <_Z22publishStateTransitionv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f08:	f000 fdd8 	bl	8081abc <spark_cloud_flag_connected>
      if (Particle.connected()) {
 8080f0c:	b108      	cbz	r0, 8080f12 <loop+0xca>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8080f0e:	f7ff fabf 	bl	8080490 <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8080f12:	4b6e      	ldr	r3, [pc, #440]	; (80810cc <loop+0x284>)
 8080f14:	2400      	movs	r4, #0
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080f16:	4621      	mov	r1, r4
 8080f18:	2007      	movs	r0, #7
  case LOW_BATTERY_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
      if (Particle.connected()) {
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 8080f1a:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080f1c:	f002 f925 	bl	808316a <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                          // Turns off the temp sensor
 8080f20:	4621      	mov	r1, r4
 8080f22:	201d      	movs	r0, #29
 8080f24:	f002 f921 	bl	808316a <digitalWrite>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080f28:	f001 fede 	bl	8082ce8 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080f2c:	4b68      	ldr	r3, [pc, #416]	; (80810d0 <loop+0x288>)
 8080f2e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080f32:	223c      	movs	r2, #60	; 0x3c
 8080f34:	4342      	muls	r2, r0
 8080f36:	681b      	ldr	r3, [r3, #0]
 8080f38:	2101      	movs	r1, #1
 8080f3a:	a804      	add	r0, sp, #16
 8080f3c:	f001 fe3e 	bl	8082bbc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
  } break;
 8080f40:	e138      	b.n	80811b4 <loop+0x36c>

  case REPORTING_STATE: 
    if (verboseMode && state != oldState) publishStateTransition();
 8080f42:	4b5c      	ldr	r3, [pc, #368]	; (80810b4 <loop+0x26c>)
 8080f44:	781b      	ldrb	r3, [r3, #0]
 8080f46:	b12b      	cbz	r3, 8080f54 <loop+0x10c>
 8080f48:	4b5b      	ldr	r3, [pc, #364]	; (80810b8 <loop+0x270>)
 8080f4a:	781b      	ldrb	r3, [r3, #0]
 8080f4c:	2b05      	cmp	r3, #5
 8080f4e:	d001      	beq.n	8080f54 <loop+0x10c>
 8080f50:	f7ff fc0a 	bl	8080768 <_Z22publishStateTransitionv>
 8080f54:	f000 fdb2 	bl	8081abc <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080f58:	b168      	cbz	r0, 8080f76 <loop+0x12e>
      if (alertValue != 0)  resolveAlert();
 8080f5a:	4b5e      	ldr	r3, [pc, #376]	; (80810d4 <loop+0x28c>)
 8080f5c:	781b      	ldrb	r3, [r3, #0]
 8080f5e:	b10b      	cbz	r3, 8080f64 <loop+0x11c>
 8080f60:	f7ff fb3e 	bl	80805e0 <_Z12resolveAlertv>
      sendEvent();                                                    // Send data to Ubidots
 8080f64:	f7ff fb80 	bl	8080668 <_Z9sendEventv>
      if (Time.hour() == 0) dailyCleanup();                           // Once a day, clean house
 8080f68:	f001 feb4 	bl	8082cd4 <_ZN9TimeClass4hourEv>
 8080f6c:	b908      	cbnz	r0, 8080f72 <loop+0x12a>
 8080f6e:	f7ff fd01 	bl	8080974 <_Z12dailyCleanupv>
      state = RESP_WAIT_STATE;                                        // Wait for Response
 8080f72:	2306      	movs	r3, #6
 8080f74:	e11d      	b.n	80811b2 <loop+0x36a>
    }
    else state = ERROR_STATE;
 8080f76:	2301      	movs	r3, #1
 8080f78:	e11b      	b.n	80811b2 <loop+0x36a>
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080f7a:	4b4e      	ldr	r3, [pc, #312]	; (80810b4 <loop+0x26c>)
 8080f7c:	781a      	ldrb	r2, [r3, #0]
 8080f7e:	461d      	mov	r5, r3
 8080f80:	b12a      	cbz	r2, 8080f8e <loop+0x146>
 8080f82:	4b4d      	ldr	r3, [pc, #308]	; (80810b8 <loop+0x270>)
 8080f84:	781b      	ldrb	r3, [r3, #0]
 8080f86:	2b06      	cmp	r3, #6
 8080f88:	d001      	beq.n	8080f8e <loop+0x146>
 8080f8a:	f7ff fbed 	bl	8080768 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                         // Response received
 8080f8e:	4b52      	ldr	r3, [pc, #328]	; (80810d8 <loop+0x290>)
 8080f90:	781e      	ldrb	r6, [r3, #0]
 8080f92:	b96e      	cbnz	r6, 8080fb0 <loop+0x168>
      state = IDLE_STATE;
 8080f94:	2302      	movs	r3, #2
 8080f96:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
 8080f98:	f7ff fac8 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
      if (verboseMode) Particle.publish("State","Idle",PRIVATE);
 8080f9c:	782b      	ldrb	r3, [r5, #0]
 8080f9e:	2b00      	cmp	r3, #0
 8080fa0:	f000 8108 	beq.w	80811b4 <loop+0x36c>
 8080fa4:	4b4d      	ldr	r3, [pc, #308]	; (80810dc <loop+0x294>)
 8080fa6:	4a4e      	ldr	r2, [pc, #312]	; (80810e0 <loop+0x298>)
 8080fa8:	781b      	ldrb	r3, [r3, #0]
 8080faa:	f88d 6000 	strb.w	r6, [sp]
 8080fae:	e017      	b.n	8080fe0 <loop+0x198>
 8080fb0:	f000 fbb0 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp >= webhookWait) {            // If it takes too long - will need to reset
 8080fb4:	4b4b      	ldr	r3, [pc, #300]	; (80810e4 <loop+0x29c>)
 8080fb6:	681b      	ldr	r3, [r3, #0]
 8080fb8:	1ac0      	subs	r0, r0, r3
 8080fba:	4b4b      	ldr	r3, [pc, #300]	; (80810e8 <loop+0x2a0>)
 8080fbc:	681b      	ldr	r3, [r3, #0]
 8080fbe:	4298      	cmp	r0, r3
 8080fc0:	f0c0 80f8 	bcc.w	80811b4 <loop+0x36c>
 8080fc4:	f000 fba6 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080fc8:	4b48      	ldr	r3, [pc, #288]	; (80810ec <loop+0x2a4>)
 8080fca:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 8080fcc:	2301      	movs	r3, #1
 8080fce:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
 8080fd0:	f7ff faac 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8080fd4:	4b41      	ldr	r3, [pc, #260]	; (80810dc <loop+0x294>)
      Particle.publish("State","Response Timeout Error",PRIVATE);
 8080fd6:	2200      	movs	r2, #0
 8080fd8:	781b      	ldrb	r3, [r3, #0]
 8080fda:	f88d 2000 	strb.w	r2, [sp]
 8080fde:	4a44      	ldr	r2, [pc, #272]	; (80810f0 <loop+0x2a8>)
 8080fe0:	a804      	add	r0, sp, #16
 8080fe2:	4944      	ldr	r1, [pc, #272]	; (80810f4 <loop+0x2ac>)
 8080fe4:	f7ff f90d 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8080fe8:	a805      	add	r0, sp, #20
 8080fea:	f7ff fae3 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fee:	e0e1      	b.n	80811b4 <loop+0x36c>
    }
    break;

    case ERROR_STATE: {                                          // To be enhanced - where we deal with errors
      if (verboseMode && state != oldState) publishStateTransition();
 8080ff0:	4b30      	ldr	r3, [pc, #192]	; (80810b4 <loop+0x26c>)
 8080ff2:	781b      	ldrb	r3, [r3, #0]
 8080ff4:	b12b      	cbz	r3, 8081002 <loop+0x1ba>
 8080ff6:	4b30      	ldr	r3, [pc, #192]	; (80810b8 <loop+0x270>)
 8080ff8:	781b      	ldrb	r3, [r3, #0]
 8080ffa:	2b01      	cmp	r3, #1
 8080ffc:	d001      	beq.n	8081002 <loop+0x1ba>
 8080ffe:	f7ff fbb3 	bl	8080768 <_Z22publishStateTransitionv>
      unsigned long lastWebHookResponse;
      fram.get(FRAM::lastHookResponseAddr,lastWebHookResponse);
 8081002:	aa03      	add	r2, sp, #12
 8081004:	2109      	movs	r1, #9
 8081006:	483c      	ldr	r0, [pc, #240]	; (80810f8 <loop+0x2b0>)
 8081008:	f7ff fc56 	bl	80808b8 <_ZN6MB85RC3getImEERT_jS2_>
 808100c:	f000 fb82 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - resetTimeStamp >= resetWait)
 8081010:	4b36      	ldr	r3, [pc, #216]	; (80810ec <loop+0x2a4>)
 8081012:	681b      	ldr	r3, [r3, #0]
 8081014:	1ac0      	subs	r0, r0, r3
 8081016:	4b39      	ldr	r3, [pc, #228]	; (80810fc <loop+0x2b4>)
 8081018:	681b      	ldr	r3, [r3, #0]
 808101a:	4298      	cmp	r0, r3
 808101c:	f0c0 80ca 	bcc.w	80811b4 <loop+0x36c>
      {
        if (resetCount <= 3) {                                          // First try simple reset
 8081020:	4b37      	ldr	r3, [pc, #220]	; (8081100 <loop+0x2b8>)
 8081022:	681b      	ldr	r3, [r3, #0]
 8081024:	2b03      	cmp	r3, #3
 8081026:	dc18      	bgt.n	808105a <loop+0x212>
          waitUntil(meterParticlePublish);
 8081028:	f7ff fa80 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 808102c:	f000 fd46 	bl	8081abc <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8081030:	b160      	cbz	r0, 808104c <loop+0x204>
 8081032:	4b2a      	ldr	r3, [pc, #168]	; (80810dc <loop+0x294>)
 8081034:	2200      	movs	r2, #0
 8081036:	781b      	ldrb	r3, [r3, #0]
 8081038:	a804      	add	r0, sp, #16
 808103a:	f88d 2000 	strb.w	r2, [sp]
 808103e:	492d      	ldr	r1, [pc, #180]	; (80810f4 <loop+0x2ac>)
 8081040:	4a30      	ldr	r2, [pc, #192]	; (8081104 <loop+0x2bc>)
 8081042:	f7ff f8de 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8081046:	a805      	add	r0, sp, #20
 8081048:	f7ff fab4 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
 808104c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081050:	f000 fe00 	bl	8081c54 <delay>
          System.reset();
 8081054:	f001 fdae 	bl	8082bb4 <_ZN11SystemClass5resetEv>
 8081058:	e0ac      	b.n	80811b4 <loop+0x36c>
        }
        else if (Time.now() - lastWebHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
 808105a:	f001 fe33 	bl	8082cc4 <_ZN9TimeClass3nowEv>
 808105e:	9b03      	ldr	r3, [sp, #12]
 8081060:	1ac0      	subs	r0, r0, r3
 8081062:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8081066:	d951      	bls.n	808110c <loop+0x2c4>
          waitUntil(meterParticlePublish);
 8081068:	f7ff fa60 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 808106c:	f000 fd26 	bl	8081abc <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8081070:	b160      	cbz	r0, 808108c <loop+0x244>
 8081072:	4b1a      	ldr	r3, [pc, #104]	; (80810dc <loop+0x294>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081074:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081076:	781b      	ldrb	r3, [r3, #0]
 8081078:	a804      	add	r0, sp, #16
 808107a:	f88d 2000 	strb.w	r2, [sp]
 808107e:	491d      	ldr	r1, [pc, #116]	; (80810f4 <loop+0x2ac>)
 8081080:	4a21      	ldr	r2, [pc, #132]	; (8081108 <loop+0x2c0>)
 8081082:	f7ff f8be 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 8081086:	a805      	add	r0, sp, #20
 8081088:	f7ff fa94 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
 808108c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081090:	f000 fde0 	bl	8081c54 <delay>
          fram.put(FRAM::resetCountAddr,0);                           // Zero the ResetCount
 8081094:	2300      	movs	r3, #0
 8081096:	aa04      	add	r2, sp, #16
 8081098:	2102      	movs	r1, #2
 808109a:	4817      	ldr	r0, [pc, #92]	; (80810f8 <loop+0x2b0>)
 808109c:	9304      	str	r3, [sp, #16]
 808109e:	f7ff fc13 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
          digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 80810a2:	2101      	movs	r1, #1
 80810a4:	2004      	movs	r0, #4
 80810a6:	f002 f860 	bl	808316a <digitalWrite>
 80810aa:	e083      	b.n	80811b4 <loop+0x36c>
 80810ac:	20000184 	.word	0x20000184
 80810b0:	20000199 	.word	0x20000199
 80810b4:	200001ac 	.word	0x200001ac
 80810b8:	2000017d 	.word	0x2000017d
 80810bc:	20000198 	.word	0x20000198
 80810c0:	2000018c 	.word	0x2000018c
 80810c4:	2000007c 	.word	0x2000007c
 80810c8:	200001d0 	.word	0x200001d0
 80810cc:	2000017c 	.word	0x2000017c
 80810d0:	2000019c 	.word	0x2000019c
 80810d4:	20000171 	.word	0x20000171
 80810d8:	20000220 	.word	0x20000220
 80810dc:	20000170 	.word	0x20000170
 80810e0:	08085193 	.word	0x08085193
 80810e4:	2000016c 	.word	0x2000016c
 80810e8:	20000080 	.word	0x20000080
 80810ec:	20000218 	.word	0x20000218
 80810f0:	08085198 	.word	0x08085198
 80810f4:	08085098 	.word	0x08085098
 80810f8:	20000224 	.word	0x20000224
 80810fc:	20000000 	.word	0x20000000
 8081100:	20000190 	.word	0x20000190
 8081104:	080851af 	.word	0x080851af
 8081108:	080851c3 	.word	0x080851c3
        }
        else {                                                          // If we have had 3 resets - time to do something more
          waitUntil(meterParticlePublish);
 808110c:	f7ff fa0e 	bl	808052c <_ZN11SystemClass13waitConditionIZ12dailyCleanupvEUlvE_EEbT_.isra.81>
 8081110:	f000 fcd4 	bl	8081abc <spark_cloud_flag_connected>
          if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8081114:	b160      	cbz	r0, 8081130 <loop+0x2e8>
 8081116:	4b28      	ldr	r3, [pc, #160]	; (80811b8 <loop+0x370>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081118:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808111a:	781b      	ldrb	r3, [r3, #0]
 808111c:	a804      	add	r0, sp, #16
 808111e:	f88d 2000 	strb.w	r2, [sp]
 8081122:	4926      	ldr	r1, [pc, #152]	; (80811bc <loop+0x374>)
 8081124:	4a26      	ldr	r2, [pc, #152]	; (80811c0 <loop+0x378>)
 8081126:	f7ff f86c 	bl	8080202 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.90.constprop.100>
 808112a:	a805      	add	r0, sp, #20
 808112c:	f7ff fa42 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
 8081130:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081134:	f000 fd8e 	bl	8081c54 <delay>
          fram.put(FRAM::resetCountAddr,0);                           // Zero the ResetCount
 8081138:	2300      	movs	r3, #0
 808113a:	aa04      	add	r2, sp, #16
 808113c:	2102      	movs	r1, #2
 808113e:	4821      	ldr	r0, [pc, #132]	; (80811c4 <loop+0x37c>)
 8081140:	9304      	str	r3, [sp, #16]
 8081142:	f7ff fbc1 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
          fullModemReset();                                             // Full Modem reset and reboots
 8081146:	f7ff fa09 	bl	808055c <_Z14fullModemResetv>
        }
      }
    } break;
  }
}
 808114a:	e033      	b.n	80811b4 <loop+0x36c>
    if (watchdogFlag) petWatchdog();
    if (verboseMode && state != oldState) publishStateTransition();
    if (meterSampleRate()) takeMeasurements();                                    // Take measurements every couple seconds
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;              // We want to report on the hour
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;                 // The battery is low - sleep
    if (pumpingEnabled || digitalRead(pumpControlPin)) state = PUMPING_STATE;     // If we are pumping, we need to report
 808114c:	2303      	movs	r3, #3
 808114e:	e030      	b.n	80811b2 <loop+0x36a>
      digitalWrite(blueLED,HIGH);
      takeMeasurements();                                       // Take measurements since we have started pumping
      pumpBackupTimer.start();
      state = REPORTING_STATE;                                  // Report the pumping event
    }
    else if (!pumpingEnabled && digitalRead(pumpControlPin)) {
 8081150:	7835      	ldrb	r5, [r6, #0]
 8081152:	bb7d      	cbnz	r5, 80811b4 <loop+0x36c>
 8081154:	200e      	movs	r0, #14
 8081156:	f002 f821 	bl	808319c <digitalRead>
 808115a:	b358      	cbz	r0, 80811b4 <loop+0x36c>
      digitalWrite(pumpControlPin,LOW);
 808115c:	4629      	mov	r1, r5
 808115e:	200e      	movs	r0, #14
 8081160:	f002 f803 	bl	808316a <digitalWrite>
      digitalWrite(blueLED,LOW);
 8081164:	4629      	mov	r1, r5
 8081166:	2007      	movs	r0, #7
 8081168:	f001 ffff 	bl	808316a <digitalWrite>
      takeMeasurements();                                       // Take measurements since we have stoppeed pumping
 808116c:	f7ff fda8 	bl	8080cc0 <_Z16takeMeasurementsv>
      pumpBackupTimer.stop();
 8081170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8081174:	4814      	ldr	r0, [pc, #80]	; (80811c8 <loop+0x380>)
 8081176:	f7ff f862 	bl	808023e <_ZN5Timer4stopEj>
 808117a:	e019      	b.n	80811b0 <loop+0x368>
    break;

  case PUMPING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
    if (pumpingEnabled && !digitalRead(pumpControlPin)) {       // First time to this state we will turn on the pump and report
      digitalWrite(pumpControlPin,HIGH);
 808117c:	2101      	movs	r1, #1
 808117e:	200e      	movs	r0, #14
    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
 8081180:	4e11      	ldr	r6, [pc, #68]	; (80811c8 <loop+0x380>)
 8081182:	f001 fff2 	bl	808316a <digitalWrite>
      digitalWrite(blueLED,HIGH);
 8081186:	2101      	movs	r1, #1
 8081188:	2007      	movs	r0, #7
 808118a:	f001 ffee 	bl	808316a <digitalWrite>
      takeMeasurements();                                       // Take measurements since we have started pumping
 808118e:	f7ff fd97 	bl	8080cc0 <_Z16takeMeasurementsv>
 8081192:	4629      	mov	r1, r5
 8081194:	4630      	mov	r0, r6
 8081196:	f7ff f852 	bl	808023e <_ZN5Timer4stopEj>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 808119a:	68b0      	ldr	r0, [r6, #8]
 808119c:	b140      	cbz	r0, 80811b0 <loop+0x368>
 808119e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80811a2:	9300      	str	r3, [sp, #0]
 80811a4:	9501      	str	r5, [sp, #4]
 80811a6:	462b      	mov	r3, r5
 80811a8:	462a      	mov	r2, r5
 80811aa:	4629      	mov	r1, r5
 80811ac:	f000 fa7a 	bl	80816a4 <os_timer_change>
    else if (!pumpingEnabled && digitalRead(pumpControlPin)) {
      digitalWrite(pumpControlPin,LOW);
      digitalWrite(blueLED,LOW);
      takeMeasurements();                                       // Take measurements since we have stoppeed pumping
      pumpBackupTimer.stop();
      state = REPORTING_STATE;                                 // Report a change in the pumping status
 80811b0:	2305      	movs	r3, #5
 80811b2:	7023      	strb	r3, [r4, #0]
          fullModemReset();                                             // Full Modem reset and reboots
        }
      }
    } break;
  }
}
 80811b4:	b006      	add	sp, #24
 80811b6:	bd70      	pop	{r4, r5, r6, pc}
 80811b8:	20000170 	.word	0x20000170
 80811bc:	08085098 	.word	0x08085098
 80811c0:	080851dd 	.word	0x080851dd
 80811c4:	20000224 	.word	0x20000224
 80811c8:	200001b4 	.word	0x200001b4

080811cc <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)   // Resets the current hourly and daily counts
{
 80811cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80811ce:	490f      	ldr	r1, [pc, #60]	; (808120c <_Z11resetCounts6String+0x40>)
 80811d0:	f001 fcc1 	bl	8082b56 <_ZNK6String6equalsEPKc>
 80811d4:	2400      	movs	r4, #0
  if (command == "1")
 80811d6:	b1b0      	cbz	r0, 8081206 <_Z11resetCounts6String+0x3a>
  {
    fram.put(FRAM::resetCountAddr,0);  // If so, store incremented number - watchdog must have done This
 80811d8:	ad02      	add	r5, sp, #8
 80811da:	f845 4d04 	str.w	r4, [r5, #-4]!
 80811de:	462a      	mov	r2, r5
 80811e0:	2102      	movs	r1, #2
 80811e2:	480b      	ldr	r0, [pc, #44]	; (8081210 <_Z11resetCounts6String+0x44>)
 80811e4:	f7ff fb70 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
    resetCount = 0;
 80811e8:	4b0a      	ldr	r3, [pc, #40]	; (8081214 <_Z11resetCounts6String+0x48>)
    dataInFlight = false;
    dailyPumpingMins = 0;
    fram.put(FRAM::dailyPumpingMinsAddr,0);
 80811ea:	462a      	mov	r2, r5
int resetCounts(String command)   // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    fram.put(FRAM::resetCountAddr,0);  // If so, store incremented number - watchdog must have done This
    resetCount = 0;
 80811ec:	601c      	str	r4, [r3, #0]
    dataInFlight = false;
 80811ee:	4b0a      	ldr	r3, [pc, #40]	; (8081218 <_Z11resetCounts6String+0x4c>)
    dailyPumpingMins = 0;
    fram.put(FRAM::dailyPumpingMinsAddr,0);
 80811f0:	2103      	movs	r1, #3
{
  if (command == "1")
  {
    fram.put(FRAM::resetCountAddr,0);  // If so, store incremented number - watchdog must have done This
    resetCount = 0;
    dataInFlight = false;
 80811f2:	701c      	strb	r4, [r3, #0]
    dailyPumpingMins = 0;
 80811f4:	4b09      	ldr	r3, [pc, #36]	; (808121c <_Z11resetCounts6String+0x50>)
    fram.put(FRAM::dailyPumpingMinsAddr,0);
 80811f6:	4806      	ldr	r0, [pc, #24]	; (8081210 <_Z11resetCounts6String+0x44>)
  if (command == "1")
  {
    fram.put(FRAM::resetCountAddr,0);  // If so, store incremented number - watchdog must have done This
    resetCount = 0;
    dataInFlight = false;
    dailyPumpingMins = 0;
 80811f8:	601c      	str	r4, [r3, #0]
    fram.put(FRAM::dailyPumpingMinsAddr,0);
 80811fa:	9401      	str	r4, [sp, #4]
 80811fc:	f7ff fb64 	bl	80808c8 <_ZN6MB85RC3putIlEERKT_jS3_>
    alertValue = 0;
 8081200:	4b07      	ldr	r3, [pc, #28]	; (8081220 <_Z11resetCounts6String+0x54>)
 8081202:	2001      	movs	r0, #1
 8081204:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
}
 8081206:	b003      	add	sp, #12
 8081208:	bd30      	pop	{r4, r5, pc}
 808120a:	bf00      	nop
 808120c:	08085240 	.word	0x08085240
 8081210:	20000224 	.word	0x20000224
 8081214:	20000190 	.word	0x20000190
 8081218:	20000220 	.word	0x20000220
 808121c:	20000188 	.word	0x20000188
 8081220:	20000171 	.word	0x20000171

08081224 <_GLOBAL__sub_I_SystemMode>:
  oldState = state;
  if(Particle.connected() && state != IDLE_STATE) {
    waitUntil(meterParticlePublish);
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
 8081224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081228:	4b3b      	ldr	r3, [pc, #236]	; (8081318 <_GLOBAL__sub_I_SystemMode+0xf4>)
 808122a:	2400      	movs	r4, #0
 808122c:	601c      	str	r4, [r3, #0]
 808122e:	4b3b      	ldr	r3, [pc, #236]	; (808131c <_GLOBAL__sub_I_SystemMode+0xf8>)
 8081230:	b088      	sub	sp, #32
 8081232:	f04f 0801 	mov.w	r8, #1
 8081236:	f883 8000 	strb.w	r8, [r3]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808123a:	f000 fa8b 	bl	8081754 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081242:	4b37      	ldr	r3, [pc, #220]	; (8081320 <_GLOBAL__sub_I_SystemMode+0xfc>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);         // These devices are always connected
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8081244:	4d37      	ldr	r5, [pc, #220]	; (8081324 <_GLOBAL__sub_I_SystemMode+0x100>)
 8081246:	6018      	str	r0, [r3, #0]
 8081248:	4b37      	ldr	r3, [pc, #220]	; (8081328 <_GLOBAL__sub_I_SystemMode+0x104>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808124a:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808124c:	701c      	strb	r4, [r3, #0]
 808124e:	805c      	strh	r4, [r3, #2]
 8081250:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081252:	f000 fbbf 	bl	80819d4 <set_system_mode>
#include "MB85RC256V-FRAM-RK.h"
#include "electrondoc.h"                                 // Documents pinout

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);         // These devices are always connected
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 8081256:	4621      	mov	r1, r4
 8081258:	4640      	mov	r0, r8
 808125a:	f000 fbd3 	bl	8081a04 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 808125e:	4641      	mov	r1, r8
 8081260:	2004      	movs	r0, #4
 8081262:	f000 fa37 	bl	80816d4 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8081266:	4f31      	ldr	r7, [pc, #196]	; (808132c <_GLOBAL__sub_I_SystemMode+0x108>)
 8081268:	4621      	mov	r1, r4
 808126a:	4628      	mov	r0, r5
 808126c:	f001 f944 	bl	80824f8 <_ZN9FuelGaugeC1Eb>
 8081270:	4628      	mov	r0, r5
PMIC power;                     // Enables us to monitor the power supply to the board
 8081272:	4d2f      	ldr	r5, [pc, #188]	; (8081330 <_GLOBAL__sub_I_SystemMode+0x10c>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);         // These devices are always connected
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8081274:	463a      	mov	r2, r7
 8081276:	492f      	ldr	r1, [pc, #188]	; (8081334 <_GLOBAL__sub_I_SystemMode+0x110>)
 8081278:	f002 f840 	bl	80832fc <__aeabi_atexit>
PMIC power;                     // Enables us to monitor the power supply to the board
 808127c:	4621      	mov	r1, r4
 808127e:	4628      	mov	r0, r5
 8081280:	f001 fafd 	bl	808287e <_ZN4PMICC1Eb>
 8081284:	463a      	mov	r2, r7
 8081286:	492c      	ldr	r1, [pc, #176]	; (8081338 <_GLOBAL__sub_I_SystemMode+0x114>)
 8081288:	4628      	mov	r0, r5
 808128a:	f002 f837 	bl	80832fc <__aeabi_atexit>
MB85RC64 fram(Wire, 0);
 808128e:	f001 ffaf 	bl	80831f0 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 8081292:	4d2a      	ldr	r5, [pc, #168]	; (808133c <_GLOBAL__sub_I_SystemMode+0x118>)
 8081294:	4623      	mov	r3, r4
 8081296:	4601      	mov	r1, r0
 8081298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 808129c:	4628      	mov	r0, r5
 808129e:	f000 f887 	bl	80813b0 <_ZN6MB85RCC1ER7TwoWireji>
 80812a2:	4b27      	ldr	r3, [pc, #156]	; (8081340 <_GLOBAL__sub_I_SystemMode+0x11c>)
 80812a4:	463a      	mov	r2, r7
 80812a6:	4927      	ldr	r1, [pc, #156]	; (8081344 <_GLOBAL__sub_I_SystemMode+0x120>)
 80812a8:	4628      	mov	r0, r5
 80812aa:	602b      	str	r3, [r5, #0]
 80812ac:	f002 f826 	bl	80832fc <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80812b0:	4b25      	ldr	r3, [pc, #148]	; (8081348 <_GLOBAL__sub_I_SystemMode+0x124>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80812b2:	aa02      	add	r2, sp, #8
 80812b4:	9304      	str	r3, [sp, #16]
 80812b6:	ae04      	add	r6, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80812b8:	4d24      	ldr	r5, [pc, #144]	; (808134c <_GLOBAL__sub_I_SystemMode+0x128>)
 80812ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80812be:	4b24      	ldr	r3, [pc, #144]	; (8081350 <_GLOBAL__sub_I_SystemMode+0x12c>)
 80812c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80812c4:	602b      	str	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 80812c6:	f105 030c 	add.w	r3, r5, #12
 80812ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80812ce:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80812d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80812d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80812da:	4b1e      	ldr	r3, [pc, #120]	; (8081354 <_GLOBAL__sub_I_SystemMode+0x130>)
 80812dc:	712c      	strb	r4, [r5, #4]
 80812de:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80812e0:	69ab      	ldr	r3, [r5, #24]
 80812e2:	60ac      	str	r4, [r5, #8]
 80812e4:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80812e6:	4b1c      	ldr	r3, [pc, #112]	; (8081358 <_GLOBAL__sub_I_SystemMode+0x134>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80812e8:	4a1c      	ldr	r2, [pc, #112]	; (808135c <_GLOBAL__sub_I_SystemMode+0x138>)
 80812ea:	61ab      	str	r3, [r5, #24]
 80812ec:	491c      	ldr	r1, [pc, #112]	; (8081360 <_GLOBAL__sub_I_SystemMode+0x13c>)
 80812ee:	462b      	mov	r3, r5
 80812f0:	9401      	str	r4, [sp, #4]
 80812f2:	f8cd 8000 	str.w	r8, [sp]
 80812f6:	f105 0008 	add.w	r0, r5, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80812fa:	9406      	str	r4, [sp, #24]
 80812fc:	f000 f9ba 	bl	8081674 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081300:	4630      	mov	r0, r6
 8081302:	f7fe ff90 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
int pumpCurrentRaw = 0;
time_t pumpingStart = 0;
int dailyPumpingMins = 0;
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);       // This sets a limit on how long we can pump - set to 60 minutes
 8081306:	463a      	mov	r2, r7
 8081308:	4916      	ldr	r1, [pc, #88]	; (8081364 <_GLOBAL__sub_I_SystemMode+0x140>)
 808130a:	4628      	mov	r0, r5
 808130c:	f001 fff6 	bl	80832fc <__aeabi_atexit>
  oldState = state;
  if(Particle.connected() && state != IDLE_STATE) {
    waitUntil(meterParticlePublish);
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
  }
 8081310:	b008      	add	sp, #32
 8081312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081316:	bf00      	nop
 8081318:	2000019c 	.word	0x2000019c
 808131c:	20000170 	.word	0x20000170
 8081320:	200001a8 	.word	0x200001a8
 8081324:	20000174 	.word	0x20000174
 8081328:	200001a0 	.word	0x200001a0
 808132c:	20000164 	.word	0x20000164
 8081330:	20000168 	.word	0x20000168
 8081334:	08082517 	.word	0x08082517
 8081338:	0808289d 	.word	0x0808289d
 808133c:	20000224 	.word	0x20000224
 8081340:	08084f20 	.word	0x08084f20
 8081344:	08080135 	.word	0x08080135
 8081348:	080800bd 	.word	0x080800bd
 808134c:	200001b4 	.word	0x200001b4
 8081350:	08084f0c 	.word	0x08084f0c
 8081354:	080800d9 	.word	0x080800d9
 8081358:	080800d5 	.word	0x080800d5
 808135c:	0808015d 	.word	0x0808015d
 8081360:	0036ee80 	.word	0x0036ee80
 8081364:	08080261 	.word	0x08080261

08081368 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081368:	4770      	bx	lr

0808136a <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
 808136a:	b510      	push	{r4, lr}
 808136c:	4604      	mov	r4, r0
}
 808136e:	2110      	movs	r1, #16
 8081370:	f001 ffc9 	bl	8083306 <_ZdlPvj>
 8081374:	4620      	mov	r0, r4
 8081376:	bd10      	pop	{r4, pc}

08081378 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081378:	6803      	ldr	r3, [r0, #0]
 808137a:	b2c9      	uxtb	r1, r1
 808137c:	689b      	ldr	r3, [r3, #8]
 808137e:	4718      	bx	r3

08081380 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081380:	b40e      	push	{r1, r2, r3}
 8081382:	b500      	push	{lr}
 8081384:	b08c      	sub	sp, #48	; 0x30
 8081386:	aa0d      	add	r2, sp, #52	; 0x34
 8081388:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 808138c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808138e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081392:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081394:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081396:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081398:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808139a:	aa04      	add	r2, sp, #16
 808139c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808139e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80813a0:	f000 fb08 	bl	80819b4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80813a4:	b00c      	add	sp, #48	; 0x30
 80813a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80813aa:	b003      	add	sp, #12
 80813ac:	4770      	bx	lr
	...

080813b0 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 80813b0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 80813b2:	4d03      	ldr	r5, [pc, #12]	; (80813c0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 80813b4:	6041      	str	r1, [r0, #4]
 80813b6:	6005      	str	r5, [r0, #0]
 80813b8:	6082      	str	r2, [r0, #8]
 80813ba:	60c3      	str	r3, [r0, #12]
}
 80813bc:	bd30      	pop	{r4, r5, pc}
 80813be:	bf00      	nop
 80813c0:	080852cc 	.word	0x080852cc

080813c4 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
 80813c4:	6840      	ldr	r0, [r0, #4]
 80813c6:	f001 b939 	b.w	808263c <_ZN7TwoWire5beginEv>

080813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80813ca:	b510      	push	{r4, lr}
 80813cc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80813ce:	6800      	ldr	r0, [r0, #0]
 80813d0:	f001 f960 	bl	8082694 <_ZN7TwoWire6unlockEv>
 80813d4:	4620      	mov	r0, r4
 80813d6:	bd10      	pop	{r4, pc}

080813d8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 80813d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80813dc:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
 80813de:	6840      	ldr	r0, [r0, #4]

void MB85RC::begin() {
	wire.begin();
}

bool MB85RC::erase() {
 80813e0:	b08a      	sub	sp, #40	; 0x28
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80813e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80813e4:	f001 f94d 	bl	8082682 <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 80813e8:	221e      	movs	r2, #30
 80813ea:	2100      	movs	r1, #0
 80813ec:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
 80813ee:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 80813f0:	f003 f8b7 	bl	8084562 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
 80813f4:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 80813f6:	b1de      	cbz	r6, 8081430 <_ZN6MB85RC5eraseEv+0x58>
 80813f8:	46b0      	mov	r8, r6
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 80813fa:	683b      	ldr	r3, [r7, #0]
 80813fc:	2e1e      	cmp	r6, #30
 80813fe:	bf28      	it	cs
 8081400:	f04f 081e 	movcs.w	r8, #30
 8081404:	68dc      	ldr	r4, [r3, #12]
 8081406:	aa02      	add	r2, sp, #8
 8081408:	4643      	mov	r3, r8
 808140a:	4629      	mov	r1, r5
 808140c:	4638      	mov	r0, r7
 808140e:	47a0      	blx	r4
			if (!result) {
 8081410:	4604      	mov	r4, r0
 8081412:	b948      	cbnz	r0, 8081428 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 8081414:	462a      	mov	r2, r5
 8081416:	490a      	ldr	r1, [pc, #40]	; (8081440 <_ZN6MB85RC5eraseEv+0x68>)
 8081418:	480a      	ldr	r0, [pc, #40]	; (8081444 <_ZN6MB85RC5eraseEv+0x6c>)
 808141a:	f7ff ffb1 	bl	8081380 <_ZNK5spark6Logger4infoEPKcz>
 808141e:	a801      	add	r0, sp, #4
 8081420:	f7ff ffd3 	bl	80813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
 8081424:	4620      	mov	r0, r4
 8081426:	e007      	b.n	8081438 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
 8081428:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
 808142c:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 808142e:	e7e2      	b.n	80813f6 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
 8081430:	a801      	add	r0, sp, #4
 8081432:	f7ff ffca 	bl	80813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
 8081436:	2001      	movs	r0, #1
}
 8081438:	b00a      	add	sp, #40	; 0x28
 808143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808143e:	bf00      	nop
 8081440:	08085247 	.word	0x08085247
 8081444:	20000264 	.word	0x20000264

08081448 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 808144c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 808144e:	6840      	ldr	r0, [r0, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081450:	460e      	mov	r6, r1
 8081452:	4617      	mov	r7, r2
 8081454:	4698      	mov	r8, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081456:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081458:	f001 f913 	bl	8082682 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
 808145c:	f1b8 0f00 	cmp.w	r8, #0
 8081460:	d101      	bne.n	8081466 <_ZN6MB85RC8readDataEjPhj+0x1e>
 8081462:	2401      	movs	r4, #1
 8081464:	e03e      	b.n	80814e4 <_ZN6MB85RC8readDataEjPhj+0x9c>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081466:	68e1      	ldr	r1, [r4, #12]
 8081468:	6860      	ldr	r0, [r4, #4]
 808146a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 808146e:	f001 f8fd 	bl	808266c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081472:	0a31      	lsrs	r1, r6, #8
 8081474:	6860      	ldr	r0, [r4, #4]
 8081476:	f7ff ff7f 	bl	8081378 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 808147a:	4631      	mov	r1, r6
 808147c:	6860      	ldr	r0, [r4, #4]
 808147e:	f7ff ff7b 	bl	8081378 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 8081482:	2100      	movs	r1, #0
 8081484:	6860      	ldr	r0, [r4, #4]
 8081486:	f001 f8f4 	bl	8082672 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 808148a:	b108      	cbz	r0, 8081490 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 808148c:	2400      	movs	r4, #0
 808148e:	e029      	b.n	80814e4 <_ZN6MB85RC8readDataEjPhj+0x9c>
 8081490:	46c1      	mov	r9, r8
 8081492:	f1b8 0f20 	cmp.w	r8, #32
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom(addr | DEVICE_ADDR, bytesToRead, true);
 8081496:	68e1      	ldr	r1, [r4, #12]
 8081498:	bf28      	it	cs
 808149a:	f04f 0920 	movcs.w	r9, #32
 808149e:	2301      	movs	r3, #1
 80814a0:	464a      	mov	r2, r9
 80814a2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80814a6:	6860      	ldr	r0, [r4, #4]
 80814a8:	f001 f8d7 	bl	808265a <_ZN7TwoWire11requestFromEiii>

			if (Wire.available() < (int) bytesToRead) {
 80814ac:	f001 fea0 	bl	80831f0 <_Z19__fetch_global_Wirev>
 80814b0:	6803      	ldr	r3, [r0, #0]
 80814b2:	691b      	ldr	r3, [r3, #16]
 80814b4:	4798      	blx	r3
 80814b6:	4581      	cmp	r9, r0
 80814b8:	dce8      	bgt.n	808148c <_ZN6MB85RC8readDataEjPhj+0x44>
 80814ba:	463d      	mov	r5, r7
 80814bc:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
 80814c0:	f001 fe96 	bl	80831f0 <_Z19__fetch_global_Wirev>
 80814c4:	6803      	ldr	r3, [r0, #0]
 80814c6:	695b      	ldr	r3, [r3, #20]
 80814c8:	4798      	blx	r3
 80814ca:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
 80814ce:	1bea      	subs	r2, r5, r7
 80814d0:	ebc5 0308 	rsb	r3, r5, r8
 80814d4:	4591      	cmp	r9, r2
 80814d6:	eb05 060a 	add.w	r6, r5, sl
 80814da:	443b      	add	r3, r7
 80814dc:	d8f0      	bhi.n	80814c0 <_ZN6MB85RC8readDataEjPhj+0x78>
 80814de:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
 80814e0:	462f      	mov	r7, r5
 80814e2:	e7bb      	b.n	808145c <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 80814e4:	a801      	add	r0, sp, #4
 80814e6:	f7ff ff70 	bl	80813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 80814ea:	4620      	mov	r0, r4
 80814ec:	b002      	add	sp, #8
 80814ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080814f2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 80814f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80814f6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 80814f8:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 80814fa:	460d      	mov	r5, r1
 80814fc:	4690      	mov	r8, r2
 80814fe:	461f      	mov	r7, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081500:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081502:	f001 f8be 	bl	8082682 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
 8081506:	b34f      	cbz	r7, 808155c <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081508:	68e1      	ldr	r1, [r4, #12]
 808150a:	6860      	ldr	r0, [r4, #4]
 808150c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081510:	f001 f8ac 	bl	808266c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081514:	0a29      	lsrs	r1, r5, #8
 8081516:	6860      	ldr	r0, [r4, #4]
 8081518:	f7ff ff2e 	bl	8081378 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 808151c:	4629      	mov	r1, r5
 808151e:	6860      	ldr	r0, [r4, #4]
 8081520:	f7ff ff2a 	bl	8081378 <_ZN7TwoWire5writeEj>
 8081524:	4646      	mov	r6, r8
 8081526:	f108 091e 	add.w	r9, r8, #30
 808152a:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 808152e:	6860      	ldr	r0, [r4, #4]
 8081530:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081534:	6803      	ldr	r3, [r0, #0]
 8081536:	eb06 050a 	add.w	r5, r6, sl
 808153a:	689b      	ldr	r3, [r3, #8]
 808153c:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 808153e:	45b1      	cmp	r9, r6
				wire.write(*data);
				framAddr++;
				data++;
 8081540:	46b0      	mov	r8, r6
				dataLen--;
 8081542:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081546:	d001      	beq.n	808154c <_ZN6MB85RC9writeDataEjPKhj+0x5a>
 8081548:	2f00      	cmp	r7, #0
 808154a:	d1f0      	bne.n	808152e <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
 808154c:	2101      	movs	r1, #1
 808154e:	6860      	ldr	r0, [r4, #4]
 8081550:	f001 f88f 	bl	8082672 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081554:	2800      	cmp	r0, #0
 8081556:	d0d6      	beq.n	8081506 <_ZN6MB85RC9writeDataEjPKhj+0x14>
 8081558:	2400      	movs	r4, #0
 808155a:	e000      	b.n	808155e <_ZN6MB85RC9writeDataEjPKhj+0x6c>
 808155c:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 808155e:	a801      	add	r0, sp, #4
 8081560:	f7ff ff33 	bl	80813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081564:	4620      	mov	r0, r4
 8081566:	b002      	add	sp, #8
 8081568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808156c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 808156c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081570:	460e      	mov	r6, r1
 8081572:	4615      	mov	r5, r2
 8081574:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081576:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081578:	b08b      	sub	sp, #44	; 0x2c
 808157a:	461c      	mov	r4, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808157c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808157e:	f001 f880 	bl	8082682 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
 8081582:	42ae      	cmp	r6, r5
 8081584:	d223      	bcs.n	80815ce <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 8081586:	4426      	add	r6, r4
			framAddrTo += numBytes;
 8081588:	4425      	add	r5, r4
			while(numBytes > 0) {
 808158a:	b90c      	cbnz	r4, 8081590 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 808158c:	2401      	movs	r4, #1
 808158e:	e03f      	b.n	8081610 <_ZN6MB85RC8moveDataEjjj+0xa4>
 8081590:	4627      	mov	r7, r4
 8081592:	2c1e      	cmp	r4, #30
 8081594:	bf28      	it	cs
 8081596:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081598:	f8d8 3000 	ldr.w	r3, [r8]
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
 808159c:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 808159e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80815a2:	aa02      	add	r2, sp, #8
 80815a4:	463b      	mov	r3, r7
 80815a6:	4631      	mov	r1, r6
 80815a8:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
 80815aa:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
 80815ac:	47c8      	blx	r9
				if (!result) {
 80815ae:	b908      	cbnz	r0, 80815b4 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 80815b0:	2400      	movs	r4, #0
 80815b2:	e02d      	b.n	8081610 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
 80815b4:	f8d8 3000 	ldr.w	r3, [r8]
 80815b8:	aa02      	add	r2, sp, #8
 80815ba:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80815be:	4629      	mov	r1, r5
 80815c0:	463b      	mov	r3, r7
 80815c2:	4640      	mov	r0, r8
 80815c4:	47c8      	blx	r9
				if (!result) {
 80815c6:	2800      	cmp	r0, #0
 80815c8:	d0f2      	beq.n	80815b0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
 80815ca:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
 80815cc:	e7dd      	b.n	808158a <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
 80815ce:	d9dd      	bls.n	808158c <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 80815d0:	2c00      	cmp	r4, #0
 80815d2:	d0db      	beq.n	808158c <_ZN6MB85RC8moveDataEjjj+0x20>
 80815d4:	4627      	mov	r7, r4
 80815d6:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
 80815d8:	f8d8 3000 	ldr.w	r3, [r8]
 80815dc:	bf28      	it	cs
 80815de:	271e      	movcs	r7, #30
 80815e0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80815e4:	aa02      	add	r2, sp, #8
 80815e6:	463b      	mov	r3, r7
 80815e8:	4631      	mov	r1, r6
 80815ea:	4640      	mov	r0, r8
 80815ec:	47c8      	blx	r9
				if (!result) {
 80815ee:	2800      	cmp	r0, #0
 80815f0:	d0de      	beq.n	80815b0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
 80815f2:	f8d8 3000 	ldr.w	r3, [r8]
 80815f6:	aa02      	add	r2, sp, #8
 80815f8:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80815fc:	4629      	mov	r1, r5
 80815fe:	463b      	mov	r3, r7
 8081600:	4640      	mov	r0, r8
 8081602:	47c8      	blx	r9
				if (!result) {
 8081604:	2800      	cmp	r0, #0
 8081606:	d0d3      	beq.n	80815b0 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
 8081608:	443e      	add	r6, r7
				framAddrTo += count;
 808160a:	443d      	add	r5, r7
				numBytes -= count;
 808160c:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 808160e:	e7df      	b.n	80815d0 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081610:	a801      	add	r0, sp, #4
 8081612:	f7ff feda 	bl	80813ca <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 8081616:	4620      	mov	r0, r4
 8081618:	b00b      	add	sp, #44	; 0x2c
 808161a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808161e <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
 808161e:	f000 b899 	b.w	8081754 <HAL_Pin_Map>
	...

08081624 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <inet_gethostbyname+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	08060020 	.word	0x08060020

08081634 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <cellular_signal+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	08060020 	.word	0x08060020

08081644 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <cellular_command+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	08060020 	.word	0x08060020

08081654 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <os_thread_yield+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	68db      	ldr	r3, [r3, #12]
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	080401d0 	.word	0x080401d0

08081664 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b02      	ldr	r3, [pc, #8]	; (8081670 <os_thread_scheduling+0xc>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	69db      	ldr	r3, [r3, #28]
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	bd08      	pop	{r3, pc}
 8081670:	080401d0 	.word	0x080401d0

08081674 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8081674:	b508      	push	{r3, lr}
 8081676:	4b02      	ldr	r3, [pc, #8]	; (8081680 <os_timer_create+0xc>)
 8081678:	681b      	ldr	r3, [r3, #0]
 808167a:	6a1b      	ldr	r3, [r3, #32]
 808167c:	9301      	str	r3, [sp, #4]
 808167e:	bd08      	pop	{r3, pc}
 8081680:	080401d0 	.word	0x080401d0

08081684 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8081684:	b508      	push	{r3, lr}
 8081686:	4b02      	ldr	r3, [pc, #8]	; (8081690 <os_timer_destroy+0xc>)
 8081688:	681b      	ldr	r3, [r3, #0]
 808168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808168c:	9301      	str	r3, [sp, #4]
 808168e:	bd08      	pop	{r3, pc}
 8081690:	080401d0 	.word	0x080401d0

08081694 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8081694:	b508      	push	{r3, lr}
 8081696:	4b02      	ldr	r3, [pc, #8]	; (80816a0 <os_timer_get_id+0xc>)
 8081698:	681b      	ldr	r3, [r3, #0]
 808169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808169c:	9301      	str	r3, [sp, #4]
 808169e:	bd08      	pop	{r3, pc}
 80816a0:	080401d0 	.word	0x080401d0

080816a4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80816a4:	b508      	push	{r3, lr}
 80816a6:	4b02      	ldr	r3, [pc, #8]	; (80816b0 <os_timer_change+0xc>)
 80816a8:	681b      	ldr	r3, [r3, #0]
 80816aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816ac:	9301      	str	r3, [sp, #4]
 80816ae:	bd08      	pop	{r3, pc}
 80816b0:	080401d0 	.word	0x080401d0

080816b4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80816b4:	b508      	push	{r3, lr}
 80816b6:	4b02      	ldr	r3, [pc, #8]	; (80816c0 <os_mutex_create+0xc>)
 80816b8:	681b      	ldr	r3, [r3, #0]
 80816ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816bc:	9301      	str	r3, [sp, #4]
 80816be:	bd08      	pop	{r3, pc}
 80816c0:	080401d0 	.word	0x080401d0

080816c4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80816c4:	b508      	push	{r3, lr}
 80816c6:	4b02      	ldr	r3, [pc, #8]	; (80816d0 <os_timer_set_id+0xc>)
 80816c8:	681b      	ldr	r3, [r3, #0]
 80816ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80816cc:	9301      	str	r3, [sp, #4]
 80816ce:	bd08      	pop	{r3, pc}
 80816d0:	080401d0 	.word	0x080401d0

080816d4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80816d4:	b508      	push	{r3, lr}
 80816d6:	4b02      	ldr	r3, [pc, #8]	; (80816e0 <HAL_Feature_Set+0xc>)
 80816d8:	681b      	ldr	r3, [r3, #0]
 80816da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80816dc:	9301      	str	r3, [sp, #4]
 80816de:	bd08      	pop	{r3, pc}
 80816e0:	080401b8 	.word	0x080401b8

080816e4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80816e4:	b508      	push	{r3, lr}
 80816e6:	4b02      	ldr	r3, [pc, #8]	; (80816f0 <HAL_Core_System_Reset_Ex+0xc>)
 80816e8:	681b      	ldr	r3, [r3, #0]
 80816ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80816ec:	9301      	str	r3, [sp, #4]
 80816ee:	bd08      	pop	{r3, pc}
 80816f0:	080401b8 	.word	0x080401b8

080816f4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	080401b8 	.word	0x080401b8

08081704 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <HAL_RNG_GetRandomNumber+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	685b      	ldr	r3, [r3, #4]
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	0804019c 	.word	0x0804019c

08081714 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	695b      	ldr	r3, [r3, #20]
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	0804019c 	.word	0x0804019c

08081724 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <HAL_RTC_Get_UnixTime+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	69db      	ldr	r3, [r3, #28]
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	0804019c 	.word	0x0804019c

08081734 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <HAL_RTC_Time_Is_Valid+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	0804019c 	.word	0x0804019c

08081744 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <hal_timer_millis+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	0804019c 	.word	0x0804019c

08081754 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <HAL_Pin_Map+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	681b      	ldr	r3, [r3, #0]
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	080401b0 	.word	0x080401b0

08081764 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <HAL_Validate_Pin_Function+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	685b      	ldr	r3, [r3, #4]
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	080401b0 	.word	0x080401b0

08081774 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <HAL_Pin_Mode+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	689b      	ldr	r3, [r3, #8]
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	080401b0 	.word	0x080401b0

08081784 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <HAL_Get_Pin_Mode+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	68db      	ldr	r3, [r3, #12]
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	080401b0 	.word	0x080401b0

08081794 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <HAL_GPIO_Write+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	691b      	ldr	r3, [r3, #16]
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	080401b0 	.word	0x080401b0

080817a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <HAL_GPIO_Read+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	695b      	ldr	r3, [r3, #20]
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	080401b0 	.word	0x080401b0

080817b4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b02      	ldr	r3, [pc, #8]	; (80817c0 <HAL_Interrupts_Attach+0xc>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	699b      	ldr	r3, [r3, #24]
 80817bc:	9301      	str	r3, [sp, #4]
 80817be:	bd08      	pop	{r3, pc}
 80817c0:	080401b0 	.word	0x080401b0

080817c4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80817c4:	b508      	push	{r3, lr}
 80817c6:	4b02      	ldr	r3, [pc, #8]	; (80817d0 <HAL_Interrupts_Detach+0xc>)
 80817c8:	681b      	ldr	r3, [r3, #0]
 80817ca:	69db      	ldr	r3, [r3, #28]
 80817cc:	9301      	str	r3, [sp, #4]
 80817ce:	bd08      	pop	{r3, pc}
 80817d0:	080401b0 	.word	0x080401b0

080817d4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80817d4:	b508      	push	{r3, lr}
 80817d6:	4b02      	ldr	r3, [pc, #8]	; (80817e0 <HAL_ADC_Read+0xc>)
 80817d8:	681b      	ldr	r3, [r3, #0]
 80817da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817dc:	9301      	str	r3, [sp, #4]
 80817de:	bd08      	pop	{r3, pc}
 80817e0:	080401b0 	.word	0x080401b0

080817e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <HAL_I2C_Begin+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	68db      	ldr	r3, [r3, #12]
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	080401ac 	.word	0x080401ac

080817f4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <HAL_I2C_Request_Data+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	695b      	ldr	r3, [r3, #20]
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	080401ac 	.word	0x080401ac

08081804 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b02      	ldr	r3, [pc, #8]	; (8081810 <HAL_I2C_Begin_Transmission+0xc>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	699b      	ldr	r3, [r3, #24]
 808180c:	9301      	str	r3, [sp, #4]
 808180e:	bd08      	pop	{r3, pc}
 8081810:	080401ac 	.word	0x080401ac

08081814 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081814:	b508      	push	{r3, lr}
 8081816:	4b02      	ldr	r3, [pc, #8]	; (8081820 <HAL_I2C_End_Transmission+0xc>)
 8081818:	681b      	ldr	r3, [r3, #0]
 808181a:	69db      	ldr	r3, [r3, #28]
 808181c:	9301      	str	r3, [sp, #4]
 808181e:	bd08      	pop	{r3, pc}
 8081820:	080401ac 	.word	0x080401ac

08081824 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081824:	b508      	push	{r3, lr}
 8081826:	4b02      	ldr	r3, [pc, #8]	; (8081830 <HAL_I2C_Write_Data+0xc>)
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	6a1b      	ldr	r3, [r3, #32]
 808182c:	9301      	str	r3, [sp, #4]
 808182e:	bd08      	pop	{r3, pc}
 8081830:	080401ac 	.word	0x080401ac

08081834 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081834:	b508      	push	{r3, lr}
 8081836:	4b02      	ldr	r3, [pc, #8]	; (8081840 <HAL_I2C_Available_Data+0xc>)
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808183c:	9301      	str	r3, [sp, #4]
 808183e:	bd08      	pop	{r3, pc}
 8081840:	080401ac 	.word	0x080401ac

08081844 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081844:	b508      	push	{r3, lr}
 8081846:	4b02      	ldr	r3, [pc, #8]	; (8081850 <HAL_I2C_Read_Data+0xc>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808184c:	9301      	str	r3, [sp, #4]
 808184e:	bd08      	pop	{r3, pc}
 8081850:	080401ac 	.word	0x080401ac

08081854 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081854:	b508      	push	{r3, lr}
 8081856:	4b02      	ldr	r3, [pc, #8]	; (8081860 <HAL_I2C_Peek_Data+0xc>)
 8081858:	681b      	ldr	r3, [r3, #0]
 808185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808185c:	9301      	str	r3, [sp, #4]
 808185e:	bd08      	pop	{r3, pc}
 8081860:	080401ac 	.word	0x080401ac

08081864 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081864:	b508      	push	{r3, lr}
 8081866:	4b02      	ldr	r3, [pc, #8]	; (8081870 <HAL_I2C_Flush_Data+0xc>)
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808186c:	9301      	str	r3, [sp, #4]
 808186e:	bd08      	pop	{r3, pc}
 8081870:	080401ac 	.word	0x080401ac

08081874 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081874:	b508      	push	{r3, lr}
 8081876:	4b02      	ldr	r3, [pc, #8]	; (8081880 <HAL_I2C_Is_Enabled+0xc>)
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808187c:	9301      	str	r3, [sp, #4]
 808187e:	bd08      	pop	{r3, pc}
 8081880:	080401ac 	.word	0x080401ac

08081884 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081884:	b508      	push	{r3, lr}
 8081886:	4b02      	ldr	r3, [pc, #8]	; (8081890 <HAL_I2C_Init+0xc>)
 8081888:	681b      	ldr	r3, [r3, #0]
 808188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808188c:	9301      	str	r3, [sp, #4]
 808188e:	bd08      	pop	{r3, pc}
 8081890:	080401ac 	.word	0x080401ac

08081894 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081894:	b508      	push	{r3, lr}
 8081896:	4b02      	ldr	r3, [pc, #8]	; (80818a0 <HAL_I2C_Acquire+0xc>)
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808189c:	9301      	str	r3, [sp, #4]
 808189e:	bd08      	pop	{r3, pc}
 80818a0:	080401ac 	.word	0x080401ac

080818a4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 80818a4:	b508      	push	{r3, lr}
 80818a6:	4b02      	ldr	r3, [pc, #8]	; (80818b0 <HAL_I2C_Release+0xc>)
 80818a8:	681b      	ldr	r3, [r3, #0]
 80818aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80818ac:	9301      	str	r3, [sp, #4]
 80818ae:	bd08      	pop	{r3, pc}
 80818b0:	080401ac 	.word	0x080401ac

080818b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80818b4:	b508      	push	{r3, lr}
 80818b6:	4b02      	ldr	r3, [pc, #8]	; (80818c0 <HAL_SPI_Init+0xc>)
 80818b8:	681b      	ldr	r3, [r3, #0]
 80818ba:	69db      	ldr	r3, [r3, #28]
 80818bc:	9301      	str	r3, [sp, #4]
 80818be:	bd08      	pop	{r3, pc}
 80818c0:	080401b4 	.word	0x080401b4

080818c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80818c4:	b508      	push	{r3, lr}
 80818c6:	4b02      	ldr	r3, [pc, #8]	; (80818d0 <HAL_SPI_Is_Enabled+0xc>)
 80818c8:	681b      	ldr	r3, [r3, #0]
 80818ca:	6a1b      	ldr	r3, [r3, #32]
 80818cc:	9301      	str	r3, [sp, #4]
 80818ce:	bd08      	pop	{r3, pc}
 80818d0:	080401b4 	.word	0x080401b4

080818d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80818d4:	b508      	push	{r3, lr}
 80818d6:	4b02      	ldr	r3, [pc, #8]	; (80818e0 <HAL_USART_Init+0xc>)
 80818d8:	681b      	ldr	r3, [r3, #0]
 80818da:	699b      	ldr	r3, [r3, #24]
 80818dc:	9301      	str	r3, [sp, #4]
 80818de:	bd08      	pop	{r3, pc}
 80818e0:	080401c4 	.word	0x080401c4

080818e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80818e4:	b508      	push	{r3, lr}
 80818e6:	4b02      	ldr	r3, [pc, #8]	; (80818f0 <HAL_USART_Write_Data+0xc>)
 80818e8:	681b      	ldr	r3, [r3, #0]
 80818ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818ec:	9301      	str	r3, [sp, #4]
 80818ee:	bd08      	pop	{r3, pc}
 80818f0:	080401c4 	.word	0x080401c4

080818f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80818f4:	b508      	push	{r3, lr}
 80818f6:	4b02      	ldr	r3, [pc, #8]	; (8081900 <HAL_USART_Available_Data+0xc>)
 80818f8:	681b      	ldr	r3, [r3, #0]
 80818fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80818fc:	9301      	str	r3, [sp, #4]
 80818fe:	bd08      	pop	{r3, pc}
 8081900:	080401c4 	.word	0x080401c4

08081904 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081904:	b508      	push	{r3, lr}
 8081906:	4b02      	ldr	r3, [pc, #8]	; (8081910 <HAL_USART_Read_Data+0xc>)
 8081908:	681b      	ldr	r3, [r3, #0]
 808190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808190c:	9301      	str	r3, [sp, #4]
 808190e:	bd08      	pop	{r3, pc}
 8081910:	080401c4 	.word	0x080401c4

08081914 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081914:	b508      	push	{r3, lr}
 8081916:	4b02      	ldr	r3, [pc, #8]	; (8081920 <HAL_USART_Peek_Data+0xc>)
 8081918:	681b      	ldr	r3, [r3, #0]
 808191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808191c:	9301      	str	r3, [sp, #4]
 808191e:	bd08      	pop	{r3, pc}
 8081920:	080401c4 	.word	0x080401c4

08081924 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081924:	b508      	push	{r3, lr}
 8081926:	4b02      	ldr	r3, [pc, #8]	; (8081930 <HAL_USART_Flush_Data+0xc>)
 8081928:	681b      	ldr	r3, [r3, #0]
 808192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808192c:	9301      	str	r3, [sp, #4]
 808192e:	bd08      	pop	{r3, pc}
 8081930:	080401c4 	.word	0x080401c4

08081934 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081934:	b508      	push	{r3, lr}
 8081936:	4b02      	ldr	r3, [pc, #8]	; (8081940 <HAL_USART_Is_Enabled+0xc>)
 8081938:	681b      	ldr	r3, [r3, #0]
 808193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808193c:	9301      	str	r3, [sp, #4]
 808193e:	bd08      	pop	{r3, pc}
 8081940:	080401c4 	.word	0x080401c4

08081944 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081944:	b508      	push	{r3, lr}
 8081946:	4b02      	ldr	r3, [pc, #8]	; (8081950 <HAL_USART_Available_Data_For_Write+0xc>)
 8081948:	681b      	ldr	r3, [r3, #0]
 808194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808194c:	9301      	str	r3, [sp, #4]
 808194e:	bd08      	pop	{r3, pc}
 8081950:	080401c4 	.word	0x080401c4

08081954 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081954:	b508      	push	{r3, lr}
 8081956:	4b02      	ldr	r3, [pc, #8]	; (8081960 <HAL_USB_USART_Init+0xc>)
 8081958:	681b      	ldr	r3, [r3, #0]
 808195a:	681b      	ldr	r3, [r3, #0]
 808195c:	9301      	str	r3, [sp, #4]
 808195e:	bd08      	pop	{r3, pc}
 8081960:	0806001c 	.word	0x0806001c

08081964 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081964:	b508      	push	{r3, lr}
 8081966:	4b02      	ldr	r3, [pc, #8]	; (8081970 <HAL_USB_USART_Available_Data+0xc>)
 8081968:	681b      	ldr	r3, [r3, #0]
 808196a:	691b      	ldr	r3, [r3, #16]
 808196c:	9301      	str	r3, [sp, #4]
 808196e:	bd08      	pop	{r3, pc}
 8081970:	0806001c 	.word	0x0806001c

08081974 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081974:	b508      	push	{r3, lr}
 8081976:	4b02      	ldr	r3, [pc, #8]	; (8081980 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081978:	681b      	ldr	r3, [r3, #0]
 808197a:	695b      	ldr	r3, [r3, #20]
 808197c:	9301      	str	r3, [sp, #4]
 808197e:	bd08      	pop	{r3, pc}
 8081980:	0806001c 	.word	0x0806001c

08081984 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081984:	b508      	push	{r3, lr}
 8081986:	4b02      	ldr	r3, [pc, #8]	; (8081990 <HAL_USB_USART_Receive_Data+0xc>)
 8081988:	681b      	ldr	r3, [r3, #0]
 808198a:	699b      	ldr	r3, [r3, #24]
 808198c:	9301      	str	r3, [sp, #4]
 808198e:	bd08      	pop	{r3, pc}
 8081990:	0806001c 	.word	0x0806001c

08081994 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081994:	b508      	push	{r3, lr}
 8081996:	4b02      	ldr	r3, [pc, #8]	; (80819a0 <HAL_USB_USART_Send_Data+0xc>)
 8081998:	681b      	ldr	r3, [r3, #0]
 808199a:	69db      	ldr	r3, [r3, #28]
 808199c:	9301      	str	r3, [sp, #4]
 808199e:	bd08      	pop	{r3, pc}
 80819a0:	0806001c 	.word	0x0806001c

080819a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80819a4:	b508      	push	{r3, lr}
 80819a6:	4b02      	ldr	r3, [pc, #8]	; (80819b0 <HAL_USB_USART_Flush_Data+0xc>)
 80819a8:	681b      	ldr	r3, [r3, #0]
 80819aa:	6a1b      	ldr	r3, [r3, #32]
 80819ac:	9301      	str	r3, [sp, #4]
 80819ae:	bd08      	pop	{r3, pc}
 80819b0:	0806001c 	.word	0x0806001c

080819b4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80819b4:	b508      	push	{r3, lr}
 80819b6:	4b02      	ldr	r3, [pc, #8]	; (80819c0 <log_message_v+0xc>)
 80819b8:	681b      	ldr	r3, [r3, #0]
 80819ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80819bc:	9301      	str	r3, [sp, #4]
 80819be:	bd08      	pop	{r3, pc}
 80819c0:	080201a0 	.word	0x080201a0

080819c4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80819c4:	b508      	push	{r3, lr}
 80819c6:	4b02      	ldr	r3, [pc, #8]	; (80819d0 <system_mode+0xc>)
 80819c8:	681b      	ldr	r3, [r3, #0]
 80819ca:	681b      	ldr	r3, [r3, #0]
 80819cc:	9301      	str	r3, [sp, #4]
 80819ce:	bd08      	pop	{r3, pc}
 80819d0:	080401a4 	.word	0x080401a4

080819d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80819d4:	b508      	push	{r3, lr}
 80819d6:	4b02      	ldr	r3, [pc, #8]	; (80819e0 <set_system_mode+0xc>)
 80819d8:	681b      	ldr	r3, [r3, #0]
 80819da:	685b      	ldr	r3, [r3, #4]
 80819dc:	9301      	str	r3, [sp, #4]
 80819de:	bd08      	pop	{r3, pc}
 80819e0:	080401a4 	.word	0x080401a4

080819e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80819e4:	b508      	push	{r3, lr}
 80819e6:	4b02      	ldr	r3, [pc, #8]	; (80819f0 <system_delay_ms+0xc>)
 80819e8:	681b      	ldr	r3, [r3, #0]
 80819ea:	695b      	ldr	r3, [r3, #20]
 80819ec:	9301      	str	r3, [sp, #4]
 80819ee:	bd08      	pop	{r3, pc}
 80819f0:	080401a4 	.word	0x080401a4

080819f4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80819f4:	b508      	push	{r3, lr}
 80819f6:	4b02      	ldr	r3, [pc, #8]	; (8081a00 <system_sleep+0xc>)
 80819f8:	681b      	ldr	r3, [r3, #0]
 80819fa:	699b      	ldr	r3, [r3, #24]
 80819fc:	9301      	str	r3, [sp, #4]
 80819fe:	bd08      	pop	{r3, pc}
 8081a00:	080401a4 	.word	0x080401a4

08081a04 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081a04:	b508      	push	{r3, lr}
 8081a06:	4b02      	ldr	r3, [pc, #8]	; (8081a10 <system_thread_set_state+0xc>)
 8081a08:	681b      	ldr	r3, [r3, #0]
 8081a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081a0c:	9301      	str	r3, [sp, #4]
 8081a0e:	bd08      	pop	{r3, pc}
 8081a10:	080401a4 	.word	0x080401a4

08081a14 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081a14:	b508      	push	{r3, lr}
 8081a16:	4b02      	ldr	r3, [pc, #8]	; (8081a20 <application_thread_current+0xc>)
 8081a18:	681b      	ldr	r3, [r3, #0]
 8081a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081a1c:	9301      	str	r3, [sp, #4]
 8081a1e:	bd08      	pop	{r3, pc}
 8081a20:	080401a4 	.word	0x080401a4

08081a24 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081a24:	b508      	push	{r3, lr}
 8081a26:	4b02      	ldr	r3, [pc, #8]	; (8081a30 <application_thread_invoke+0xc>)
 8081a28:	681b      	ldr	r3, [r3, #0]
 8081a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081a2c:	9301      	str	r3, [sp, #4]
 8081a2e:	bd08      	pop	{r3, pc}
 8081a30:	080401a4 	.word	0x080401a4

08081a34 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081a34:	b508      	push	{r3, lr}
 8081a36:	4b02      	ldr	r3, [pc, #8]	; (8081a40 <system_thread_get_state+0xc>)
 8081a38:	681b      	ldr	r3, [r3, #0]
 8081a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081a3c:	9301      	str	r3, [sp, #4]
 8081a3e:	bd08      	pop	{r3, pc}
 8081a40:	080401a4 	.word	0x080401a4

08081a44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081a44:	b508      	push	{r3, lr}
 8081a46:	4b03      	ldr	r3, [pc, #12]	; (8081a54 <system_ctrl_set_app_request_handler+0x10>)
 8081a48:	681b      	ldr	r3, [r3, #0]
 8081a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081a4e:	9301      	str	r3, [sp, #4]
 8081a50:	bd08      	pop	{r3, pc}
 8081a52:	0000      	.short	0x0000
 8081a54:	080401a4 	.word	0x080401a4

08081a58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081a58:	b508      	push	{r3, lr}
 8081a5a:	4b03      	ldr	r3, [pc, #12]	; (8081a68 <system_ctrl_set_result+0x10>)
 8081a5c:	681b      	ldr	r3, [r3, #0]
 8081a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081a62:	9301      	str	r3, [sp, #4]
 8081a64:	bd08      	pop	{r3, pc}
 8081a66:	0000      	.short	0x0000
 8081a68:	080401a4 	.word	0x080401a4

08081a6c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081a6c:	b508      	push	{r3, lr}
 8081a6e:	4b02      	ldr	r3, [pc, #8]	; (8081a78 <spark_variable+0xc>)
 8081a70:	681b      	ldr	r3, [r3, #0]
 8081a72:	681b      	ldr	r3, [r3, #0]
 8081a74:	9301      	str	r3, [sp, #4]
 8081a76:	bd08      	pop	{r3, pc}
 8081a78:	080401cc 	.word	0x080401cc

08081a7c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081a7c:	b508      	push	{r3, lr}
 8081a7e:	4b02      	ldr	r3, [pc, #8]	; (8081a88 <spark_function+0xc>)
 8081a80:	681b      	ldr	r3, [r3, #0]
 8081a82:	685b      	ldr	r3, [r3, #4]
 8081a84:	9301      	str	r3, [sp, #4]
 8081a86:	bd08      	pop	{r3, pc}
 8081a88:	080401cc 	.word	0x080401cc

08081a8c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081a8c:	b508      	push	{r3, lr}
 8081a8e:	4b02      	ldr	r3, [pc, #8]	; (8081a98 <spark_process+0xc>)
 8081a90:	681b      	ldr	r3, [r3, #0]
 8081a92:	689b      	ldr	r3, [r3, #8]
 8081a94:	9301      	str	r3, [sp, #4]
 8081a96:	bd08      	pop	{r3, pc}
 8081a98:	080401cc 	.word	0x080401cc

08081a9c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081a9c:	b508      	push	{r3, lr}
 8081a9e:	4b02      	ldr	r3, [pc, #8]	; (8081aa8 <spark_cloud_flag_connect+0xc>)
 8081aa0:	681b      	ldr	r3, [r3, #0]
 8081aa2:	68db      	ldr	r3, [r3, #12]
 8081aa4:	9301      	str	r3, [sp, #4]
 8081aa6:	bd08      	pop	{r3, pc}
 8081aa8:	080401cc 	.word	0x080401cc

08081aac <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8081aac:	b508      	push	{r3, lr}
 8081aae:	4b02      	ldr	r3, [pc, #8]	; (8081ab8 <spark_cloud_flag_disconnect+0xc>)
 8081ab0:	681b      	ldr	r3, [r3, #0]
 8081ab2:	691b      	ldr	r3, [r3, #16]
 8081ab4:	9301      	str	r3, [sp, #4]
 8081ab6:	bd08      	pop	{r3, pc}
 8081ab8:	080401cc 	.word	0x080401cc

08081abc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081abc:	b508      	push	{r3, lr}
 8081abe:	4b02      	ldr	r3, [pc, #8]	; (8081ac8 <spark_cloud_flag_connected+0xc>)
 8081ac0:	681b      	ldr	r3, [r3, #0]
 8081ac2:	695b      	ldr	r3, [r3, #20]
 8081ac4:	9301      	str	r3, [sp, #4]
 8081ac6:	bd08      	pop	{r3, pc}
 8081ac8:	080401cc 	.word	0x080401cc

08081acc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081acc:	b508      	push	{r3, lr}
 8081ace:	4b02      	ldr	r3, [pc, #8]	; (8081ad8 <spark_deviceID+0xc>)
 8081ad0:	681b      	ldr	r3, [r3, #0]
 8081ad2:	69db      	ldr	r3, [r3, #28]
 8081ad4:	9301      	str	r3, [sp, #4]
 8081ad6:	bd08      	pop	{r3, pc}
 8081ad8:	080401cc 	.word	0x080401cc

08081adc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081adc:	b508      	push	{r3, lr}
 8081ade:	4b02      	ldr	r3, [pc, #8]	; (8081ae8 <spark_send_event+0xc>)
 8081ae0:	681b      	ldr	r3, [r3, #0]
 8081ae2:	6a1b      	ldr	r3, [r3, #32]
 8081ae4:	9301      	str	r3, [sp, #4]
 8081ae6:	bd08      	pop	{r3, pc}
 8081ae8:	080401cc 	.word	0x080401cc

08081aec <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081aec:	b508      	push	{r3, lr}
 8081aee:	4b02      	ldr	r3, [pc, #8]	; (8081af8 <spark_subscribe+0xc>)
 8081af0:	681b      	ldr	r3, [r3, #0]
 8081af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081af4:	9301      	str	r3, [sp, #4]
 8081af6:	bd08      	pop	{r3, pc}
 8081af8:	080401cc 	.word	0x080401cc

08081afc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081afc:	b508      	push	{r3, lr}
 8081afe:	4b02      	ldr	r3, [pc, #8]	; (8081b08 <spark_sync_time+0xc>)
 8081b00:	681b      	ldr	r3, [r3, #0]
 8081b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081b04:	9301      	str	r3, [sp, #4]
 8081b06:	bd08      	pop	{r3, pc}
 8081b08:	080401cc 	.word	0x080401cc

08081b0c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081b0c:	b508      	push	{r3, lr}
 8081b0e:	4b02      	ldr	r3, [pc, #8]	; (8081b18 <spark_sync_time_pending+0xc>)
 8081b10:	681b      	ldr	r3, [r3, #0]
 8081b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b14:	9301      	str	r3, [sp, #4]
 8081b16:	bd08      	pop	{r3, pc}
 8081b18:	080401cc 	.word	0x080401cc

08081b1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081b1c:	b508      	push	{r3, lr}
 8081b1e:	4b02      	ldr	r3, [pc, #8]	; (8081b28 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081b20:	681b      	ldr	r3, [r3, #0]
 8081b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081b24:	9301      	str	r3, [sp, #4]
 8081b26:	bd08      	pop	{r3, pc}
 8081b28:	080401cc 	.word	0x080401cc

08081b2c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081b2c:	b508      	push	{r3, lr}
 8081b2e:	4b02      	ldr	r3, [pc, #8]	; (8081b38 <network_connect+0xc>)
 8081b30:	681b      	ldr	r3, [r3, #0]
 8081b32:	685b      	ldr	r3, [r3, #4]
 8081b34:	9301      	str	r3, [sp, #4]
 8081b36:	bd08      	pop	{r3, pc}
 8081b38:	080401c8 	.word	0x080401c8

08081b3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081b3c:	b508      	push	{r3, lr}
 8081b3e:	4b02      	ldr	r3, [pc, #8]	; (8081b48 <network_connecting+0xc>)
 8081b40:	681b      	ldr	r3, [r3, #0]
 8081b42:	689b      	ldr	r3, [r3, #8]
 8081b44:	9301      	str	r3, [sp, #4]
 8081b46:	bd08      	pop	{r3, pc}
 8081b48:	080401c8 	.word	0x080401c8

08081b4c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081b4c:	b508      	push	{r3, lr}
 8081b4e:	4b02      	ldr	r3, [pc, #8]	; (8081b58 <network_disconnect+0xc>)
 8081b50:	681b      	ldr	r3, [r3, #0]
 8081b52:	68db      	ldr	r3, [r3, #12]
 8081b54:	9301      	str	r3, [sp, #4]
 8081b56:	bd08      	pop	{r3, pc}
 8081b58:	080401c8 	.word	0x080401c8

08081b5c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081b5c:	b508      	push	{r3, lr}
 8081b5e:	4b02      	ldr	r3, [pc, #8]	; (8081b68 <network_ready+0xc>)
 8081b60:	681b      	ldr	r3, [r3, #0]
 8081b62:	691b      	ldr	r3, [r3, #16]
 8081b64:	9301      	str	r3, [sp, #4]
 8081b66:	bd08      	pop	{r3, pc}
 8081b68:	080401c8 	.word	0x080401c8

08081b6c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081b6c:	b508      	push	{r3, lr}
 8081b6e:	4b02      	ldr	r3, [pc, #8]	; (8081b78 <network_on+0xc>)
 8081b70:	681b      	ldr	r3, [r3, #0]
 8081b72:	695b      	ldr	r3, [r3, #20]
 8081b74:	9301      	str	r3, [sp, #4]
 8081b76:	bd08      	pop	{r3, pc}
 8081b78:	080401c8 	.word	0x080401c8

08081b7c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081b7c:	b508      	push	{r3, lr}
 8081b7e:	4b02      	ldr	r3, [pc, #8]	; (8081b88 <network_off+0xc>)
 8081b80:	681b      	ldr	r3, [r3, #0]
 8081b82:	699b      	ldr	r3, [r3, #24]
 8081b84:	9301      	str	r3, [sp, #4]
 8081b86:	bd08      	pop	{r3, pc}
 8081b88:	080401c8 	.word	0x080401c8

08081b8c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081b8c:	b508      	push	{r3, lr}
 8081b8e:	4b02      	ldr	r3, [pc, #8]	; (8081b98 <network_listen+0xc>)
 8081b90:	681b      	ldr	r3, [r3, #0]
 8081b92:	69db      	ldr	r3, [r3, #28]
 8081b94:	9301      	str	r3, [sp, #4]
 8081b96:	bd08      	pop	{r3, pc}
 8081b98:	080401c8 	.word	0x080401c8

08081b9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081b9c:	b508      	push	{r3, lr}
 8081b9e:	4b02      	ldr	r3, [pc, #8]	; (8081ba8 <network_listening+0xc>)
 8081ba0:	681b      	ldr	r3, [r3, #0]
 8081ba2:	6a1b      	ldr	r3, [r3, #32]
 8081ba4:	9301      	str	r3, [sp, #4]
 8081ba6:	bd08      	pop	{r3, pc}
 8081ba8:	080401c8 	.word	0x080401c8

08081bac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081bac:	b508      	push	{r3, lr}
 8081bae:	4b02      	ldr	r3, [pc, #8]	; (8081bb8 <network_set_listen_timeout+0xc>)
 8081bb0:	681b      	ldr	r3, [r3, #0]
 8081bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081bb4:	9301      	str	r3, [sp, #4]
 8081bb6:	bd08      	pop	{r3, pc}
 8081bb8:	080401c8 	.word	0x080401c8

08081bbc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081bbc:	b508      	push	{r3, lr}
 8081bbe:	4b02      	ldr	r3, [pc, #8]	; (8081bc8 <network_get_listen_timeout+0xc>)
 8081bc0:	681b      	ldr	r3, [r3, #0]
 8081bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081bc4:	9301      	str	r3, [sp, #4]
 8081bc6:	bd08      	pop	{r3, pc}
 8081bc8:	080401c8 	.word	0x080401c8

08081bcc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081bcc:	b508      	push	{r3, lr}
 8081bce:	4b02      	ldr	r3, [pc, #8]	; (8081bd8 <malloc+0xc>)
 8081bd0:	681b      	ldr	r3, [r3, #0]
 8081bd2:	681b      	ldr	r3, [r3, #0]
 8081bd4:	9301      	str	r3, [sp, #4]
 8081bd6:	bd08      	pop	{r3, pc}
 8081bd8:	080401a0 	.word	0x080401a0

08081bdc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081bdc:	b508      	push	{r3, lr}
 8081bde:	4b02      	ldr	r3, [pc, #8]	; (8081be8 <free+0xc>)
 8081be0:	681b      	ldr	r3, [r3, #0]
 8081be2:	685b      	ldr	r3, [r3, #4]
 8081be4:	9301      	str	r3, [sp, #4]
 8081be6:	bd08      	pop	{r3, pc}
 8081be8:	080401a0 	.word	0x080401a0

08081bec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081bec:	b508      	push	{r3, lr}
 8081bee:	4b02      	ldr	r3, [pc, #8]	; (8081bf8 <realloc+0xc>)
 8081bf0:	681b      	ldr	r3, [r3, #0]
 8081bf2:	689b      	ldr	r3, [r3, #8]
 8081bf4:	9301      	str	r3, [sp, #4]
 8081bf6:	bd08      	pop	{r3, pc}
 8081bf8:	080401a0 	.word	0x080401a0

08081bfc <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081bfc:	b508      	push	{r3, lr}
 8081bfe:	4b02      	ldr	r3, [pc, #8]	; (8081c08 <siscanf+0xc>)
 8081c00:	681b      	ldr	r3, [r3, #0]
 8081c02:	699b      	ldr	r3, [r3, #24]
 8081c04:	9301      	str	r3, [sp, #4]
 8081c06:	bd08      	pop	{r3, pc}
 8081c08:	080401a0 	.word	0x080401a0

08081c0c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081c0c:	b508      	push	{r3, lr}
 8081c0e:	4b02      	ldr	r3, [pc, #8]	; (8081c18 <snprintf+0xc>)
 8081c10:	681b      	ldr	r3, [r3, #0]
 8081c12:	69db      	ldr	r3, [r3, #28]
 8081c14:	9301      	str	r3, [sp, #4]
 8081c16:	bd08      	pop	{r3, pc}
 8081c18:	080401a0 	.word	0x080401a0

08081c1c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081c1c:	b508      	push	{r3, lr}
 8081c1e:	4b02      	ldr	r3, [pc, #8]	; (8081c28 <abort+0xc>)
 8081c20:	681b      	ldr	r3, [r3, #0]
 8081c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081c24:	9301      	str	r3, [sp, #4]
 8081c26:	bd08      	pop	{r3, pc}
 8081c28:	080401a0 	.word	0x080401a0

08081c2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081c2c:	b508      	push	{r3, lr}
 8081c2e:	4b02      	ldr	r3, [pc, #8]	; (8081c38 <_malloc_r+0xc>)
 8081c30:	681b      	ldr	r3, [r3, #0]
 8081c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c34:	9301      	str	r3, [sp, #4]
 8081c36:	bd08      	pop	{r3, pc}
 8081c38:	080401a0 	.word	0x080401a0

08081c3c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 8081c3c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 8081c3e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 8081c40:	d007      	beq.n	8081c52 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 8081c42:	9d03      	ldr	r5, [sp, #12]
 8081c44:	1a44      	subs	r4, r0, r1
 8081c46:	1aed      	subs	r5, r5, r3
 8081c48:	436c      	muls	r4, r5
 8081c4a:	1a52      	subs	r2, r2, r1
 8081c4c:	fb94 f4f2 	sdiv	r4, r4, r2
 8081c50:	18e0      	adds	r0, r4, r3
}
 8081c52:	bd30      	pop	{r4, r5, pc}

08081c54 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081c54:	2100      	movs	r1, #0
 8081c56:	f7ff bec5 	b.w	80819e4 <system_delay_ms>

08081c5a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081c5a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081c5c:	6883      	ldr	r3, [r0, #8]
 8081c5e:	4604      	mov	r4, r0
 8081c60:	b90b      	cbnz	r3, 8081c66 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081c62:	f001 fb52 	bl	808330a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c66:	68c3      	ldr	r3, [r0, #12]
 8081c68:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081c6a:	68a3      	ldr	r3, [r4, #8]
 8081c6c:	b11b      	cbz	r3, 8081c76 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081c6e:	2203      	movs	r2, #3
 8081c70:	4621      	mov	r1, r4
 8081c72:	4620      	mov	r0, r4
 8081c74:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081c76:	4620      	mov	r0, r4
}
 8081c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081c7c:	2110      	movs	r1, #16
 8081c7e:	f001 bb42 	b.w	8083306 <_ZdlPvj>

08081c82 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c82:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081c86:	2600      	movs	r6, #0
 8081c88:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c8a:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081c8c:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c8e:	4688      	mov	r8, r1
 8081c90:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081c92:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081c96:	f002 fcd2 	bl	808463e <strlen>
 8081c9a:	9600      	str	r6, [sp, #0]
 8081c9c:	b281      	uxth	r1, r0
 8081c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081ca2:	4622      	mov	r2, r4
 8081ca4:	4638      	mov	r0, r7
 8081ca6:	f7ff fcbd 	bl	8081624 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081caa:	b120      	cbz	r0, 8081cb6 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081cac:	4631      	mov	r1, r6
 8081cae:	4628      	mov	r0, r5
 8081cb0:	f000 fd54 	bl	808275c <_ZN9IPAddressC1Em>
 8081cb4:	e003      	b.n	8081cbe <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081cb6:	4621      	mov	r1, r4
 8081cb8:	4628      	mov	r0, r5
 8081cba:	f000 fd47 	bl	808274c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081cbe:	4628      	mov	r0, r5
 8081cc0:	b004      	add	sp, #16
 8081cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081cc6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081cc6:	2200      	movs	r2, #0
 8081cc8:	4611      	mov	r1, r2
 8081cca:	6840      	ldr	r0, [r0, #4]
 8081ccc:	f7ff bf66 	b.w	8081b9c <network_listening>

08081cd0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081cd0:	2200      	movs	r2, #0
 8081cd2:	4611      	mov	r1, r2
 8081cd4:	6840      	ldr	r0, [r0, #4]
 8081cd6:	f7ff bf71 	b.w	8081bbc <network_get_listen_timeout>

08081cda <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081cda:	2200      	movs	r2, #0
 8081cdc:	6840      	ldr	r0, [r0, #4]
 8081cde:	f7ff bf65 	b.w	8081bac <network_set_listen_timeout>

08081ce2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081ce2:	2200      	movs	r2, #0
 8081ce4:	f081 0101 	eor.w	r1, r1, #1
 8081ce8:	6840      	ldr	r0, [r0, #4]
 8081cea:	f7ff bf4f 	b.w	8081b8c <network_listen>

08081cee <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081cee:	2300      	movs	r3, #0
 8081cf0:	461a      	mov	r2, r3
 8081cf2:	4619      	mov	r1, r3
 8081cf4:	6840      	ldr	r0, [r0, #4]
 8081cf6:	f7ff bf41 	b.w	8081b7c <network_off>

08081cfa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081cfa:	2300      	movs	r3, #0
 8081cfc:	461a      	mov	r2, r3
 8081cfe:	4619      	mov	r1, r3
 8081d00:	6840      	ldr	r0, [r0, #4]
 8081d02:	f7ff bf33 	b.w	8081b6c <network_on>

08081d06 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081d06:	2200      	movs	r2, #0
 8081d08:	4611      	mov	r1, r2
 8081d0a:	6840      	ldr	r0, [r0, #4]
 8081d0c:	f7ff bf16 	b.w	8081b3c <network_connecting>

08081d10 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081d10:	2200      	movs	r2, #0
 8081d12:	2102      	movs	r1, #2
 8081d14:	6840      	ldr	r0, [r0, #4]
 8081d16:	f7ff bf19 	b.w	8081b4c <network_disconnect>

08081d1a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081d1a:	2300      	movs	r3, #0
 8081d1c:	461a      	mov	r2, r3
 8081d1e:	6840      	ldr	r0, [r0, #4]
 8081d20:	f7ff bf04 	b.w	8081b2c <network_connect>

08081d24 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d26:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081d28:	4b1a      	ldr	r3, [pc, #104]	; (8081d94 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081d2a:	2500      	movs	r5, #0
 8081d2c:	6003      	str	r3, [r0, #0]
 8081d2e:	2618      	movs	r6, #24
 8081d30:	3328      	adds	r3, #40	; 0x28
 8081d32:	b089      	sub	sp, #36	; 0x24
 8081d34:	6043      	str	r3, [r0, #4]
 8081d36:	6085      	str	r5, [r0, #8]
 8081d38:	60c5      	str	r5, [r0, #12]
 8081d3a:	4632      	mov	r2, r6
 8081d3c:	4629      	mov	r1, r5
 8081d3e:	4604      	mov	r4, r0
 8081d40:	3010      	adds	r0, #16
 8081d42:	f002 fc0e 	bl	8084562 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081d46:	462a      	mov	r2, r5
 8081d48:	4629      	mov	r1, r5
 8081d4a:	6878      	ldr	r0, [r7, #4]
 8081d4c:	f7ff ff06 	bl	8081b5c <network_ready>
 8081d50:	b908      	cbnz	r0, 8081d56 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081d52:	60a0      	str	r0, [r4, #8]
            return sig;
 8081d54:	e01b      	b.n	8081d8e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081d56:	4629      	mov	r1, r5
 8081d58:	4632      	mov	r2, r6
 8081d5a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081d5c:	9500      	str	r5, [sp, #0]
 8081d5e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081d60:	f002 fbff 	bl	8084562 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081d64:	a902      	add	r1, sp, #8
 8081d66:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081d68:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081d6c:	f7ff fc62 	bl	8081634 <cellular_signal>
 8081d70:	b110      	cbz	r0, 8081d78 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081d72:	2301      	movs	r3, #1
 8081d74:	60a3      	str	r3, [r4, #8]
            return sig;
 8081d76:	e00a      	b.n	8081d8e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8081d78:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081d7a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8081d7c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081d7e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081d80:	b90b      	cbnz	r3, 8081d86 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8081d82:	2302      	movs	r3, #2
 8081d84:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8081d86:	a902      	add	r1, sp, #8
 8081d88:	4620      	mov	r0, r4
 8081d8a:	f000 f895 	bl	8081eb8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8081d8e:	4620      	mov	r0, r4
 8081d90:	b009      	add	sp, #36	; 0x24
 8081d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081d94:	0808531c 	.word	0x0808531c

08081d98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081d98:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081d9a:	4c08      	ldr	r4, [pc, #32]	; (8081dbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081d9c:	2528      	movs	r5, #40	; 0x28
 8081d9e:	462a      	mov	r2, r5
 8081da0:	2100      	movs	r1, #0
 8081da2:	4620      	mov	r0, r4
 8081da4:	f002 fbdd 	bl	8084562 <memset>
        cid = -1;
 8081da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081dac:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081dae:	4b04      	ldr	r3, [pc, #16]	; (8081dc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081db0:	2204      	movs	r2, #4
 8081db2:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081db4:	4a03      	ldr	r2, [pc, #12]	; (8081dc4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8081db6:	8025      	strh	r5, [r4, #0]
 8081db8:	601a      	str	r2, [r3, #0]
 8081dba:	bd38      	pop	{r3, r4, r5, pc}
 8081dbc:	2000023c 	.word	0x2000023c
 8081dc0:	20000234 	.word	0x20000234
 8081dc4:	080852e8 	.word	0x080852e8

08081dc8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081dc8:	4770      	bx	lr

08081dca <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081dca:	7d00      	ldrb	r0, [r0, #20]
 8081dcc:	4770      	bx	lr
	...

08081dd0 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081dd0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081dd2:	7d03      	ldrb	r3, [r0, #20]
 8081dd4:	b11b      	cbz	r3, 8081dde <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081dd6:	6980      	ldr	r0, [r0, #24]
 8081dd8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081ddc:	d101      	bne.n	8081de2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081dde:	2000      	movs	r0, #0
 8081de0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081de2:	f002 f8d9 	bl	8083f98 <__aeabi_i2f>
 8081de6:	4902      	ldr	r1, [pc, #8]	; (8081df0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081de8:	f002 f9de 	bl	80841a8 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081dec:	bd08      	pop	{r3, pc}
 8081dee:	bf00      	nop
 8081df0:	42c80000 	.word	0x42c80000

08081df4 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081df4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081df6:	7d03      	ldrb	r3, [r0, #20]
 8081df8:	b11b      	cbz	r3, 8081e02 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081dfa:	6a00      	ldr	r0, [r0, #32]
 8081dfc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081e00:	d101      	bne.n	8081e06 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081e02:	2000      	movs	r0, #0
 8081e04:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081e06:	f002 f8c7 	bl	8083f98 <__aeabi_i2f>
 8081e0a:	4902      	ldr	r1, [pc, #8]	; (8081e14 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081e0c:	f002 f9cc 	bl	80841a8 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081e10:	bd08      	pop	{r3, pc}
 8081e12:	bf00      	nop
 8081e14:	42c80000 	.word	0x42c80000

08081e18 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081e18:	b570      	push	{r4, r5, r6, lr}
 8081e1a:	460d      	mov	r5, r1
 8081e1c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081e1e:	220a      	movs	r2, #10
 8081e20:	6881      	ldr	r1, [r0, #8]
 8081e22:	4628      	mov	r0, r5
 8081e24:	f000 fded 	bl	8082a02 <_ZN5Print5printEii>
    n += p.print(',');
 8081e28:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081e2a:	4604      	mov	r4, r0
    n += p.print(',');
 8081e2c:	4628      	mov	r0, r5
 8081e2e:	f000 fd97 	bl	8082960 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081e32:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081e34:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081e36:	68f1      	ldr	r1, [r6, #12]
 8081e38:	4628      	mov	r0, r5
 8081e3a:	f000 fde2 	bl	8082a02 <_ZN5Print5printEii>
    return n;
}
 8081e3e:	4420      	add	r0, r4
 8081e40:	bd70      	pop	{r4, r5, r6, pc}

08081e42 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081e42:	f1a0 0004 	sub.w	r0, r0, #4
 8081e46:	f7ff bfe7 	b.w	8081e18 <_ZNK14CellularSignal7printToER5Print>

08081e4a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081e4a:	b510      	push	{r4, lr}
 8081e4c:	4604      	mov	r4, r0
 8081e4e:	2128      	movs	r1, #40	; 0x28
 8081e50:	f001 fa59 	bl	8083306 <_ZdlPvj>
 8081e54:	4620      	mov	r0, r4
 8081e56:	bd10      	pop	{r4, pc}

08081e58 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081e58:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081e5a:	7d03      	ldrb	r3, [r0, #20]
 8081e5c:	b15b      	cbz	r3, 8081e76 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081e5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081e60:	2800      	cmp	r0, #0
 8081e62:	db08      	blt.n	8081e76 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081e64:	f002 f898 	bl	8083f98 <__aeabi_i2f>
 8081e68:	4904      	ldr	r1, [pc, #16]	; (8081e7c <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081e6a:	f002 f99d 	bl	80841a8 <__aeabi_fdiv>
 8081e6e:	4904      	ldr	r1, [pc, #16]	; (8081e80 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081e70:	f002 f8e6 	bl	8084040 <__aeabi_fmul>
 8081e74:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081e76:	4803      	ldr	r0, [pc, #12]	; (8081e84 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081e78:	bd08      	pop	{r3, pc}
 8081e7a:	bf00      	nop
 8081e7c:	477fff00 	.word	0x477fff00
 8081e80:	42c80000 	.word	0x42c80000
 8081e84:	bf800000 	.word	0xbf800000

08081e88 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081e88:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081e8a:	7d03      	ldrb	r3, [r0, #20]
 8081e8c:	b15b      	cbz	r3, 8081ea6 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081e8e:	69c0      	ldr	r0, [r0, #28]
 8081e90:	2800      	cmp	r0, #0
 8081e92:	db08      	blt.n	8081ea6 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081e94:	f002 f880 	bl	8083f98 <__aeabi_i2f>
 8081e98:	4904      	ldr	r1, [pc, #16]	; (8081eac <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081e9a:	f002 f985 	bl	80841a8 <__aeabi_fdiv>
 8081e9e:	4904      	ldr	r1, [pc, #16]	; (8081eb0 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081ea0:	f002 f8ce 	bl	8084040 <__aeabi_fmul>
 8081ea4:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081ea6:	4803      	ldr	r0, [pc, #12]	; (8081eb4 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081ea8:	bd08      	pop	{r3, pc}
 8081eaa:	bf00      	nop
 8081eac:	477fff00 	.word	0x477fff00
 8081eb0:	42c80000 	.word	0x42c80000
 8081eb4:	bf800000 	.word	0xbf800000

08081eb8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081eb8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081eba:	460d      	mov	r5, r1
 8081ebc:	f100 0410 	add.w	r4, r0, #16
 8081ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081ec4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081ec8:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081ecc:	2001      	movs	r0, #1
 8081ece:	bd30      	pop	{r4, r5, pc}

08081ed0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081ed0:	4770      	bx	lr

08081ed2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081ed2:	2000      	movs	r0, #0
 8081ed4:	4770      	bx	lr

08081ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081ed6:	b510      	push	{r4, lr}
 8081ed8:	4604      	mov	r4, r0
 8081eda:	2110      	movs	r1, #16
 8081edc:	f001 fa13 	bl	8083306 <_ZdlPvj>
 8081ee0:	4620      	mov	r0, r4
 8081ee2:	bd10      	pop	{r4, pc}

08081ee4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081ee4:	b508      	push	{r3, lr}
      { delete this; }
 8081ee6:	b108      	cbz	r0, 8081eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081ee8:	f7ff fff5 	bl	8081ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081eec:	bd08      	pop	{r3, pc}

08081eee <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081eee:	2200      	movs	r2, #0
 8081ef0:	6002      	str	r2, [r0, #0]
 8081ef2:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8081ef6:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081ef8:	b510      	push	{r4, lr}
 8081efa:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081efe:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081f00:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081f02:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081f04:	680c      	ldr	r4, [r1, #0]
 8081f06:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081f08:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081f0a:	bd10      	pop	{r4, pc}

08081f0c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081f0c:	b510      	push	{r4, lr}
 8081f0e:	4604      	mov	r4, r0
    free((void*)msg_);
 8081f10:	6800      	ldr	r0, [r0, #0]
 8081f12:	f7ff fe63 	bl	8081bdc <free>
}
 8081f16:	4620      	mov	r0, r4
 8081f18:	bd10      	pop	{r4, pc}

08081f1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081f1a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081f1c:	68c4      	ldr	r4, [r0, #12]
 8081f1e:	b1f4      	cbz	r4, 8081f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081f20:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081f22:	2b02      	cmp	r3, #2
 8081f24:	d103      	bne.n	8081f2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081f26:	f104 000c 	add.w	r0, r4, #12
 8081f2a:	f7ff ffef 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081f2e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081f30:	b135      	cbz	r5, 8081f40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081f32:	4628      	mov	r0, r5
 8081f34:	f7fe f977 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8081f38:	2110      	movs	r1, #16
 8081f3a:	4628      	mov	r0, r5
 8081f3c:	f001 f9e3 	bl	8083306 <_ZdlPvj>
 8081f40:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081f42:	b135      	cbz	r5, 8081f52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081f44:	4628      	mov	r0, r5
 8081f46:	f7fe f96e 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8081f4a:	2110      	movs	r1, #16
 8081f4c:	4628      	mov	r0, r5
 8081f4e:	f001 f9da 	bl	8083306 <_ZdlPvj>
 8081f52:	4620      	mov	r0, r4
 8081f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081f58:	2114      	movs	r1, #20
 8081f5a:	f001 b9d4 	b.w	8083306 <_ZdlPvj>
 8081f5e:	bd38      	pop	{r3, r4, r5, pc}

08081f60 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081f60:	b510      	push	{r4, lr}
 8081f62:	b088      	sub	sp, #32
 8081f64:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081f66:	4668      	mov	r0, sp
 8081f68:	f000 fdc8 	bl	8082afc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081f6c:	4669      	mov	r1, sp
 8081f6e:	a804      	add	r0, sp, #16
 8081f70:	f000 fde6 	bl	8082b40 <_ZN6StringC1ERKS_>
 8081f74:	a804      	add	r0, sp, #16
 8081f76:	47a0      	blx	r4
 8081f78:	4604      	mov	r4, r0
 8081f7a:	a804      	add	r0, sp, #16
 8081f7c:	f000 fd77 	bl	8082a6e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081f80:	4668      	mov	r0, sp
 8081f82:	f000 fd74 	bl	8082a6e <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081f86:	4620      	mov	r0, r4
 8081f88:	b008      	add	sp, #32
 8081f8a:	bd10      	pop	{r4, pc}

08081f8c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081f8e:	4607      	mov	r7, r0
 8081f90:	460e      	mov	r6, r1
 8081f92:	4615      	mov	r5, r2
 8081f94:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081f96:	2410      	movs	r4, #16
 8081f98:	4622      	mov	r2, r4
 8081f9a:	2100      	movs	r1, #0
 8081f9c:	4668      	mov	r0, sp
 8081f9e:	f002 fae0 	bl	8084562 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081fa2:	2200      	movs	r2, #0
 8081fa4:	4669      	mov	r1, sp
 8081fa6:	4610      	mov	r0, r2
         size = sizeof(*this);
 8081fa8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8081fac:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8081fae:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8081fb0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081fb2:	f7ff fd63 	bl	8081a7c <spark_function>
}
 8081fb6:	b005      	add	sp, #20
 8081fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081fba <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081fba:	b513      	push	{r0, r1, r4, lr}
 8081fbc:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081fbe:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081fc2:	2300      	movs	r3, #0
 8081fc4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081fc6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081fc8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081fca:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081fcc:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081fce:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081fd0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081fd2:	f7fe faef 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081fd6:	4620      	mov	r0, r4
 8081fd8:	b002      	add	sp, #8
 8081fda:	bd10      	pop	{r4, pc}

08081fdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081fdc:	680b      	ldr	r3, [r1, #0]
 8081fde:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081fe0:	b113      	cbz	r3, 8081fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081fe2:	685a      	ldr	r2, [r3, #4]
 8081fe4:	3201      	adds	r2, #1
 8081fe6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081fe8:	4770      	bx	lr

08081fea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081fec:	460c      	mov	r4, r1
 8081fee:	4606      	mov	r6, r0
 8081ff0:	460f      	mov	r7, r1
 8081ff2:	f854 3b04 	ldr.w	r3, [r4], #4
 8081ff6:	ad02      	add	r5, sp, #8
 8081ff8:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081ffc:	4621      	mov	r1, r4
 8081ffe:	a801      	add	r0, sp, #4
 8082000:	f7ff ffec 	bl	8081fdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082004:	4629      	mov	r1, r5
 8082006:	4630      	mov	r0, r6
 8082008:	f7ff ffd7 	bl	8081fba <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808200c:	a801      	add	r0, sp, #4
 808200e:	f7fe fad1 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082012:	4620      	mov	r0, r4
 8082014:	f7fe face 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8082018:	4638      	mov	r0, r7
 808201a:	2108      	movs	r1, #8
 808201c:	f001 f973 	bl	8083306 <_ZdlPvj>
        return p;
    }
 8082020:	4630      	mov	r0, r6
 8082022:	b003      	add	sp, #12
 8082024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082026 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082026:	b513      	push	{r0, r1, r4, lr}
 8082028:	460b      	mov	r3, r1
 808202a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808202c:	c803      	ldmia	r0, {r0, r1}
 808202e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082032:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082036:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808203a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808203e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082042:	b002      	add	sp, #8
 8082044:	bd10      	pop	{r4, pc}
	...

08082048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082048:	b538      	push	{r3, r4, r5, lr}
 808204a:	2300      	movs	r3, #0
 808204c:	4604      	mov	r4, r0
 808204e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082050:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082052:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082054:	f7fe f823 	bl	808009e <_Znwj>
 8082058:	b128      	cbz	r0, 8082066 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808205a:	2301      	movs	r3, #1
 808205c:	6043      	str	r3, [r0, #4]
 808205e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082060:	4b02      	ldr	r3, [pc, #8]	; (808206c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082062:	60c5      	str	r5, [r0, #12]
 8082064:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082066:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8082068:	4620      	mov	r0, r4
 808206a:	bd38      	pop	{r3, r4, r5, pc}
 808206c:	08085350 	.word	0x08085350

08082070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082070:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082072:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082074:	b90a      	cbnz	r2, 808207a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082076:	f001 f948 	bl	808330a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808207a:	68c3      	ldr	r3, [r0, #12]
    }
 808207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082080:	4718      	bx	r3

08082082 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082082:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082084:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082086:	f100 0110 	add.w	r1, r0, #16
 808208a:	f7ff fff1 	bl	8082070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808208e:	bd08      	pop	{r3, pc}

08082090 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082090:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082092:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082094:	b90a      	cbnz	r2, 808209a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082096:	f001 f938 	bl	808330a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808209a:	68c3      	ldr	r3, [r0, #12]
    }
 808209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80820a0:	4718      	bx	r3

080820a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80820a2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80820a4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80820a6:	f100 0110 	add.w	r1, r0, #16
 80820aa:	f7ff fff1 	bl	8082090 <_ZNKSt8functionIFvRKbEEclES1_>
 80820ae:	bd08      	pop	{r3, pc}

080820b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80820b0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80820b2:	2300      	movs	r3, #0
 80820b4:	6083      	str	r3, [r0, #8]
 80820b6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80820b8:	4604      	mov	r4, r0
 80820ba:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80820bc:	b12b      	cbz	r3, 80820ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80820be:	2202      	movs	r2, #2
 80820c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80820c2:	68eb      	ldr	r3, [r5, #12]
 80820c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80820c6:	68ab      	ldr	r3, [r5, #8]
 80820c8:	60a3      	str	r3, [r4, #8]
	}
    }
 80820ca:	4620      	mov	r0, r4
 80820cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080820d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80820d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80820d2:	b089      	sub	sp, #36	; 0x24
 80820d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80820d6:	4668      	mov	r0, sp
 80820d8:	f7ff ff09 	bl	8081eee <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80820dc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80820e0:	2300      	movs	r3, #0
 80820e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80820e6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80820ea:	2b00      	cmp	r3, #0
 80820ec:	d103      	bne.n	80820f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80820ee:	e8c4 2f41 	strexb	r1, r2, [r4]
 80820f2:	2900      	cmp	r1, #0
 80820f4:	d1f7      	bne.n	80820e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80820f6:	d002      	beq.n	80820fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80820f8:	f88d 3008 	strb.w	r3, [sp, #8]
 80820fc:	e063      	b.n	80821c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80820fe:	f114 050c 	adds.w	r5, r4, #12
 8082102:	d003      	beq.n	808210c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8082104:	4669      	mov	r1, sp
 8082106:	4628      	mov	r0, r5
 8082108:	f7ff fef1 	bl	8081eee <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808210c:	f3bf 8f5f 	dmb	sy
 8082110:	2301      	movs	r3, #1
 8082112:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082114:	f3bf 8f5f 	dmb	sy
 8082118:	f104 0308 	add.w	r3, r4, #8
 808211c:	2000      	movs	r0, #0
 808211e:	e853 6f00 	ldrex	r6, [r3]
 8082122:	e843 0200 	strex	r2, r0, [r3]
 8082126:	2a00      	cmp	r2, #0
 8082128:	d1f9      	bne.n	808211e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808212a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808212e:	2e00      	cmp	r6, #0
 8082130:	d049      	beq.n	80821c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082132:	f7ff fc6f 	bl	8081a14 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082136:	b120      	cbz	r0, 8082142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082138:	4629      	mov	r1, r5
 808213a:	4630      	mov	r0, r6
 808213c:	f7ff ff98 	bl	8082070 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082140:	e03a      	b.n	80821b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082142:	4631      	mov	r1, r6
 8082144:	a802      	add	r0, sp, #8
 8082146:	f7ff ffb3 	bl	80820b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808214a:	68e0      	ldr	r0, [r4, #12]
 808214c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082150:	b108      	cbz	r0, 8082156 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8082152:	f002 fa59 	bl	8084608 <strdup>
 8082156:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082158:	2010      	movs	r0, #16
 808215a:	f8ad 501c 	strh.w	r5, [sp, #28]
 808215e:	f7fd ff9e 	bl	808009e <_Znwj>
 8082162:	4605      	mov	r5, r0
 8082164:	b1e8      	cbz	r0, 80821a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082166:	2700      	movs	r7, #0
 8082168:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808216a:	2018      	movs	r0, #24
 808216c:	f7fd ff97 	bl	808009e <_Znwj>
 8082170:	4604      	mov	r4, r0
 8082172:	b188      	cbz	r0, 8082198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082174:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082176:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082178:	a802      	add	r0, sp, #8
 808217a:	f7ff ff54 	bl	8082026 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808217e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082180:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082182:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082184:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082186:	9204      	str	r2, [sp, #16]
 8082188:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808218a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808218c:	60e3      	str	r3, [r4, #12]
 808218e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082192:	9205      	str	r2, [sp, #20]
 8082194:	f7ff feab 	bl	8081eee <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082198:	4b0d      	ldr	r3, [pc, #52]	; (80821d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808219a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808219c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808219e:	4b0d      	ldr	r3, [pc, #52]	; (80821d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80821a0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80821a2:	a806      	add	r0, sp, #24
 80821a4:	f7ff feb2 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80821a8:	a802      	add	r0, sp, #8
 80821aa:	f7fe f83c 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80821ae:	2200      	movs	r2, #0
 80821b0:	4629      	mov	r1, r5
 80821b2:	4809      	ldr	r0, [pc, #36]	; (80821d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80821b4:	f7ff fc36 	bl	8081a24 <application_thread_invoke>
 80821b8:	4630      	mov	r0, r6
 80821ba:	f7fe f834 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80821be:	2110      	movs	r1, #16
 80821c0:	4630      	mov	r0, r6
 80821c2:	f001 f8a0 	bl	8083306 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80821c6:	4668      	mov	r0, sp
 80821c8:	f7ff fea0 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
    }
 80821cc:	b009      	add	sp, #36	; 0x24
 80821ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80821d0:	08082083 	.word	0x08082083
 80821d4:	080822f9 	.word	0x080822f9
 80821d8:	08081c5b 	.word	0x08081c5b

080821dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80821dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80821e0:	b08b      	sub	sp, #44	; 0x2c
 80821e2:	4606      	mov	r6, r0
 80821e4:	460f      	mov	r7, r1
 80821e6:	4690      	mov	r8, r2
 80821e8:	4699      	mov	r9, r3
 80821ea:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80821ee:	f7ff fc65 	bl	8081abc <spark_cloud_flag_connected>
 80821f2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80821f4:	4683      	mov	fp, r0
 80821f6:	bb30      	cbnz	r0, 8082246 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80821f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80821fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80821fe:	a905      	add	r1, sp, #20
 8082200:	4628      	mov	r0, r5
 8082202:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082206:	f7ff fe72 	bl	8081eee <_ZN8particle5ErrorC1EOS0_>
 808220a:	2014      	movs	r0, #20
 808220c:	f7fd ff47 	bl	808009e <_Znwj>
 8082210:	4604      	mov	r4, r0
 8082212:	b158      	cbz	r0, 808222c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082214:	2302      	movs	r3, #2
 8082216:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082218:	2301      	movs	r3, #1
 808221a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808221c:	f8c0 b004 	str.w	fp, [r0, #4]
 8082220:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8082224:	4629      	mov	r1, r5
 8082226:	300c      	adds	r0, #12
 8082228:	f7ff fe61 	bl	8081eee <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808222c:	4630      	mov	r0, r6
 808222e:	4621      	mov	r1, r4
 8082230:	f840 4b04 	str.w	r4, [r0], #4
 8082234:	f7ff ff08 	bl	8082048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082238:	4628      	mov	r0, r5
 808223a:	f7ff fe67 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808223e:	a805      	add	r0, sp, #20
 8082240:	f7ff fe64 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
 8082244:	e052      	b.n	80822ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082246:	2400      	movs	r4, #0
 8082248:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808224a:	2014      	movs	r0, #20
 808224c:	606c      	str	r4, [r5, #4]
 808224e:	60ac      	str	r4, [r5, #8]
 8082250:	9307      	str	r3, [sp, #28]
 8082252:	f7fd ff24 	bl	808009e <_Znwj>
 8082256:	4601      	mov	r1, r0
 8082258:	b118      	cbz	r0, 8082262 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808225a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808225c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808225e:	6044      	str	r4, [r0, #4]
 8082260:	6084      	str	r4, [r0, #8]
 8082262:	a804      	add	r0, sp, #16
 8082264:	9103      	str	r1, [sp, #12]
 8082266:	f7ff feef 	bl	8082048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808226a:	4b22      	ldr	r3, [pc, #136]	; (80822f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808226c:	2008      	movs	r0, #8
 808226e:	9308      	str	r3, [sp, #32]
 8082270:	f7fd ff15 	bl	808009e <_Znwj>
 8082274:	4604      	mov	r4, r0
 8082276:	b128      	cbz	r0, 8082284 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082278:	9b03      	ldr	r3, [sp, #12]
 808227a:	a904      	add	r1, sp, #16
 808227c:	f840 3b04 	str.w	r3, [r0], #4
 8082280:	f7ff feac 	bl	8081fdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082284:	9500      	str	r5, [sp, #0]
 8082286:	fa5f f38a 	uxtb.w	r3, sl
 808228a:	464a      	mov	r2, r9
 808228c:	4641      	mov	r1, r8
 808228e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082290:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082292:	f7ff fc23 	bl	8081adc <spark_send_event>
 8082296:	b920      	cbnz	r0, 80822a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082298:	9b03      	ldr	r3, [sp, #12]
 808229a:	785b      	ldrb	r3, [r3, #1]
 808229c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80822a0:	b183      	cbz	r3, 80822c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80822a2:	9b03      	ldr	r3, [sp, #12]
 80822a4:	a904      	add	r1, sp, #16
 80822a6:	a806      	add	r0, sp, #24
 80822a8:	9305      	str	r3, [sp, #20]
 80822aa:	f7ff fe97 	bl	8081fdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80822ae:	a905      	add	r1, sp, #20
 80822b0:	4630      	mov	r0, r6
 80822b2:	f7ff fe82 	bl	8081fba <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80822b6:	a806      	add	r0, sp, #24
 80822b8:	f7fe f97c 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80822bc:	a804      	add	r0, sp, #16
 80822be:	f7fe f979 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80822c2:	e013      	b.n	80822ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80822c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80822c8:	a905      	add	r1, sp, #20
 80822ca:	a803      	add	r0, sp, #12
 80822cc:	9205      	str	r2, [sp, #20]
 80822ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80822d2:	f7ff fefd 	bl	80820d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80822d6:	a805      	add	r0, sp, #20
 80822d8:	f7ff fe18 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80822dc:	a805      	add	r0, sp, #20
 80822de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80822e0:	f7ff fe83 	bl	8081fea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80822e4:	a806      	add	r0, sp, #24
 80822e6:	f7fe f965 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80822ea:	e7da      	b.n	80822a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80822ec:	4630      	mov	r0, r6
 80822ee:	b00b      	add	sp, #44	; 0x2c
 80822f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80822f4:	08082469 	.word	0x08082469

080822f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80822f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80822fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80822fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80822fe:	d006      	beq.n	808230e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082300:	2a03      	cmp	r2, #3
 8082302:	d017      	beq.n	8082334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082304:	2a01      	cmp	r2, #1
 8082306:	d122      	bne.n	808234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082308:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808230a:	6003      	str	r3, [r0, #0]
	      break;
 808230c:	e01f      	b.n	808234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808230e:	2018      	movs	r0, #24
 8082310:	680e      	ldr	r6, [r1, #0]
 8082312:	f7fd fec4 	bl	808009e <_Znwj>
 8082316:	4605      	mov	r5, r0
 8082318:	b150      	cbz	r0, 8082330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808231a:	4631      	mov	r1, r6
 808231c:	f7ff fec8 	bl	80820b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082320:	6930      	ldr	r0, [r6, #16]
 8082322:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082326:	b108      	cbz	r0, 808232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082328:	f002 f96e 	bl	8084608 <strdup>
 808232c:	6128      	str	r0, [r5, #16]
 808232e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082330:	6025      	str	r5, [r4, #0]
 8082332:	e00c      	b.n	808234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082334:	6804      	ldr	r4, [r0, #0]
 8082336:	b154      	cbz	r4, 808234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8082338:	f104 0010 	add.w	r0, r4, #16
 808233c:	f7ff fde6 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082340:	4620      	mov	r0, r4
 8082342:	f7fd ff70 	bl	8080226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082346:	2118      	movs	r1, #24
 8082348:	4620      	mov	r0, r4
 808234a:	f000 ffdc 	bl	8083306 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808234e:	2000      	movs	r0, #0
 8082350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082352 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082352:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082354:	2300      	movs	r3, #0
 8082356:	6083      	str	r3, [r0, #8]
 8082358:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808235a:	4604      	mov	r4, r0
 808235c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808235e:	b12b      	cbz	r3, 808236c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082360:	2202      	movs	r2, #2
 8082362:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082364:	68eb      	ldr	r3, [r5, #12]
 8082366:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082368:	68ab      	ldr	r3, [r5, #8]
 808236a:	60a3      	str	r3, [r4, #8]
	}
    }
 808236c:	4620      	mov	r0, r4
 808236e:	bd38      	pop	{r3, r4, r5, pc}

08082370 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082370:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082372:	b570      	push	{r4, r5, r6, lr}
 8082374:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082376:	d006      	beq.n	8082386 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082378:	2a03      	cmp	r2, #3
 808237a:	d011      	beq.n	80823a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808237c:	2a01      	cmp	r2, #1
 808237e:	d118      	bne.n	80823b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082380:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082382:	6003      	str	r3, [r0, #0]
	      break;
 8082384:	e015      	b.n	80823b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082386:	2014      	movs	r0, #20
 8082388:	680e      	ldr	r6, [r1, #0]
 808238a:	f7fd fe88 	bl	808009e <_Znwj>
 808238e:	4605      	mov	r5, r0
 8082390:	b120      	cbz	r0, 808239c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082392:	4631      	mov	r1, r6
 8082394:	f7ff ffdd 	bl	8082352 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082398:	7c33      	ldrb	r3, [r6, #16]
 808239a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808239c:	6025      	str	r5, [r4, #0]
 808239e:	e008      	b.n	80823b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80823a0:	6804      	ldr	r4, [r0, #0]
 80823a2:	b134      	cbz	r4, 80823b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80823a4:	4620      	mov	r0, r4
 80823a6:	f7fd ff3e 	bl	8080226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80823aa:	2114      	movs	r1, #20
 80823ac:	4620      	mov	r0, r4
 80823ae:	f000 ffaa 	bl	8083306 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80823b2:	2000      	movs	r0, #0
 80823b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080823b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80823b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80823ba:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80823bc:	f3bf 8f5f 	dmb	sy
 80823c0:	b087      	sub	sp, #28
 80823c2:	2300      	movs	r3, #0
 80823c4:	e850 6f00 	ldrex	r6, [r0]
 80823c8:	e840 3200 	strex	r2, r3, [r0]
 80823cc:	2a00      	cmp	r2, #0
 80823ce:	d1f9      	bne.n	80823c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80823d0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80823d4:	2e00      	cmp	r6, #0
 80823d6:	d03f      	beq.n	8082458 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80823d8:	4618      	mov	r0, r3
 80823da:	f7ff fb1b 	bl	8081a14 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80823de:	4607      	mov	r7, r0
 80823e0:	b120      	cbz	r0, 80823ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80823e2:	4621      	mov	r1, r4
 80823e4:	4630      	mov	r0, r6
 80823e6:	f7ff fe53 	bl	8082090 <_ZNKSt8functionIFvRKbEEclES1_>
 80823ea:	e02e      	b.n	808244a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80823ec:	4631      	mov	r1, r6
 80823ee:	a801      	add	r0, sp, #4
 80823f0:	f7ff ffaf 	bl	8082352 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80823f4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80823f6:	2010      	movs	r0, #16
 80823f8:	f88d 3014 	strb.w	r3, [sp, #20]
 80823fc:	f7fd fe4f 	bl	808009e <_Znwj>
 8082400:	4605      	mov	r5, r0
 8082402:	b1d0      	cbz	r0, 808243a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082404:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082406:	2014      	movs	r0, #20
 8082408:	f7fd fe49 	bl	808009e <_Znwj>
 808240c:	4604      	mov	r4, r0
 808240e:	b178      	cbz	r0, 8082430 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082410:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082412:	4601      	mov	r1, r0
 8082414:	a801      	add	r0, sp, #4
 8082416:	f7ff fe06 	bl	8082026 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808241a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808241c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808241e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082420:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082422:	9203      	str	r2, [sp, #12]
 8082424:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082426:	60e3      	str	r3, [r4, #12]
 8082428:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808242c:	9204      	str	r2, [sp, #16]
 808242e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082430:	4b0a      	ldr	r3, [pc, #40]	; (808245c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082432:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082434:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082436:	4b0a      	ldr	r3, [pc, #40]	; (8082460 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082438:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808243a:	a801      	add	r0, sp, #4
 808243c:	f7fd fef3 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082440:	2200      	movs	r2, #0
 8082442:	4629      	mov	r1, r5
 8082444:	4807      	ldr	r0, [pc, #28]	; (8082464 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082446:	f7ff faed 	bl	8081a24 <application_thread_invoke>
 808244a:	4630      	mov	r0, r6
 808244c:	f7fd feeb 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082450:	2110      	movs	r1, #16
 8082452:	4630      	mov	r0, r6
 8082454:	f000 ff57 	bl	8083306 <_ZdlPvj>
        }
    }
 8082458:	b007      	add	sp, #28
 808245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808245c:	080820a3 	.word	0x080820a3
 8082460:	08082371 	.word	0x08082371
 8082464:	08081c5b 	.word	0x08081c5b

08082468 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082468:	b530      	push	{r4, r5, lr}
 808246a:	4604      	mov	r4, r0
 808246c:	b085      	sub	sp, #20
 808246e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082470:	4668      	mov	r0, sp
 8082472:	4611      	mov	r1, r2
 8082474:	f7ff fdb9 	bl	8081fea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082478:	b17c      	cbz	r4, 808249a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808247a:	b224      	sxth	r4, r4
 808247c:	4628      	mov	r0, r5
 808247e:	b10d      	cbz	r5, 8082484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082480:	f002 f8c2 	bl	8084608 <strdup>
 8082484:	9002      	str	r0, [sp, #8]
 8082486:	a902      	add	r1, sp, #8
 8082488:	4668      	mov	r0, sp
 808248a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808248e:	f7ff fe1f 	bl	80820d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082492:	a802      	add	r0, sp, #8
 8082494:	f7ff fd3a 	bl	8081f0c <_ZN8particle5ErrorD1Ev>
 8082498:	e01d      	b.n	80824d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808249a:	f04f 0201 	mov.w	r2, #1
 808249e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80824a0:	f88d 4008 	strb.w	r4, [sp, #8]
 80824a4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80824a8:	42a3      	cmp	r3, r4
 80824aa:	d103      	bne.n	80824b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80824ac:	e8c0 2f41 	strexb	r1, r2, [r0]
 80824b0:	2900      	cmp	r1, #0
 80824b2:	d1f7      	bne.n	80824a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80824b4:	d002      	beq.n	80824bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80824b6:	f88d 3008 	strb.w	r3, [sp, #8]
 80824ba:	e00c      	b.n	80824d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80824bc:	f110 010c 	adds.w	r1, r0, #12
 80824c0:	f04f 0301 	mov.w	r3, #1
 80824c4:	bf18      	it	ne
 80824c6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80824c8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80824cc:	3004      	adds	r0, #4
 80824ce:	f800 3c03 	strb.w	r3, [r0, #-3]
 80824d2:	f7ff ff71 	bl	80823b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80824d6:	a801      	add	r0, sp, #4
 80824d8:	f7fe f86c 	bl	80805b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80824dc:	b005      	add	sp, #20
 80824de:	bd30      	pop	{r4, r5, pc}

080824e0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80824e0:	6800      	ldr	r0, [r0, #0]
 80824e2:	f000 b8ce 	b.w	8082682 <_ZN7TwoWire4lockEv>

080824e6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80824e6:	b510      	push	{r4, lr}
 80824e8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80824ea:	6001      	str	r1, [r0, #0]
 80824ec:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 80824ee:	b10a      	cbz	r2, 80824f4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80824f0:	f7ff fff6 	bl	80824e0 <_ZN9FuelGauge4lockEv>
    }
}
 80824f4:	4620      	mov	r0, r4
 80824f6:	bd10      	pop	{r4, pc}

080824f8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 80824f8:	b538      	push	{r3, r4, r5, lr}
 80824fa:	4604      	mov	r4, r0
 80824fc:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80824fe:	f000 fe97 	bl	8083230 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8082502:	462a      	mov	r2, r5
 8082504:	4601      	mov	r1, r0
 8082506:	4620      	mov	r0, r4
 8082508:	f7ff ffed 	bl	80824e6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808250c:	4620      	mov	r0, r4
 808250e:	bd38      	pop	{r3, r4, r5, pc}

08082510 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8082510:	6800      	ldr	r0, [r0, #0]
 8082512:	f000 b8bf 	b.w	8082694 <_ZN7TwoWire6unlockEv>

08082516 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082516:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082518:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808251a:	4604      	mov	r4, r0
{
    if (lock_) {
 808251c:	b10b      	cbz	r3, 8082522 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808251e:	f7ff fff7 	bl	8082510 <_ZN9FuelGauge6unlockEv>
    }
}
 8082522:	4620      	mov	r0, r4
 8082524:	bd10      	pop	{r4, pc}

08082526 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8082526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082528:	4604      	mov	r4, r0
 808252a:	460f      	mov	r7, r1
 808252c:	4616      	mov	r6, r2
 808252e:	461d      	mov	r5, r3
 8082530:	f7ff ffd6 	bl	80824e0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082534:	6820      	ldr	r0, [r4, #0]
 8082536:	2136      	movs	r1, #54	; 0x36
 8082538:	f000 f898 	bl	808266c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808253c:	6820      	ldr	r0, [r4, #0]
 808253e:	4639      	mov	r1, r7
 8082540:	6803      	ldr	r3, [r0, #0]
 8082542:	689b      	ldr	r3, [r3, #8]
 8082544:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082546:	2101      	movs	r1, #1
 8082548:	6820      	ldr	r0, [r4, #0]
 808254a:	f000 f892 	bl	8082672 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808254e:	2202      	movs	r2, #2
 8082550:	2136      	movs	r1, #54	; 0x36
 8082552:	2301      	movs	r3, #1
 8082554:	6820      	ldr	r0, [r4, #0]
 8082556:	f000 f880 	bl	808265a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808255a:	6820      	ldr	r0, [r4, #0]
 808255c:	6803      	ldr	r3, [r0, #0]
 808255e:	695b      	ldr	r3, [r3, #20]
 8082560:	4798      	blx	r3
 8082562:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8082564:	6820      	ldr	r0, [r4, #0]
 8082566:	6803      	ldr	r3, [r0, #0]
 8082568:	695b      	ldr	r3, [r3, #20]
 808256a:	4798      	blx	r3
 808256c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808256e:	4620      	mov	r0, r4
}
 8082570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8082574:	f7ff bfcc 	b.w	8082510 <_ZN9FuelGauge6unlockEv>

08082578 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8082578:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808257a:	2200      	movs	r2, #0
	byte LSB = 0;
 808257c:	ab02      	add	r3, sp, #8
 808257e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8082582:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8082586:	2104      	movs	r1, #4
 8082588:	f10d 0206 	add.w	r2, sp, #6
 808258c:	f7ff ffcb 	bl	8082526 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8082590:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082594:	f001 f956 	bl	8083844 <__aeabi_i2d>
 8082598:	2200      	movs	r2, #0
 808259a:	4b08      	ldr	r3, [pc, #32]	; (80825bc <_ZN9FuelGauge6getSoCEv+0x44>)
 808259c:	f001 f9b8 	bl	8083910 <__aeabi_dmul>
 80825a0:	f001 fbf0 	bl	8083d84 <__aeabi_d2f>
 80825a4:	4604      	mov	r4, r0
 80825a6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80825aa:	f001 fcf5 	bl	8083f98 <__aeabi_i2f>
 80825ae:	4601      	mov	r1, r0
 80825b0:	4620      	mov	r0, r4
 80825b2:	f001 fc3d 	bl	8083e30 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80825b6:	b002      	add	sp, #8
 80825b8:	bd10      	pop	{r4, pc}
 80825ba:	bf00      	nop
 80825bc:	3f700000 	.word	0x3f700000

080825c0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80825c0:	4770      	bx	lr

080825c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80825c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80825c4:	4606      	mov	r6, r0
 80825c6:	4615      	mov	r5, r2
 80825c8:	460c      	mov	r4, r1
 80825ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80825cc:	42bc      	cmp	r4, r7
 80825ce:	d006      	beq.n	80825de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80825d0:	6833      	ldr	r3, [r6, #0]
 80825d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80825d6:	689b      	ldr	r3, [r3, #8]
 80825d8:	4630      	mov	r0, r6
 80825da:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80825dc:	e7f6      	b.n	80825cc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80825de:	4628      	mov	r0, r5
 80825e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080825e2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80825e2:	2200      	movs	r2, #0
 80825e4:	7c00      	ldrb	r0, [r0, #16]
 80825e6:	f7ff b91d 	b.w	8081824 <HAL_I2C_Write_Data>

080825ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80825ea:	2100      	movs	r1, #0
 80825ec:	7c00      	ldrb	r0, [r0, #16]
 80825ee:	f7ff b921 	b.w	8081834 <HAL_I2C_Available_Data>

080825f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80825f2:	2100      	movs	r1, #0
 80825f4:	7c00      	ldrb	r0, [r0, #16]
 80825f6:	f7ff b925 	b.w	8081844 <HAL_I2C_Read_Data>

080825fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80825fa:	2100      	movs	r1, #0
 80825fc:	7c00      	ldrb	r0, [r0, #16]
 80825fe:	f7ff b929 	b.w	8081854 <HAL_I2C_Peek_Data>

08082602 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082602:	2100      	movs	r1, #0
 8082604:	7c00      	ldrb	r0, [r0, #16]
 8082606:	f7ff b92d 	b.w	8081864 <HAL_I2C_Flush_Data>

0808260a <_ZN7TwoWireD0Ev>:
 808260a:	b510      	push	{r4, lr}
 808260c:	4604      	mov	r4, r0
 808260e:	2114      	movs	r1, #20
 8082610:	f000 fe79 	bl	8083306 <_ZdlPvj>
 8082614:	4620      	mov	r0, r4
 8082616:	bd10      	pop	{r4, pc}

08082618 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082618:	b510      	push	{r4, lr}
 808261a:	4604      	mov	r4, r0
 808261c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082622:	60a3      	str	r3, [r4, #8]
 8082624:	4b04      	ldr	r3, [pc, #16]	; (8082638 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082626:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082628:	7420      	strb	r0, [r4, #16]
 808262a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808262c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808262e:	f7ff f929 	bl	8081884 <HAL_I2C_Init>

}
 8082632:	4620      	mov	r0, r4
 8082634:	bd10      	pop	{r4, pc}
 8082636:	bf00      	nop
 8082638:	0808536c 	.word	0x0808536c

0808263c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808263c:	2300      	movs	r3, #0
 808263e:	461a      	mov	r2, r3
 8082640:	4619      	mov	r1, r3
 8082642:	7c00      	ldrb	r0, [r0, #16]
 8082644:	f7ff b8ce 	b.w	80817e4 <HAL_I2C_Begin>

08082648 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082648:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808264a:	2400      	movs	r4, #0
 808264c:	7c00      	ldrb	r0, [r0, #16]
 808264e:	9400      	str	r4, [sp, #0]
 8082650:	f7ff f8d0 	bl	80817f4 <HAL_I2C_Request_Data>
  return result;
}
 8082654:	b2c0      	uxtb	r0, r0
 8082656:	b002      	add	sp, #8
 8082658:	bd10      	pop	{r4, pc}

0808265a <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808265a:	b2db      	uxtb	r3, r3
 808265c:	b2d2      	uxtb	r2, r2
 808265e:	b2c9      	uxtb	r1, r1
 8082660:	f7ff bff2 	b.w	8082648 <_ZN7TwoWire11requestFromEhhh>

08082664 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082664:	2200      	movs	r2, #0
 8082666:	7c00      	ldrb	r0, [r0, #16]
 8082668:	f7ff b8cc 	b.w	8081804 <HAL_I2C_Begin_Transmission>

0808266c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808266c:	b2c9      	uxtb	r1, r1
 808266e:	f7ff bff9 	b.w	8082664 <_ZN7TwoWire17beginTransmissionEh>

08082672 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082672:	2200      	movs	r2, #0
 8082674:	7c00      	ldrb	r0, [r0, #16]
 8082676:	f7ff b8cd 	b.w	8081814 <HAL_I2C_End_Transmission>

0808267a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808267a:	2100      	movs	r1, #0
 808267c:	7c00      	ldrb	r0, [r0, #16]
 808267e:	f7ff b8f9 	b.w	8081874 <HAL_I2C_Is_Enabled>

08082682 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082682:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8082684:	2100      	movs	r1, #0
 8082686:	7c00      	ldrb	r0, [r0, #16]
 8082688:	f7ff f904 	bl	8081894 <HAL_I2C_Acquire>
}
 808268c:	fab0 f080 	clz	r0, r0
 8082690:	0940      	lsrs	r0, r0, #5
 8082692:	bd08      	pop	{r3, pc}

08082694 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082694:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8082696:	2100      	movs	r1, #0
 8082698:	7c00      	ldrb	r0, [r0, #16]
 808269a:	f7ff f903 	bl	80818a4 <HAL_I2C_Release>
}
 808269e:	fab0 f080 	clz	r0, r0
 80826a2:	0940      	lsrs	r0, r0, #5
 80826a4:	bd08      	pop	{r3, pc}

080826a6 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80826a6:	4700      	bx	r0

080826a8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80826a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80826aa:	461c      	mov	r4, r3
 80826ac:	b085      	sub	sp, #20
 80826ae:	460e      	mov	r6, r1
 80826b0:	4617      	mov	r7, r2
 80826b2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80826b4:	f7ff f886 	bl	80817c4 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80826b8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80826ba:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80826bc:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80826c0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80826c2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80826c6:	bfb4      	ite	lt
 80826c8:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80826ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80826ce:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80826d0:	bfa4      	itt	ge
 80826d2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80826d6:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80826d8:	9300      	str	r3, [sp, #0]
 80826da:	4906      	ldr	r1, [pc, #24]	; (80826f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80826dc:	463b      	mov	r3, r7
 80826de:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80826e0:	bfa8      	it	ge
 80826e2:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80826e6:	f7ff f865 	bl	80817b4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80826ea:	fab0 f080 	clz	r0, r0
 80826ee:	0940      	lsrs	r0, r0, #5
 80826f0:	b005      	add	sp, #20
 80826f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80826f4:	080826a7 	.word	0x080826a7

080826f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80826f8:	4770      	bx	lr

080826fa <_ZN9IPAddressD0Ev>:
 80826fa:	b510      	push	{r4, lr}
 80826fc:	4604      	mov	r4, r0
 80826fe:	2108      	movs	r1, #8
 8082700:	f000 fe01 	bl	8083306 <_ZdlPvj>
 8082704:	4620      	mov	r0, r4
 8082706:	bd10      	pop	{r4, pc}

08082708 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808270a:	460f      	mov	r7, r1
 808270c:	f100 0608 	add.w	r6, r0, #8
 8082710:	1d05      	adds	r5, r0, #4
 8082712:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082714:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082718:	220a      	movs	r2, #10
 808271a:	4638      	mov	r0, r7
 808271c:	f000 f94d 	bl	80829ba <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082720:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082722:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082724:	d007      	beq.n	8082736 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082726:	2c00      	cmp	r4, #0
 8082728:	d0f4      	beq.n	8082714 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808272a:	212e      	movs	r1, #46	; 0x2e
 808272c:	4638      	mov	r0, r7
 808272e:	f000 f917 	bl	8082960 <_ZN5Print5printEc>
 8082732:	4404      	add	r4, r0
 8082734:	e7ee      	b.n	8082714 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082736:	4620      	mov	r0, r4
 8082738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808273c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808273c:	4a02      	ldr	r2, [pc, #8]	; (8082748 <_ZN9IPAddressC1Ev+0xc>)
 808273e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082740:	2200      	movs	r2, #0
 8082742:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082744:	4770      	bx	lr
 8082746:	bf00      	nop
 8082748:	08085394 	.word	0x08085394

0808274c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808274c:	4a02      	ldr	r2, [pc, #8]	; (8082758 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808274e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082750:	680a      	ldr	r2, [r1, #0]
 8082752:	6042      	str	r2, [r0, #4]
}
 8082754:	4770      	bx	lr
 8082756:	bf00      	nop
 8082758:	08085394 	.word	0x08085394

0808275c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808275c:	4a01      	ldr	r2, [pc, #4]	; (8082764 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808275e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082760:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082762:	4770      	bx	lr
 8082764:	08085394 	.word	0x08085394

08082768 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082768:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808276a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808276e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082772:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082776:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808277a:	6041      	str	r1, [r0, #4]
 808277c:	bd10      	pop	{r4, pc}
	...

08082780 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082782:	4d04      	ldr	r5, [pc, #16]	; (8082794 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082784:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082786:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808278a:	9500      	str	r5, [sp, #0]
 808278c:	f7ff ffec 	bl	8082768 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082790:	b003      	add	sp, #12
 8082792:	bd30      	pop	{r4, r5, pc}
 8082794:	08085394 	.word	0x08085394

08082798 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082798:	4a01      	ldr	r2, [pc, #4]	; (80827a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808279a:	4b02      	ldr	r3, [pc, #8]	; (80827a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808279c:	601a      	str	r2, [r3, #0]
 808279e:	4770      	bx	lr
 80827a0:	08085416 	.word	0x08085416
 80827a4:	20000264 	.word	0x20000264

080827a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80827a8:	2300      	movs	r3, #0
 80827aa:	461a      	mov	r2, r3
 80827ac:	6840      	ldr	r0, [r0, #4]
 80827ae:	f7ff b9bd 	b.w	8081b2c <network_connect>

080827b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80827b2:	2200      	movs	r2, #0
 80827b4:	2102      	movs	r1, #2
 80827b6:	6840      	ldr	r0, [r0, #4]
 80827b8:	f7ff b9c8 	b.w	8081b4c <network_disconnect>

080827bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80827bc:	2200      	movs	r2, #0
 80827be:	4611      	mov	r1, r2
 80827c0:	6840      	ldr	r0, [r0, #4]
 80827c2:	f7ff b9bb 	b.w	8081b3c <network_connecting>

080827c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80827c6:	2200      	movs	r2, #0
 80827c8:	4611      	mov	r1, r2
 80827ca:	6840      	ldr	r0, [r0, #4]
 80827cc:	f7ff b9c6 	b.w	8081b5c <network_ready>

080827d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80827d0:	2300      	movs	r3, #0
 80827d2:	461a      	mov	r2, r3
 80827d4:	4619      	mov	r1, r3
 80827d6:	6840      	ldr	r0, [r0, #4]
 80827d8:	f7ff b9c8 	b.w	8081b6c <network_on>

080827dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80827dc:	2300      	movs	r3, #0
 80827de:	461a      	mov	r2, r3
 80827e0:	4619      	mov	r1, r3
 80827e2:	6840      	ldr	r0, [r0, #4]
 80827e4:	f7ff b9ca 	b.w	8081b7c <network_off>

080827e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80827e8:	2200      	movs	r2, #0
 80827ea:	f081 0101 	eor.w	r1, r1, #1
 80827ee:	6840      	ldr	r0, [r0, #4]
 80827f0:	f7ff b9cc 	b.w	8081b8c <network_listen>

080827f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80827f4:	2200      	movs	r2, #0
 80827f6:	6840      	ldr	r0, [r0, #4]
 80827f8:	f7ff b9d8 	b.w	8081bac <network_set_listen_timeout>

080827fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80827fc:	2200      	movs	r2, #0
 80827fe:	4611      	mov	r1, r2
 8082800:	6840      	ldr	r0, [r0, #4]
 8082802:	f7ff b9db 	b.w	8081bbc <network_get_listen_timeout>

08082806 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082806:	2200      	movs	r2, #0
 8082808:	4611      	mov	r1, r2
 808280a:	6840      	ldr	r0, [r0, #4]
 808280c:	f7ff b9c6 	b.w	8081b9c <network_listening>

08082810 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082812:	4617      	mov	r7, r2
 8082814:	b087      	sub	sp, #28
 8082816:	4605      	mov	r5, r0
    IPAddress addr;
 8082818:	a804      	add	r0, sp, #16
 808281a:	f7ff ff8f 	bl	808273c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808281e:	2600      	movs	r6, #0
 8082820:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082822:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082824:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082828:	f001 ff09 	bl	808463e <strlen>
 808282c:	4b0a      	ldr	r3, [pc, #40]	; (8082858 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808282e:	9600      	str	r6, [sp, #0]
 8082830:	b281      	uxth	r1, r0
 8082832:	685b      	ldr	r3, [r3, #4]
 8082834:	4622      	mov	r2, r4
 8082836:	4638      	mov	r0, r7
 8082838:	f7fe fef4 	bl	8081624 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808283c:	b120      	cbz	r0, 8082848 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808283e:	4631      	mov	r1, r6
 8082840:	4628      	mov	r0, r5
 8082842:	f7ff ff8b 	bl	808275c <_ZN9IPAddressC1Em>
 8082846:	e003      	b.n	8082850 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082848:	4621      	mov	r1, r4
 808284a:	4628      	mov	r0, r5
 808284c:	f7ff ff7e 	bl	808274c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082850:	4628      	mov	r0, r5
 8082852:	b007      	add	sp, #28
 8082854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082856:	bf00      	nop
 8082858:	20000234 	.word	0x20000234

0808285c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808285c:	4b02      	ldr	r3, [pc, #8]	; (8082868 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808285e:	4a03      	ldr	r2, [pc, #12]	; (808286c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082860:	601a      	str	r2, [r3, #0]
 8082862:	2200      	movs	r2, #0
 8082864:	605a      	str	r2, [r3, #4]
 8082866:	4770      	bx	lr
 8082868:	20000268 	.word	0x20000268
 808286c:	08085488 	.word	0x08085488

08082870 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082870:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082872:	f000 fcdd 	bl	8083230 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8082876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808287a:	f7ff bf02 	b.w	8082682 <_ZN7TwoWire4lockEv>

0808287e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808287e:	b510      	push	{r4, lr}
 8082880:	4604      	mov	r4, r0
    lock_(_lock)
 8082882:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8082884:	b109      	cbz	r1, 808288a <_ZN4PMICC1Eb+0xc>
        lock();
 8082886:	f7ff fff3 	bl	8082870 <_ZN4PMIC4lockEv>
    }
}
 808288a:	4620      	mov	r0, r4
 808288c:	bd10      	pop	{r4, pc}

0808288e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808288e:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082890:	f000 fcce 	bl	8083230 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8082894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082898:	f7ff befc 	b.w	8082694 <_ZN7TwoWire6unlockEv>

0808289c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808289c:	b510      	push	{r4, lr}
{
    if (lock_) {
 808289e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80828a0:	4604      	mov	r4, r0
{
    if (lock_) {
 80828a2:	b10b      	cbz	r3, 80828a8 <_ZN4PMICD1Ev+0xc>
        unlock();
 80828a4:	f7ff fff3 	bl	808288e <_ZN4PMIC6unlockEv>
    }
}
 80828a8:	4620      	mov	r0, r4
 80828aa:	bd10      	pop	{r4, pc}

080828ac <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80828ac:	b510      	push	{r4, lr}
 80828ae:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80828b0:	6800      	ldr	r0, [r0, #0]
 80828b2:	f7ff ffec 	bl	808288e <_ZN4PMIC6unlockEv>
 80828b6:	4620      	mov	r0, r4
 80828b8:	bd10      	pop	{r4, pc}

080828ba <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80828ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80828bc:	ac02      	add	r4, sp, #8
 80828be:	460d      	mov	r5, r1
 80828c0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80828c4:	f7ff ffd4 	bl	8082870 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828c8:	f000 fcb2 	bl	8083230 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80828cc:	216b      	movs	r1, #107	; 0x6b
 80828ce:	f7ff fecd 	bl	808266c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828d2:	f000 fcad 	bl	8083230 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80828d6:	6803      	ldr	r3, [r0, #0]
 80828d8:	4629      	mov	r1, r5
 80828da:	689b      	ldr	r3, [r3, #8]
 80828dc:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828de:	f000 fca7 	bl	8083230 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80828e2:	2101      	movs	r1, #1
 80828e4:	f7ff fec5 	bl	8082672 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828e8:	f000 fca2 	bl	8083230 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80828ec:	2301      	movs	r3, #1
 80828ee:	461a      	mov	r2, r3
 80828f0:	216b      	movs	r1, #107	; 0x6b
 80828f2:	f7ff feb2 	bl	808265a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828f6:	f000 fc9b 	bl	8083230 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80828fa:	6803      	ldr	r3, [r0, #0]
 80828fc:	695b      	ldr	r3, [r3, #20]
 80828fe:	4798      	blx	r3
 8082900:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8082902:	4620      	mov	r0, r4
 8082904:	f7ff ffd2 	bl	80828ac <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8082908:	b2e8      	uxtb	r0, r5
 808290a:	b003      	add	sp, #12
 808290c:	bd30      	pop	{r4, r5, pc}

0808290e <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808290e:	2108      	movs	r1, #8
 8082910:	f7ff bfd3 	b.w	80828ba <_ZN4PMIC12readRegisterEh>

08082914 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082916:	4606      	mov	r6, r0
 8082918:	460d      	mov	r5, r1
 808291a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808291c:	2400      	movs	r4, #0
  while (size--) {
 808291e:	42bd      	cmp	r5, r7
 8082920:	d00c      	beq.n	808293c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082922:	6833      	ldr	r3, [r6, #0]
 8082924:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082928:	689b      	ldr	r3, [r3, #8]
 808292a:	4630      	mov	r0, r6
 808292c:	4798      	blx	r3
     if (chunk>=0)
 808292e:	2800      	cmp	r0, #0
 8082930:	db01      	blt.n	8082936 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082932:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082934:	e7f3      	b.n	808291e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082936:	2c00      	cmp	r4, #0
 8082938:	bf08      	it	eq
 808293a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808293c:	4620      	mov	r0, r4
 808293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082940 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082940:	b570      	push	{r4, r5, r6, lr}
 8082942:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082944:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082946:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082948:	b149      	cbz	r1, 808295e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808294a:	f001 fe78 	bl	808463e <strlen>
 808294e:	682b      	ldr	r3, [r5, #0]
 8082950:	4602      	mov	r2, r0
 8082952:	4621      	mov	r1, r4
 8082954:	4628      	mov	r0, r5
    }
 8082956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808295a:	68db      	ldr	r3, [r3, #12]
 808295c:	4718      	bx	r3
    }
 808295e:	bd70      	pop	{r4, r5, r6, pc}

08082960 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082960:	6803      	ldr	r3, [r0, #0]
 8082962:	689b      	ldr	r3, [r3, #8]
 8082964:	4718      	bx	r3

08082966 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082966:	2a01      	cmp	r2, #1
 8082968:	bf98      	it	ls
 808296a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808296c:	b530      	push	{r4, r5, lr}
 808296e:	460b      	mov	r3, r1
 8082970:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082972:	2100      	movs	r1, #0
 8082974:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082978:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808297c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082980:	fb05 3312 	mls	r3, r5, r2, r3
 8082984:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082986:	2b09      	cmp	r3, #9
 8082988:	bf94      	ite	ls
 808298a:	3330      	addls	r3, #48	; 0x30
 808298c:	3337      	addhi	r3, #55	; 0x37
 808298e:	b2db      	uxtb	r3, r3
 8082990:	4621      	mov	r1, r4
 8082992:	f804 3901 	strb.w	r3, [r4], #-1
 8082996:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082998:	2d00      	cmp	r5, #0
 808299a:	d1ef      	bne.n	808297c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808299c:	f7ff ffd0 	bl	8082940 <_ZN5Print5writeEPKc>
}
 80829a0:	b00b      	add	sp, #44	; 0x2c
 80829a2:	bd30      	pop	{r4, r5, pc}

080829a4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80829a4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80829a6:	b922      	cbnz	r2, 80829b2 <_ZN5Print5printEmi+0xe>
 80829a8:	6803      	ldr	r3, [r0, #0]
 80829aa:	b2c9      	uxtb	r1, r1
 80829ac:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80829ae:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80829b0:	4718      	bx	r3
  else return printNumber(n, base);
 80829b2:	b2d2      	uxtb	r2, r2
}
 80829b4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80829b6:	f7ff bfd6 	b.w	8082966 <_ZN5Print11printNumberEmh>

080829ba <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80829ba:	f7ff bff3 	b.w	80829a4 <_ZN5Print5printEmi>

080829be <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80829be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80829c2:	4607      	mov	r7, r0
 80829c4:	460e      	mov	r6, r1
  if (base == 0) {
 80829c6:	4615      	mov	r5, r2
 80829c8:	b92a      	cbnz	r2, 80829d6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80829ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80829ce:	6803      	ldr	r3, [r0, #0]
 80829d0:	b2c9      	uxtb	r1, r1
 80829d2:	689b      	ldr	r3, [r3, #8]
 80829d4:	4718      	bx	r3
  } else if (base == 10) {
 80829d6:	2a0a      	cmp	r2, #10
 80829d8:	d102      	bne.n	80829e0 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80829da:	2900      	cmp	r1, #0
 80829dc:	da01      	bge.n	80829e2 <_ZN5Print5printEli+0x24>
 80829de:	e004      	b.n	80829ea <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80829e0:	b2d2      	uxtb	r2, r2
  }
}
 80829e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80829e6:	f7ff bfbe 	b.w	8082966 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80829ea:	212d      	movs	r1, #45	; 0x2d
 80829ec:	f7ff ffb8 	bl	8082960 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80829f0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80829f2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80829f4:	4271      	negs	r1, r6
 80829f6:	4638      	mov	r0, r7
 80829f8:	f7ff ffb5 	bl	8082966 <_ZN5Print11printNumberEmh>
 80829fc:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80829fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082a02 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8082a02:	f7ff bfdc 	b.w	80829be <_ZN5Print5printEli>

08082a06 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082a06:	b510      	push	{r4, lr}
 8082a08:	4604      	mov	r4, r0
 8082a0a:	f7fd fc0c 	bl	8080226 <_ZNSt14_Function_baseD1Ev>
 8082a0e:	4620      	mov	r0, r4
 8082a10:	bd10      	pop	{r4, pc}
	...

08082a14 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a14:	4803      	ldr	r0, [pc, #12]	; (8082a24 <_GLOBAL__sub_I_RGB+0x10>)
 8082a16:	2300      	movs	r3, #0
 8082a18:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082a1a:	4a03      	ldr	r2, [pc, #12]	; (8082a28 <_GLOBAL__sub_I_RGB+0x14>)
 8082a1c:	4903      	ldr	r1, [pc, #12]	; (8082a2c <_GLOBAL__sub_I_RGB+0x18>)
 8082a1e:	f000 bc6d 	b.w	80832fc <__aeabi_atexit>
 8082a22:	bf00      	nop
 8082a24:	20000270 	.word	0x20000270
 8082a28:	20000164 	.word	0x20000164
 8082a2c:	08082a07 	.word	0x08082a07

08082a30 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082a30:	4770      	bx	lr

08082a32 <_ZN8SPIClassD0Ev>:
 8082a32:	b510      	push	{r4, lr}
 8082a34:	4604      	mov	r4, r0
 8082a36:	2110      	movs	r1, #16
 8082a38:	f000 fc65 	bl	8083306 <_ZdlPvj>
 8082a3c:	4620      	mov	r0, r4
 8082a3e:	bd10      	pop	{r4, pc}

08082a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082a40:	b570      	push	{r4, r5, r6, lr}
 8082a42:	4604      	mov	r4, r0
 8082a44:	460e      	mov	r6, r1
 8082a46:	4b07      	ldr	r3, [pc, #28]	; (8082a64 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082a48:	2500      	movs	r5, #0
 8082a4a:	6003      	str	r3, [r0, #0]
 8082a4c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082a50:	f7fe fe30 	bl	80816b4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082a54:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082a56:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082a58:	f7fe ff2c 	bl	80818b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082a5c:	60a5      	str	r5, [r4, #8]
}
 8082a5e:	4620      	mov	r0, r4
 8082a60:	bd70      	pop	{r4, r5, r6, pc}
 8082a62:	bf00      	nop
 8082a64:	080854bc 	.word	0x080854bc

08082a68 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082a68:	7900      	ldrb	r0, [r0, #4]
 8082a6a:	f7fe bf2b 	b.w	80818c4 <HAL_SPI_Is_Enabled>

08082a6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082a6e:	b510      	push	{r4, lr}
 8082a70:	4604      	mov	r4, r0
{
	free(buffer);
 8082a72:	6800      	ldr	r0, [r0, #0]
 8082a74:	f7ff f8b2 	bl	8081bdc <free>
}
 8082a78:	4620      	mov	r0, r4
 8082a7a:	bd10      	pop	{r4, pc}

08082a7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082a7c:	b510      	push	{r4, lr}
 8082a7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082a80:	6800      	ldr	r0, [r0, #0]
 8082a82:	b108      	cbz	r0, 8082a88 <_ZN6String10invalidateEv+0xc>
 8082a84:	f7ff f8aa 	bl	8081bdc <free>
	buffer = NULL;
 8082a88:	2300      	movs	r3, #0
 8082a8a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082a8c:	60a3      	str	r3, [r4, #8]
 8082a8e:	6063      	str	r3, [r4, #4]
 8082a90:	bd10      	pop	{r4, pc}

08082a92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082a92:	b538      	push	{r3, r4, r5, lr}
 8082a94:	4604      	mov	r4, r0
 8082a96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082a98:	6800      	ldr	r0, [r0, #0]
 8082a9a:	3101      	adds	r1, #1
 8082a9c:	f7ff f8a6 	bl	8081bec <realloc>
	if (newbuffer) {
 8082aa0:	b110      	cbz	r0, 8082aa8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082aa2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082aa6:	2001      	movs	r0, #1
	}
	return 0;
}
 8082aa8:	bd38      	pop	{r3, r4, r5, pc}

08082aaa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082aaa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082aac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082aae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082ab0:	b113      	cbz	r3, 8082ab8 <_ZN6String7reserveEj+0xe>
 8082ab2:	6843      	ldr	r3, [r0, #4]
 8082ab4:	428b      	cmp	r3, r1
 8082ab6:	d207      	bcs.n	8082ac8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082ab8:	4620      	mov	r0, r4
 8082aba:	f7ff ffea 	bl	8082a92 <_ZN6String12changeBufferEj>
 8082abe:	b120      	cbz	r0, 8082aca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082ac0:	68a3      	ldr	r3, [r4, #8]
 8082ac2:	b90b      	cbnz	r3, 8082ac8 <_ZN6String7reserveEj+0x1e>
 8082ac4:	6822      	ldr	r2, [r4, #0]
 8082ac6:	7013      	strb	r3, [r2, #0]
 8082ac8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082aca:	bd10      	pop	{r4, pc}

08082acc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082acc:	b570      	push	{r4, r5, r6, lr}
 8082ace:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082ad0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082ad2:	4604      	mov	r4, r0
 8082ad4:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082ad6:	f7ff ffe8 	bl	8082aaa <_ZN6String7reserveEj>
 8082ada:	b918      	cbnz	r0, 8082ae4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082adc:	4620      	mov	r0, r4
 8082ade:	f7ff ffcd 	bl	8082a7c <_ZN6String10invalidateEv>
		return *this;
 8082ae2:	e009      	b.n	8082af8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082ae4:	462a      	mov	r2, r5
 8082ae6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082ae8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082aea:	6820      	ldr	r0, [r4, #0]
 8082aec:	f001 fd2e 	bl	808454c <memcpy>
	buffer[len] = 0;
 8082af0:	6822      	ldr	r2, [r4, #0]
 8082af2:	68a3      	ldr	r3, [r4, #8]
 8082af4:	2100      	movs	r1, #0
 8082af6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082af8:	4620      	mov	r0, r4
 8082afa:	bd70      	pop	{r4, r5, r6, pc}

08082afc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082afc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082afe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082b00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082b02:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082b04:	6043      	str	r3, [r0, #4]
	len = 0;
 8082b06:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082b08:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082b0a:	460d      	mov	r5, r1
 8082b0c:	b139      	cbz	r1, 8082b1e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082b0e:	4608      	mov	r0, r1
 8082b10:	f001 fd95 	bl	808463e <strlen>
 8082b14:	4629      	mov	r1, r5
 8082b16:	4602      	mov	r2, r0
 8082b18:	4620      	mov	r0, r4
 8082b1a:	f7ff ffd7 	bl	8082acc <_ZN6String4copyEPKcj>
}
 8082b1e:	4620      	mov	r0, r4
 8082b20:	bd38      	pop	{r3, r4, r5, pc}

08082b22 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082b22:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082b24:	b510      	push	{r4, lr}
 8082b26:	460b      	mov	r3, r1
 8082b28:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082b2a:	d007      	beq.n	8082b3c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082b2c:	6809      	ldr	r1, [r1, #0]
 8082b2e:	b119      	cbz	r1, 8082b38 <_ZN6StringaSERKS_+0x16>
 8082b30:	689a      	ldr	r2, [r3, #8]
 8082b32:	f7ff ffcb 	bl	8082acc <_ZN6String4copyEPKcj>
 8082b36:	e001      	b.n	8082b3c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082b38:	f7ff ffa0 	bl	8082a7c <_ZN6String10invalidateEv>

	return *this;
}
 8082b3c:	4620      	mov	r0, r4
 8082b3e:	bd10      	pop	{r4, pc}

08082b40 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082b40:	b510      	push	{r4, lr}
 8082b42:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082b44:	2300      	movs	r3, #0
 8082b46:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082b48:	6043      	str	r3, [r0, #4]
	len = 0;
 8082b4a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082b4c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082b4e:	f7ff ffe8 	bl	8082b22 <_ZN6StringaSERKS_>
}
 8082b52:	4620      	mov	r0, r4
 8082b54:	bd10      	pop	{r4, pc}

08082b56 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082b56:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082b58:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082b5a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082b5c:	b912      	cbnz	r2, 8082b64 <_ZNK6String6equalsEPKc+0xe>
 8082b5e:	b919      	cbnz	r1, 8082b68 <_ZNK6String6equalsEPKc+0x12>
 8082b60:	2001      	movs	r0, #1
 8082b62:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082b64:	b911      	cbnz	r1, 8082b6c <_ZNK6String6equalsEPKc+0x16>
 8082b66:	6803      	ldr	r3, [r0, #0]
 8082b68:	7818      	ldrb	r0, [r3, #0]
 8082b6a:	e002      	b.n	8082b72 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082b6c:	6800      	ldr	r0, [r0, #0]
 8082b6e:	f001 fd38 	bl	80845e2 <strcmp>
 8082b72:	fab0 f080 	clz	r0, r0
 8082b76:	0940      	lsrs	r0, r0, #5
}
 8082b78:	bd08      	pop	{r3, pc}

08082b7a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082b7a:	b570      	push	{r4, r5, r6, lr}
 8082b7c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082b7e:	b19a      	cbz	r2, 8082ba8 <_ZNK6String8getBytesEPhjj+0x2e>
 8082b80:	b191      	cbz	r1, 8082ba8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082b82:	6885      	ldr	r5, [r0, #8]
 8082b84:	429d      	cmp	r5, r3
 8082b86:	d802      	bhi.n	8082b8e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082b88:	2300      	movs	r3, #0
 8082b8a:	700b      	strb	r3, [r1, #0]
		return;
 8082b8c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082b8e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082b90:	1aed      	subs	r5, r5, r3
 8082b92:	42ac      	cmp	r4, r5
 8082b94:	bf28      	it	cs
 8082b96:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082b98:	6801      	ldr	r1, [r0, #0]
 8082b9a:	4622      	mov	r2, r4
 8082b9c:	4419      	add	r1, r3
 8082b9e:	4630      	mov	r0, r6
 8082ba0:	f001 fd6a 	bl	8084678 <strncpy>
	buf[n] = 0;
 8082ba4:	2300      	movs	r3, #0
 8082ba6:	5533      	strb	r3, [r6, r4]
 8082ba8:	bd70      	pop	{r4, r5, r6, pc}

08082baa <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082baa:	4601      	mov	r1, r0
 8082bac:	2200      	movs	r2, #0
 8082bae:	208c      	movs	r0, #140	; 0x8c
 8082bb0:	f7fe bd98 	b.w	80816e4 <HAL_Core_System_Reset_Ex>

08082bb4 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8082bb4:	2000      	movs	r0, #0
 8082bb6:	f7ff bff8 	b.w	8082baa <_ZN11SystemClass5resetEm>
	...

08082bbc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082bbc:	b510      	push	{r4, lr}
 8082bbe:	4604      	mov	r4, r0
 8082bc0:	4608      	mov	r0, r1
 8082bc2:	4611      	mov	r1, r2
 8082bc4:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082bc6:	2300      	movs	r3, #0
 8082bc8:	f7fe ff14 	bl	80819f4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082bcc:	4b06      	ldr	r3, [pc, #24]	; (8082be8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082bce:	2200      	movs	r2, #0
 8082bd0:	701a      	strb	r2, [r3, #0]
 8082bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082bd6:	8058      	strh	r0, [r3, #2]
 8082bd8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082bda:	681a      	ldr	r2, [r3, #0]
 8082bdc:	889b      	ldrh	r3, [r3, #4]
 8082bde:	6022      	str	r2, [r4, #0]
 8082be0:	80a3      	strh	r3, [r4, #4]
}
 8082be2:	4620      	mov	r0, r4
 8082be4:	bd10      	pop	{r4, pc}
 8082be6:	bf00      	nop
 8082be8:	20000280 	.word	0x20000280

08082bec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082bf0:	4b03      	ldr	r3, [pc, #12]	; (8082c00 <_GLOBAL__sub_I_System+0x14>)
 8082bf2:	2000      	movs	r0, #0
 8082bf4:	7018      	strb	r0, [r3, #0]
 8082bf6:	8058      	strh	r0, [r3, #2]
 8082bf8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082bfa:	f7fe beeb 	b.w	80819d4 <set_system_mode>
 8082bfe:	bf00      	nop
 8082c00:	20000280 	.word	0x20000280

08082c04 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082c06:	4b14      	ldr	r3, [pc, #80]	; (8082c58 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082c08:	4f14      	ldr	r7, [pc, #80]	; (8082c5c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082c0a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082c0c:	4b14      	ldr	r3, [pc, #80]	; (8082c60 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082c0e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082c10:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082c12:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082c14:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082c16:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082c18:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082c1a:	d01b      	beq.n	8082c54 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082c1c:	a80a      	add	r0, sp, #40	; 0x28
 8082c1e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082c22:	f001 fb9b 	bl	808435c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082c26:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082c28:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082c2a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082c2c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082c30:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082c3a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082c3e:	4c09      	ldr	r4, [pc, #36]	; (8082c64 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082c40:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082c44:	ad01      	add	r5, sp, #4
 8082c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082c4e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082c50:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082c54:	b00b      	add	sp, #44	; 0x2c
 8082c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082c58:	200002b8 	.word	0x200002b8
 8082c5c:	200002b4 	.word	0x200002b4
 8082c60:	200002b0 	.word	0x200002b0
 8082c64:	20000288 	.word	0x20000288

08082c68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082c68:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082c6a:	2000      	movs	r0, #0
 8082c6c:	f7fe ff4e 	bl	8081b0c <spark_sync_time_pending>
 8082c70:	b128      	cbz	r0, 8082c7e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082c72:	f7fe ff23 	bl	8081abc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082c76:	f080 0001 	eor.w	r0, r0, #1
 8082c7a:	b2c0      	uxtb	r0, r0
 8082c7c:	bd08      	pop	{r3, pc}
 8082c7e:	2001      	movs	r0, #1
    }
 8082c80:	bd08      	pop	{r3, pc}

08082c82 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082c82:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082c84:	2000      	movs	r0, #0
 8082c86:	f7fe fd55 	bl	8081734 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082c8a:	4604      	mov	r4, r0
 8082c8c:	b968      	cbnz	r0, 8082caa <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082c8e:	f7fe fe99 	bl	80819c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082c92:	2801      	cmp	r0, #1
 8082c94:	d10b      	bne.n	8082cae <_ZN9TimeClass7isValidEv+0x2c>
 8082c96:	4620      	mov	r0, r4
 8082c98:	f7fe fecc 	bl	8081a34 <system_thread_get_state>
 8082c9c:	b938      	cbnz	r0, 8082cae <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082c9e:	f7ff ffe3 	bl	8082c68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082ca2:	b930      	cbnz	r0, 8082cb2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082ca4:	f7fe fef2 	bl	8081a8c <spark_process>
 8082ca8:	e7f9      	b.n	8082c9e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082caa:	2001      	movs	r0, #1
 8082cac:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082cae:	2000      	movs	r0, #0
 8082cb0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082cb2:	f7ff ffd9 	bl	8082c68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082cb6:	2000      	movs	r0, #0
 8082cb8:	f7fe fd3c 	bl	8081734 <HAL_RTC_Time_Is_Valid>
 8082cbc:	3000      	adds	r0, #0
 8082cbe:	bf18      	it	ne
 8082cc0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082cc2:	bd10      	pop	{r4, pc}

08082cc4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082cc4:	b508      	push	{r3, lr}
    (void)isValid();
 8082cc6:	f7ff ffdc 	bl	8082c82 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082cce:	f7fe bd29 	b.w	8081724 <HAL_RTC_Get_UnixTime>
	...

08082cd4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082cd4:	b508      	push	{r3, lr}
	return hour(now());
 8082cd6:	f7ff fff5 	bl	8082cc4 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cda:	f7ff ff93 	bl	8082c04 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082cde:	4b01      	ldr	r3, [pc, #4]	; (8082ce4 <_ZN9TimeClass4hourEv+0x10>)
 8082ce0:	6898      	ldr	r0, [r3, #8]
 8082ce2:	bd08      	pop	{r3, pc}
 8082ce4:	20000288 	.word	0x20000288

08082ce8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082ce8:	b508      	push	{r3, lr}
	return minute(now());
 8082cea:	f7ff ffeb 	bl	8082cc4 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082cee:	f7ff ff89 	bl	8082c04 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082cf2:	4b01      	ldr	r3, [pc, #4]	; (8082cf8 <_ZN9TimeClass6minuteEv+0x10>)
 8082cf4:	6858      	ldr	r0, [r3, #4]
 8082cf6:	bd08      	pop	{r3, pc}
 8082cf8:	20000288 	.word	0x20000288

08082cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082cfc:	4b02      	ldr	r3, [pc, #8]	; (8082d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082cfe:	681a      	ldr	r2, [r3, #0]
 8082d00:	4b02      	ldr	r3, [pc, #8]	; (8082d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082d02:	601a      	str	r2, [r3, #0]
 8082d04:	4770      	bx	lr
 8082d06:	bf00      	nop
 8082d08:	200000ac 	.word	0x200000ac
 8082d0c:	200002ac 	.word	0x200002ac

08082d10 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082d10:	4770      	bx	lr

08082d12 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082d12:	7441      	strb	r1, [r0, #17]
 8082d14:	4770      	bx	lr

08082d16 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8082d16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082d18:	7c00      	ldrb	r0, [r0, #16]
 8082d1a:	f7fe fe13 	bl	8081944 <HAL_USART_Available_Data_For_Write>
}
 8082d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082d22:	bd08      	pop	{r3, pc}

08082d24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082d24:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8082d26:	7c00      	ldrb	r0, [r0, #16]
 8082d28:	f7fe fde4 	bl	80818f4 <HAL_USART_Available_Data>
}
 8082d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082d30:	bd08      	pop	{r3, pc}

08082d32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082d32:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082d34:	7c00      	ldrb	r0, [r0, #16]
 8082d36:	f7fe fded 	bl	8081914 <HAL_USART_Peek_Data>
}
 8082d3a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082d3e:	bf28      	it	cs
 8082d40:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082d44:	bd08      	pop	{r3, pc}

08082d46 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082d46:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082d48:	7c00      	ldrb	r0, [r0, #16]
 8082d4a:	f7fe fddb 	bl	8081904 <HAL_USART_Read_Data>
}
 8082d4e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082d52:	bf28      	it	cs
 8082d54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082d58:	bd08      	pop	{r3, pc}

08082d5a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082d5a:	7c00      	ldrb	r0, [r0, #16]
 8082d5c:	f7fe bde2 	b.w	8081924 <HAL_USART_Flush_Data>

08082d60 <_ZN11USARTSerialD0Ev>:
 8082d60:	b510      	push	{r4, lr}
 8082d62:	4604      	mov	r4, r0
 8082d64:	2114      	movs	r1, #20
 8082d66:	f000 face 	bl	8083306 <_ZdlPvj>
 8082d6a:	4620      	mov	r0, r4
 8082d6c:	bd10      	pop	{r4, pc}

08082d6e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082d6e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d70:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082d72:	4604      	mov	r4, r0
 8082d74:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082d76:	b925      	cbnz	r5, 8082d82 <_ZN11USARTSerial5writeEh+0x14>
 8082d78:	7c00      	ldrb	r0, [r0, #16]
 8082d7a:	f7fe fde3 	bl	8081944 <HAL_USART_Available_Data_For_Write>
 8082d7e:	2800      	cmp	r0, #0
 8082d80:	dd05      	ble.n	8082d8e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d82:	4631      	mov	r1, r6
 8082d84:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082d8a:	f7fe bdab 	b.w	80818e4 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082d8e:	4628      	mov	r0, r5
 8082d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08082d94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082d94:	b510      	push	{r4, lr}
 8082d96:	4604      	mov	r4, r0
 8082d98:	4608      	mov	r0, r1
 8082d9a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082d9c:	2200      	movs	r2, #0
 8082d9e:	6062      	str	r2, [r4, #4]
 8082da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082da4:	60a2      	str	r2, [r4, #8]
 8082da6:	4a05      	ldr	r2, [pc, #20]	; (8082dbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082da8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082daa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082dac:	2201      	movs	r2, #1
 8082dae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082db0:	461a      	mov	r2, r3
 8082db2:	f7fe fd8f 	bl	80818d4 <HAL_USART_Init>
}
 8082db6:	4620      	mov	r0, r4
 8082db8:	bd10      	pop	{r4, pc}
 8082dba:	bf00      	nop
 8082dbc:	080854f4 	.word	0x080854f4

08082dc0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082dc0:	7c00      	ldrb	r0, [r0, #16]
 8082dc2:	f7fe bdb7 	b.w	8081934 <HAL_USART_Is_Enabled>
	...

08082dc8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082dc8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082dca:	4d0c      	ldr	r5, [pc, #48]	; (8082dfc <_Z22__fetch_global_Serial1v+0x34>)
 8082dcc:	6829      	ldr	r1, [r5, #0]
 8082dce:	f011 0401 	ands.w	r4, r1, #1
 8082dd2:	d111      	bne.n	8082df8 <_Z22__fetch_global_Serial1v+0x30>
 8082dd4:	4628      	mov	r0, r5
 8082dd6:	f7fd f966 	bl	80800a6 <__cxa_guard_acquire>
 8082dda:	b168      	cbz	r0, 8082df8 <_Z22__fetch_global_Serial1v+0x30>
 8082ddc:	4a08      	ldr	r2, [pc, #32]	; (8082e00 <_Z22__fetch_global_Serial1v+0x38>)
 8082dde:	4621      	mov	r1, r4
 8082de0:	4b08      	ldr	r3, [pc, #32]	; (8082e04 <_Z22__fetch_global_Serial1v+0x3c>)
 8082de2:	4809      	ldr	r0, [pc, #36]	; (8082e08 <_Z22__fetch_global_Serial1v+0x40>)
 8082de4:	f7ff ffd6 	bl	8082d94 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082de8:	4628      	mov	r0, r5
 8082dea:	f7fd f961 	bl	80800b0 <__cxa_guard_release>
 8082dee:	4a07      	ldr	r2, [pc, #28]	; (8082e0c <_Z22__fetch_global_Serial1v+0x44>)
 8082df0:	4907      	ldr	r1, [pc, #28]	; (8082e10 <_Z22__fetch_global_Serial1v+0x48>)
 8082df2:	4805      	ldr	r0, [pc, #20]	; (8082e08 <_Z22__fetch_global_Serial1v+0x40>)
 8082df4:	f000 fa82 	bl	80832fc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082df8:	4803      	ldr	r0, [pc, #12]	; (8082e08 <_Z22__fetch_global_Serial1v+0x40>)
 8082dfa:	bd38      	pop	{r3, r4, r5, pc}
 8082dfc:	20000354 	.word	0x20000354
 8082e00:	20000358 	.word	0x20000358
 8082e04:	200002d0 	.word	0x200002d0
 8082e08:	200002bc 	.word	0x200002bc
 8082e0c:	20000164 	.word	0x20000164
 8082e10:	08082d11 	.word	0x08082d11

08082e14 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082e14:	7441      	strb	r1, [r0, #17]
 8082e16:	4770      	bx	lr

08082e18 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082e18:	4770      	bx	lr

08082e1a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082e1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082e1c:	2100      	movs	r1, #0
 8082e1e:	7c00      	ldrb	r0, [r0, #16]
 8082e20:	f7fe fdb0 	bl	8081984 <HAL_USB_USART_Receive_Data>
}
 8082e24:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082e28:	bf28      	it	cs
 8082e2a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082e2e:	bd08      	pop	{r3, pc}

08082e30 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082e30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082e32:	2101      	movs	r1, #1
 8082e34:	7c00      	ldrb	r0, [r0, #16]
 8082e36:	f7fe fda5 	bl	8081984 <HAL_USB_USART_Receive_Data>
}
 8082e3a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082e3e:	bf28      	it	cs
 8082e40:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082e44:	bd08      	pop	{r3, pc}

08082e46 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082e46:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082e48:	7c00      	ldrb	r0, [r0, #16]
 8082e4a:	f7fe fd93 	bl	8081974 <HAL_USB_USART_Available_Data_For_Write>
}
 8082e4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082e52:	bd08      	pop	{r3, pc}

08082e54 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082e54:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082e56:	7c00      	ldrb	r0, [r0, #16]
 8082e58:	f7fe fd84 	bl	8081964 <HAL_USB_USART_Available_Data>
}
 8082e5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082e60:	bd08      	pop	{r3, pc}

08082e62 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082e62:	7c00      	ldrb	r0, [r0, #16]
 8082e64:	f7fe bd9e 	b.w	80819a4 <HAL_USB_USART_Flush_Data>

08082e68 <_ZN9USBSerialD0Ev>:
 8082e68:	b510      	push	{r4, lr}
 8082e6a:	4604      	mov	r4, r0
 8082e6c:	2114      	movs	r1, #20
 8082e6e:	f000 fa4a 	bl	8083306 <_ZdlPvj>
 8082e72:	4620      	mov	r0, r4
 8082e74:	bd10      	pop	{r4, pc}

08082e76 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082e76:	b538      	push	{r3, r4, r5, lr}
 8082e78:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e7a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082e7c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082e7e:	f7fe fd79 	bl	8081974 <HAL_USB_USART_Available_Data_For_Write>
 8082e82:	2800      	cmp	r0, #0
 8082e84:	dc01      	bgt.n	8082e8a <_ZN9USBSerial5writeEh+0x14>
 8082e86:	7c60      	ldrb	r0, [r4, #17]
 8082e88:	b128      	cbz	r0, 8082e96 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082e8a:	4629      	mov	r1, r5
 8082e8c:	7c20      	ldrb	r0, [r4, #16]
 8082e8e:	f7fe fd81 	bl	8081994 <HAL_USB_USART_Send_Data>
 8082e92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082e96:	bd38      	pop	{r3, r4, r5, pc}

08082e98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082e98:	b510      	push	{r4, lr}
 8082e9a:	4604      	mov	r4, r0
 8082e9c:	2300      	movs	r3, #0
 8082e9e:	6063      	str	r3, [r4, #4]
 8082ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082ea4:	60a3      	str	r3, [r4, #8]
 8082ea6:	4b05      	ldr	r3, [pc, #20]	; (8082ebc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082ea8:	4608      	mov	r0, r1
 8082eaa:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082eac:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082eae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082eb0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082eb2:	4611      	mov	r1, r2
 8082eb4:	f7fe fd4e 	bl	8081954 <HAL_USB_USART_Init>
}
 8082eb8:	4620      	mov	r0, r4
 8082eba:	bd10      	pop	{r4, pc}
 8082ebc:	08085524 	.word	0x08085524

08082ec0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082ec0:	b510      	push	{r4, lr}
 8082ec2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082ec4:	2214      	movs	r2, #20
 8082ec6:	2100      	movs	r1, #0
 8082ec8:	f001 fb4b 	bl	8084562 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082ecc:	4b05      	ldr	r3, [pc, #20]	; (8082ee4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082ece:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082ed0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082ed2:	4b05      	ldr	r3, [pc, #20]	; (8082ee8 <_Z19acquireSerialBufferv+0x28>)
 8082ed4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082ed6:	f240 1301 	movw	r3, #257	; 0x101
 8082eda:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082edc:	2381      	movs	r3, #129	; 0x81
 8082ede:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082ee0:	bd10      	pop	{r4, pc}
 8082ee2:	bf00      	nop
 8082ee4:	20000461 	.word	0x20000461
 8082ee8:	200003e0 	.word	0x200003e0

08082eec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082eec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082eee:	4d0e      	ldr	r5, [pc, #56]	; (8082f28 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082ef0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082ef2:	a801      	add	r0, sp, #4
 8082ef4:	f7ff ffe4 	bl	8082ec0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082ef8:	6829      	ldr	r1, [r5, #0]
 8082efa:	f011 0401 	ands.w	r4, r1, #1
 8082efe:	d110      	bne.n	8082f22 <_Z16_fetch_usbserialv+0x36>
 8082f00:	4628      	mov	r0, r5
 8082f02:	f7fd f8d0 	bl	80800a6 <__cxa_guard_acquire>
 8082f06:	b160      	cbz	r0, 8082f22 <_Z16_fetch_usbserialv+0x36>
 8082f08:	aa01      	add	r2, sp, #4
 8082f0a:	4621      	mov	r1, r4
 8082f0c:	4807      	ldr	r0, [pc, #28]	; (8082f2c <_Z16_fetch_usbserialv+0x40>)
 8082f0e:	f7ff ffc3 	bl	8082e98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f12:	4628      	mov	r0, r5
 8082f14:	f7fd f8cc 	bl	80800b0 <__cxa_guard_release>
 8082f18:	4a05      	ldr	r2, [pc, #20]	; (8082f30 <_Z16_fetch_usbserialv+0x44>)
 8082f1a:	4906      	ldr	r1, [pc, #24]	; (8082f34 <_Z16_fetch_usbserialv+0x48>)
 8082f1c:	4803      	ldr	r0, [pc, #12]	; (8082f2c <_Z16_fetch_usbserialv+0x40>)
 8082f1e:	f000 f9ed 	bl	80832fc <__aeabi_atexit>
	return _usbserial;
}
 8082f22:	4802      	ldr	r0, [pc, #8]	; (8082f2c <_Z16_fetch_usbserialv+0x40>)
 8082f24:	b007      	add	sp, #28
 8082f26:	bd30      	pop	{r4, r5, pc}
 8082f28:	200003dc 	.word	0x200003dc
 8082f2c:	20000564 	.word	0x20000564
 8082f30:	20000164 	.word	0x20000164
 8082f34:	08082e19 	.word	0x08082e19

08082f38 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082f38:	b510      	push	{r4, lr}
 8082f3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082f3c:	2214      	movs	r2, #20
 8082f3e:	2100      	movs	r1, #0
 8082f40:	f001 fb0f 	bl	8084562 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082f44:	4b05      	ldr	r3, [pc, #20]	; (8082f5c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082f46:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082f48:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082f4a:	4b05      	ldr	r3, [pc, #20]	; (8082f60 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082f4c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082f4e:	f240 1301 	movw	r3, #257	; 0x101
 8082f52:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082f54:	2381      	movs	r3, #129	; 0x81
 8082f56:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082f58:	bd10      	pop	{r4, pc}
 8082f5a:	bf00      	nop
 8082f5c:	20000614 	.word	0x20000614
 8082f60:	2000057c 	.word	0x2000057c

08082f64 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082f64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f66:	4c0e      	ldr	r4, [pc, #56]	; (8082fa0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082f68:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082f6a:	a801      	add	r0, sp, #4
 8082f6c:	f7ff ffe4 	bl	8082f38 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f70:	6823      	ldr	r3, [r4, #0]
 8082f72:	07db      	lsls	r3, r3, #31
 8082f74:	d410      	bmi.n	8082f98 <_Z17_fetch_usbserial1v+0x34>
 8082f76:	4620      	mov	r0, r4
 8082f78:	f7fd f895 	bl	80800a6 <__cxa_guard_acquire>
 8082f7c:	b160      	cbz	r0, 8082f98 <_Z17_fetch_usbserial1v+0x34>
 8082f7e:	aa01      	add	r2, sp, #4
 8082f80:	2101      	movs	r1, #1
 8082f82:	4808      	ldr	r0, [pc, #32]	; (8082fa4 <_Z17_fetch_usbserial1v+0x40>)
 8082f84:	f7ff ff88 	bl	8082e98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f88:	4620      	mov	r0, r4
 8082f8a:	f7fd f891 	bl	80800b0 <__cxa_guard_release>
 8082f8e:	4a06      	ldr	r2, [pc, #24]	; (8082fa8 <_Z17_fetch_usbserial1v+0x44>)
 8082f90:	4906      	ldr	r1, [pc, #24]	; (8082fac <_Z17_fetch_usbserial1v+0x48>)
 8082f92:	4804      	ldr	r0, [pc, #16]	; (8082fa4 <_Z17_fetch_usbserial1v+0x40>)
 8082f94:	f000 f9b2 	bl	80832fc <__aeabi_atexit>
  return _usbserial1;
}
 8082f98:	4802      	ldr	r0, [pc, #8]	; (8082fa4 <_Z17_fetch_usbserial1v+0x40>)
 8082f9a:	b006      	add	sp, #24
 8082f9c:	bd10      	pop	{r4, pc}
 8082f9e:	bf00      	nop
 8082fa0:	20000578 	.word	0x20000578
 8082fa4:	20000600 	.word	0x20000600
 8082fa8:	20000164 	.word	0x20000164
 8082fac:	08082e19 	.word	0x08082e19

08082fb0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082fb2:	4b18      	ldr	r3, [pc, #96]	; (8083014 <serialEventRun+0x64>)
 8082fb4:	b133      	cbz	r3, 8082fc4 <serialEventRun+0x14>
 8082fb6:	f7ff ff99 	bl	8082eec <_Z16_fetch_usbserialv>
 8082fba:	6803      	ldr	r3, [r0, #0]
 8082fbc:	691b      	ldr	r3, [r3, #16]
 8082fbe:	4798      	blx	r3
 8082fc0:	2800      	cmp	r0, #0
 8082fc2:	dc1e      	bgt.n	8083002 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082fc4:	4b14      	ldr	r3, [pc, #80]	; (8083018 <serialEventRun+0x68>)
 8082fc6:	b133      	cbz	r3, 8082fd6 <serialEventRun+0x26>
 8082fc8:	f7ff fefe 	bl	8082dc8 <_Z22__fetch_global_Serial1v>
 8082fcc:	6803      	ldr	r3, [r0, #0]
 8082fce:	691b      	ldr	r3, [r3, #16]
 8082fd0:	4798      	blx	r3
 8082fd2:	2800      	cmp	r0, #0
 8082fd4:	dc18      	bgt.n	8083008 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082fd6:	4b11      	ldr	r3, [pc, #68]	; (808301c <serialEventRun+0x6c>)
 8082fd8:	b10b      	cbz	r3, 8082fde <serialEventRun+0x2e>
 8082fda:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082fde:	4b10      	ldr	r3, [pc, #64]	; (8083020 <serialEventRun+0x70>)
 8082fe0:	b10b      	cbz	r3, 8082fe6 <serialEventRun+0x36>
 8082fe2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082fe6:	4b0f      	ldr	r3, [pc, #60]	; (8083024 <serialEventRun+0x74>)
 8082fe8:	b10b      	cbz	r3, 8082fee <serialEventRun+0x3e>
 8082fea:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082fee:	4b0e      	ldr	r3, [pc, #56]	; (8083028 <serialEventRun+0x78>)
 8082ff0:	b17b      	cbz	r3, 8083012 <serialEventRun+0x62>
 8082ff2:	f7ff ffb7 	bl	8082f64 <_Z17_fetch_usbserial1v>
 8082ff6:	6803      	ldr	r3, [r0, #0]
 8082ff8:	691b      	ldr	r3, [r3, #16]
 8082ffa:	4798      	blx	r3
 8082ffc:	2800      	cmp	r0, #0
 8082ffe:	dc06      	bgt.n	808300e <serialEventRun+0x5e>
 8083000:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083002:	f3af 8000 	nop.w
 8083006:	e7dd      	b.n	8082fc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083008:	f3af 8000 	nop.w
 808300c:	e7e3      	b.n	8082fd6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808300e:	f3af 8000 	nop.w
 8083012:	bd08      	pop	{r3, pc}
	...

0808302c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808302c:	b508      	push	{r3, lr}
	serialEventRun();
 808302e:	f7ff ffbf 	bl	8082fb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083032:	f7fe fb6f 	bl	8081714 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083036:	4b01      	ldr	r3, [pc, #4]	; (808303c <_post_loop+0x10>)
 8083038:	6018      	str	r0, [r3, #0]
 808303a:	bd08      	pop	{r3, pc}
 808303c:	20000720 	.word	0x20000720

08083040 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8083040:	4802      	ldr	r0, [pc, #8]	; (808304c <_Z33system_initialize_user_backup_ramv+0xc>)
 8083042:	4a03      	ldr	r2, [pc, #12]	; (8083050 <_Z33system_initialize_user_backup_ramv+0x10>)
 8083044:	4903      	ldr	r1, [pc, #12]	; (8083054 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083046:	1a12      	subs	r2, r2, r0
 8083048:	f001 ba80 	b.w	808454c <memcpy>
 808304c:	40024000 	.word	0x40024000
 8083050:	40024004 	.word	0x40024004
 8083054:	08085790 	.word	0x08085790

08083058 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083058:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808305a:	2300      	movs	r3, #0
 808305c:	9300      	str	r3, [sp, #0]
 808305e:	461a      	mov	r2, r3
 8083060:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083064:	f7fe fcf8 	bl	8081a58 <system_ctrl_set_result>
}
 8083068:	b003      	add	sp, #12
 808306a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083070 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083070:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083072:	8843      	ldrh	r3, [r0, #2]
 8083074:	2b0a      	cmp	r3, #10
 8083076:	d008      	beq.n	808308a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083078:	2b50      	cmp	r3, #80	; 0x50
 808307a:	d109      	bne.n	8083090 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808307c:	4b09      	ldr	r3, [pc, #36]	; (80830a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808307e:	681b      	ldr	r3, [r3, #0]
 8083080:	b13b      	cbz	r3, 8083092 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083082:	b003      	add	sp, #12
 8083084:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083088:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808308a:	f7ff ffe5 	bl	8083058 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808308e:	e006      	b.n	808309e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083090:	2300      	movs	r3, #0
 8083092:	9300      	str	r3, [sp, #0]
 8083094:	461a      	mov	r2, r3
 8083096:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808309a:	f7fe fcdd 	bl	8081a58 <system_ctrl_set_result>
        break;
    }
}
 808309e:	b003      	add	sp, #12
 80830a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80830a4:	20000718 	.word	0x20000718

080830a8 <module_user_init_hook>:

void module_user_init_hook()
{
 80830a8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80830aa:	4c10      	ldr	r4, [pc, #64]	; (80830ec <module_user_init_hook+0x44>)
 80830ac:	4d10      	ldr	r5, [pc, #64]	; (80830f0 <module_user_init_hook+0x48>)
 80830ae:	6823      	ldr	r3, [r4, #0]
 80830b0:	42ab      	cmp	r3, r5
 80830b2:	4b10      	ldr	r3, [pc, #64]	; (80830f4 <module_user_init_hook+0x4c>)
 80830b4:	bf0c      	ite	eq
 80830b6:	2201      	moveq	r2, #1
 80830b8:	2200      	movne	r2, #0
 80830ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80830bc:	d002      	beq.n	80830c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80830be:	f7ff ffbf 	bl	8083040 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80830c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80830c4:	f7fe fb1e 	bl	8081704 <HAL_RNG_GetRandomNumber>
 80830c8:	4604      	mov	r4, r0
    srand(seed);
 80830ca:	f001 fa53 	bl	8084574 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80830ce:	4b0a      	ldr	r3, [pc, #40]	; (80830f8 <module_user_init_hook+0x50>)
 80830d0:	b113      	cbz	r3, 80830d8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80830d2:	4620      	mov	r0, r4
 80830d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80830d8:	2100      	movs	r1, #0
 80830da:	4807      	ldr	r0, [pc, #28]	; (80830f8 <module_user_init_hook+0x50>)
 80830dc:	f7fe fd1e 	bl	8081b1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80830e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80830e4:	2100      	movs	r1, #0
 80830e6:	4805      	ldr	r0, [pc, #20]	; (80830fc <module_user_init_hook+0x54>)
 80830e8:	f7fe bcac 	b.w	8081a44 <system_ctrl_set_app_request_handler>
 80830ec:	40024000 	.word	0x40024000
 80830f0:	9a271c1e 	.word	0x9a271c1e
 80830f4:	2000071c 	.word	0x2000071c
 80830f8:	00000000 	.word	0x00000000
 80830fc:	08083071 	.word	0x08083071

08083100 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083100:	b510      	push	{r4, lr}
 8083102:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083104:	480f      	ldr	r0, [pc, #60]	; (8083144 <pinAvailable+0x44>)
 8083106:	f7ff fcaf 	bl	8082a68 <_ZN8SPIClass9isEnabledEv>
 808310a:	b128      	cbz	r0, 8083118 <pinAvailable+0x18>
 808310c:	f1a4 030d 	sub.w	r3, r4, #13
 8083110:	2b02      	cmp	r3, #2
 8083112:	d801      	bhi.n	8083118 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8083114:	2000      	movs	r0, #0
 8083116:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083118:	f000 f86a 	bl	80831f0 <_Z19__fetch_global_Wirev>
 808311c:	f7ff faad 	bl	808267a <_ZN7TwoWire9isEnabledEv>
 8083120:	b108      	cbz	r0, 8083126 <pinAvailable+0x26>
 8083122:	2c01      	cmp	r4, #1
 8083124:	d9f6      	bls.n	8083114 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083126:	f7ff fe4f 	bl	8082dc8 <_Z22__fetch_global_Serial1v>
 808312a:	f7ff fe49 	bl	8082dc0 <_ZN11USARTSerial9isEnabledEv>
 808312e:	b118      	cbz	r0, 8083138 <pinAvailable+0x38>
 8083130:	f1a4 0312 	sub.w	r3, r4, #18
 8083134:	2b01      	cmp	r3, #1
 8083136:	d9ed      	bls.n	8083114 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083138:	2c2e      	cmp	r4, #46	; 0x2e
 808313a:	bf8c      	ite	hi
 808313c:	2000      	movhi	r0, #0
 808313e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083140:	bd10      	pop	{r4, pc}
 8083142:	bf00      	nop
 8083144:	2000075c 	.word	0x2000075c

08083148 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083148:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808314a:	b538      	push	{r3, r4, r5, lr}
 808314c:	4604      	mov	r4, r0
 808314e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083150:	d80a      	bhi.n	8083168 <pinMode+0x20>
 8083152:	29ff      	cmp	r1, #255	; 0xff
 8083154:	d008      	beq.n	8083168 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083156:	f7ff ffd3 	bl	8083100 <pinAvailable>
 808315a:	b128      	cbz	r0, 8083168 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808315c:	4629      	mov	r1, r5
 808315e:	4620      	mov	r0, r4
}
 8083160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083164:	f7fe bb06 	b.w	8081774 <HAL_Pin_Mode>
 8083168:	bd38      	pop	{r3, r4, r5, pc}

0808316a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808316a:	b538      	push	{r3, r4, r5, lr}
 808316c:	4604      	mov	r4, r0
 808316e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083170:	f7fe fb08 	bl	8081784 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083174:	28ff      	cmp	r0, #255	; 0xff
 8083176:	d010      	beq.n	808319a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083178:	2806      	cmp	r0, #6
 808317a:	d804      	bhi.n	8083186 <digitalWrite+0x1c>
 808317c:	234d      	movs	r3, #77	; 0x4d
 808317e:	fa23 f000 	lsr.w	r0, r3, r0
 8083182:	07c3      	lsls	r3, r0, #31
 8083184:	d409      	bmi.n	808319a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083186:	4620      	mov	r0, r4
 8083188:	f7ff ffba 	bl	8083100 <pinAvailable>
 808318c:	b128      	cbz	r0, 808319a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808318e:	4629      	mov	r1, r5
 8083190:	4620      	mov	r0, r4
}
 8083192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083196:	f7fe bafd 	b.w	8081794 <HAL_GPIO_Write>
 808319a:	bd38      	pop	{r3, r4, r5, pc}

0808319c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808319c:	b510      	push	{r4, lr}
 808319e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80831a0:	f7fe faf0 	bl	8081784 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80831a4:	3804      	subs	r0, #4
 80831a6:	b2c0      	uxtb	r0, r0
 80831a8:	2801      	cmp	r0, #1
 80831aa:	d908      	bls.n	80831be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80831ac:	4620      	mov	r0, r4
 80831ae:	f7ff ffa7 	bl	8083100 <pinAvailable>
 80831b2:	b120      	cbz	r0, 80831be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80831b4:	4620      	mov	r0, r4
}
 80831b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80831ba:	f7fe baf3 	b.w	80817a4 <HAL_GPIO_Read>
}
 80831be:	2000      	movs	r0, #0
 80831c0:	bd10      	pop	{r4, pc}

080831c2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80831c2:	b510      	push	{r4, lr}
 80831c4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80831c6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80831c8:	bf9c      	itt	ls
 80831ca:	340a      	addls	r4, #10
 80831cc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80831ce:	4620      	mov	r0, r4
 80831d0:	f7ff ff96 	bl	8083100 <pinAvailable>
 80831d4:	b150      	cbz	r0, 80831ec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80831d6:	2103      	movs	r1, #3
 80831d8:	4620      	mov	r0, r4
 80831da:	f7fe fac3 	bl	8081764 <HAL_Validate_Pin_Function>
 80831de:	2803      	cmp	r0, #3
 80831e0:	d104      	bne.n	80831ec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80831e2:	4620      	mov	r0, r4
}
 80831e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80831e8:	f7fe baf4 	b.w	80817d4 <HAL_ADC_Read>
}
 80831ec:	2000      	movs	r0, #0
 80831ee:	bd10      	pop	{r4, pc}

080831f0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80831f0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80831f2:	4d0b      	ldr	r5, [pc, #44]	; (8083220 <_Z19__fetch_global_Wirev+0x30>)
 80831f4:	6829      	ldr	r1, [r5, #0]
 80831f6:	f011 0401 	ands.w	r4, r1, #1
 80831fa:	d10f      	bne.n	808321c <_Z19__fetch_global_Wirev+0x2c>
 80831fc:	4628      	mov	r0, r5
 80831fe:	f7fc ff52 	bl	80800a6 <__cxa_guard_acquire>
 8083202:	b158      	cbz	r0, 808321c <_Z19__fetch_global_Wirev+0x2c>
 8083204:	4621      	mov	r1, r4
 8083206:	4807      	ldr	r0, [pc, #28]	; (8083224 <_Z19__fetch_global_Wirev+0x34>)
 8083208:	f7ff fa06 	bl	8082618 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808320c:	4628      	mov	r0, r5
 808320e:	f7fc ff4f 	bl	80800b0 <__cxa_guard_release>
 8083212:	4a05      	ldr	r2, [pc, #20]	; (8083228 <_Z19__fetch_global_Wirev+0x38>)
 8083214:	4905      	ldr	r1, [pc, #20]	; (808322c <_Z19__fetch_global_Wirev+0x3c>)
 8083216:	4803      	ldr	r0, [pc, #12]	; (8083224 <_Z19__fetch_global_Wirev+0x34>)
 8083218:	f000 f870 	bl	80832fc <__aeabi_atexit>
	return wire;
}
 808321c:	4801      	ldr	r0, [pc, #4]	; (8083224 <_Z19__fetch_global_Wirev+0x34>)
 808321e:	bd38      	pop	{r3, r4, r5, pc}
 8083220:	20000724 	.word	0x20000724
 8083224:	2000073c 	.word	0x2000073c
 8083228:	20000164 	.word	0x20000164
 808322c:	080825c1 	.word	0x080825c1

08083230 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083230:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8083232:	4c0b      	ldr	r4, [pc, #44]	; (8083260 <_Z20__fetch_global_Wire3v+0x30>)
 8083234:	6823      	ldr	r3, [r4, #0]
 8083236:	07db      	lsls	r3, r3, #31
 8083238:	d40f      	bmi.n	808325a <_Z20__fetch_global_Wire3v+0x2a>
 808323a:	4620      	mov	r0, r4
 808323c:	f7fc ff33 	bl	80800a6 <__cxa_guard_acquire>
 8083240:	b158      	cbz	r0, 808325a <_Z20__fetch_global_Wire3v+0x2a>
 8083242:	2102      	movs	r1, #2
 8083244:	4807      	ldr	r0, [pc, #28]	; (8083264 <_Z20__fetch_global_Wire3v+0x34>)
 8083246:	f7ff f9e7 	bl	8082618 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808324a:	4620      	mov	r0, r4
 808324c:	f7fc ff30 	bl	80800b0 <__cxa_guard_release>
 8083250:	4a05      	ldr	r2, [pc, #20]	; (8083268 <_Z20__fetch_global_Wire3v+0x38>)
 8083252:	4906      	ldr	r1, [pc, #24]	; (808326c <_Z20__fetch_global_Wire3v+0x3c>)
 8083254:	4803      	ldr	r0, [pc, #12]	; (8083264 <_Z20__fetch_global_Wire3v+0x34>)
 8083256:	f000 f851 	bl	80832fc <__aeabi_atexit>
	return wire;
}
 808325a:	4802      	ldr	r0, [pc, #8]	; (8083264 <_Z20__fetch_global_Wire3v+0x34>)
 808325c:	bd10      	pop	{r4, pc}
 808325e:	bf00      	nop
 8083260:	20000750 	.word	0x20000750
 8083264:	20000728 	.word	0x20000728
 8083268:	20000164 	.word	0x20000164
 808326c:	080825c1 	.word	0x080825c1

08083270 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083270:	b513      	push	{r0, r1, r4, lr}
 8083272:	4c08      	ldr	r4, [pc, #32]	; (8083294 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083274:	2300      	movs	r3, #0
 8083276:	461a      	mov	r2, r3
 8083278:	4619      	mov	r1, r3
 808327a:	9300      	str	r3, [sp, #0]
 808327c:	4620      	mov	r0, r4
 808327e:	f7ff fa7f 	bl	8082780 <_ZN9IPAddressC1Ehhhh>
 8083282:	4620      	mov	r0, r4
 8083284:	4a04      	ldr	r2, [pc, #16]	; (8083298 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083286:	4905      	ldr	r1, [pc, #20]	; (808329c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083288:	b002      	add	sp, #8
 808328a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808328e:	f000 b835 	b.w	80832fc <__aeabi_atexit>
 8083292:	bf00      	nop
 8083294:	20000754 	.word	0x20000754
 8083298:	20000164 	.word	0x20000164
 808329c:	080826f9 	.word	0x080826f9

080832a0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832a0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80832a2:	4e11      	ldr	r6, [pc, #68]	; (80832e8 <_GLOBAL__sub_I_SPI+0x48>)
 80832a4:	4d11      	ldr	r5, [pc, #68]	; (80832ec <_GLOBAL__sub_I_SPI+0x4c>)
 80832a6:	4c12      	ldr	r4, [pc, #72]	; (80832f0 <_GLOBAL__sub_I_SPI+0x50>)
 80832a8:	2100      	movs	r1, #0
 80832aa:	4630      	mov	r0, r6
 80832ac:	f7ff fbc8 	bl	8082a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832b0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832b2:	4e10      	ldr	r6, [pc, #64]	; (80832f4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80832b4:	462a      	mov	r2, r5
 80832b6:	4621      	mov	r1, r4
 80832b8:	f000 f820 	bl	80832fc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832bc:	2101      	movs	r1, #1
 80832be:	4630      	mov	r0, r6
 80832c0:	f7ff fbbe 	bl	8082a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832c4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832c6:	4e0c      	ldr	r6, [pc, #48]	; (80832f8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80832c8:	462a      	mov	r2, r5
 80832ca:	4621      	mov	r1, r4
 80832cc:	f000 f816 	bl	80832fc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80832d0:	2102      	movs	r1, #2
 80832d2:	4630      	mov	r0, r6
 80832d4:	f7ff fbb4 	bl	8082a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80832d8:	462a      	mov	r2, r5
 80832da:	4621      	mov	r1, r4
 80832dc:	4630      	mov	r0, r6
 80832de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80832e2:	f000 b80b 	b.w	80832fc <__aeabi_atexit>
 80832e6:	bf00      	nop
 80832e8:	2000075c 	.word	0x2000075c
 80832ec:	20000164 	.word	0x20000164
 80832f0:	08082a31 	.word	0x08082a31
 80832f4:	2000076c 	.word	0x2000076c
 80832f8:	2000077c 	.word	0x2000077c

080832fc <__aeabi_atexit>:
 80832fc:	460b      	mov	r3, r1
 80832fe:	4601      	mov	r1, r0
 8083300:	4618      	mov	r0, r3
 8083302:	f001 b817 	b.w	8084334 <__cxa_atexit>

08083306 <_ZdlPvj>:
 8083306:	f7fc becc 	b.w	80800a2 <_ZdlPv>

0808330a <_ZSt25__throw_bad_function_callv>:
 808330a:	b508      	push	{r3, lr}
 808330c:	f7fe fc86 	bl	8081c1c <abort>

08083310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083310:	4b24      	ldr	r3, [pc, #144]	; (80833a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8083312:	681a      	ldr	r2, [r3, #0]
 8083314:	07d0      	lsls	r0, r2, #31
 8083316:	bf5c      	itt	pl
 8083318:	2201      	movpl	r2, #1
 808331a:	601a      	strpl	r2, [r3, #0]
 808331c:	4b22      	ldr	r3, [pc, #136]	; (80833a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808331e:	681a      	ldr	r2, [r3, #0]
 8083320:	07d1      	lsls	r1, r2, #31
 8083322:	bf5c      	itt	pl
 8083324:	2201      	movpl	r2, #1
 8083326:	601a      	strpl	r2, [r3, #0]
 8083328:	4b20      	ldr	r3, [pc, #128]	; (80833ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808332a:	681a      	ldr	r2, [r3, #0]
 808332c:	07d2      	lsls	r2, r2, #31
 808332e:	bf5c      	itt	pl
 8083330:	2201      	movpl	r2, #1
 8083332:	601a      	strpl	r2, [r3, #0]
 8083334:	4b1e      	ldr	r3, [pc, #120]	; (80833b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8083336:	681a      	ldr	r2, [r3, #0]
 8083338:	07d0      	lsls	r0, r2, #31
 808333a:	bf5c      	itt	pl
 808333c:	2201      	movpl	r2, #1
 808333e:	601a      	strpl	r2, [r3, #0]
 8083340:	4b1c      	ldr	r3, [pc, #112]	; (80833b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8083342:	681a      	ldr	r2, [r3, #0]
 8083344:	07d1      	lsls	r1, r2, #31
 8083346:	bf5c      	itt	pl
 8083348:	2201      	movpl	r2, #1
 808334a:	601a      	strpl	r2, [r3, #0]
 808334c:	4b1a      	ldr	r3, [pc, #104]	; (80833b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808334e:	681a      	ldr	r2, [r3, #0]
 8083350:	07d2      	lsls	r2, r2, #31
 8083352:	bf5c      	itt	pl
 8083354:	2201      	movpl	r2, #1
 8083356:	601a      	strpl	r2, [r3, #0]
 8083358:	4b18      	ldr	r3, [pc, #96]	; (80833bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808335a:	681a      	ldr	r2, [r3, #0]
 808335c:	07d0      	lsls	r0, r2, #31
 808335e:	bf5c      	itt	pl
 8083360:	2201      	movpl	r2, #1
 8083362:	601a      	strpl	r2, [r3, #0]
 8083364:	4b16      	ldr	r3, [pc, #88]	; (80833c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8083366:	681a      	ldr	r2, [r3, #0]
 8083368:	07d1      	lsls	r1, r2, #31
 808336a:	bf5c      	itt	pl
 808336c:	2201      	movpl	r2, #1
 808336e:	601a      	strpl	r2, [r3, #0]
 8083370:	4b14      	ldr	r3, [pc, #80]	; (80833c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083372:	681a      	ldr	r2, [r3, #0]
 8083374:	07d2      	lsls	r2, r2, #31
 8083376:	bf5c      	itt	pl
 8083378:	2201      	movpl	r2, #1
 808337a:	601a      	strpl	r2, [r3, #0]
 808337c:	4b12      	ldr	r3, [pc, #72]	; (80833c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808337e:	681a      	ldr	r2, [r3, #0]
 8083380:	07d0      	lsls	r0, r2, #31
 8083382:	bf5c      	itt	pl
 8083384:	2201      	movpl	r2, #1
 8083386:	601a      	strpl	r2, [r3, #0]
 8083388:	4b10      	ldr	r3, [pc, #64]	; (80833cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808338a:	681a      	ldr	r2, [r3, #0]
 808338c:	07d1      	lsls	r1, r2, #31
 808338e:	bf5c      	itt	pl
 8083390:	2201      	movpl	r2, #1
 8083392:	601a      	strpl	r2, [r3, #0]
 8083394:	4b0e      	ldr	r3, [pc, #56]	; (80833d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083396:	681a      	ldr	r2, [r3, #0]
 8083398:	07d2      	lsls	r2, r2, #31
 808339a:	bf5c      	itt	pl
 808339c:	2201      	movpl	r2, #1
 808339e:	601a      	strpl	r2, [r3, #0]
 80833a0:	4770      	bx	lr
 80833a2:	bf00      	nop
 80833a4:	200007b8 	.word	0x200007b8
 80833a8:	200007b4 	.word	0x200007b4
 80833ac:	200007b0 	.word	0x200007b0
 80833b0:	200007ac 	.word	0x200007ac
 80833b4:	200007a8 	.word	0x200007a8
 80833b8:	200007a4 	.word	0x200007a4
 80833bc:	200007a0 	.word	0x200007a0
 80833c0:	2000079c 	.word	0x2000079c
 80833c4:	20000798 	.word	0x20000798
 80833c8:	20000794 	.word	0x20000794
 80833cc:	20000790 	.word	0x20000790
 80833d0:	2000078c 	.word	0x2000078c

080833d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80833d4:	4b18      	ldr	r3, [pc, #96]	; (8083438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80833d6:	681a      	ldr	r2, [r3, #0]
 80833d8:	07d1      	lsls	r1, r2, #31
 80833da:	bf5c      	itt	pl
 80833dc:	2201      	movpl	r2, #1
 80833de:	601a      	strpl	r2, [r3, #0]
 80833e0:	4b16      	ldr	r3, [pc, #88]	; (808343c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80833e2:	681a      	ldr	r2, [r3, #0]
 80833e4:	07d2      	lsls	r2, r2, #31
 80833e6:	bf5c      	itt	pl
 80833e8:	2201      	movpl	r2, #1
 80833ea:	601a      	strpl	r2, [r3, #0]
 80833ec:	4b14      	ldr	r3, [pc, #80]	; (8083440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80833ee:	681a      	ldr	r2, [r3, #0]
 80833f0:	07d0      	lsls	r0, r2, #31
 80833f2:	bf5c      	itt	pl
 80833f4:	2201      	movpl	r2, #1
 80833f6:	601a      	strpl	r2, [r3, #0]
 80833f8:	4b12      	ldr	r3, [pc, #72]	; (8083444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80833fa:	681a      	ldr	r2, [r3, #0]
 80833fc:	07d1      	lsls	r1, r2, #31
 80833fe:	bf5c      	itt	pl
 8083400:	2201      	movpl	r2, #1
 8083402:	601a      	strpl	r2, [r3, #0]
 8083404:	4b10      	ldr	r3, [pc, #64]	; (8083448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083406:	681a      	ldr	r2, [r3, #0]
 8083408:	07d2      	lsls	r2, r2, #31
 808340a:	bf5c      	itt	pl
 808340c:	2201      	movpl	r2, #1
 808340e:	601a      	strpl	r2, [r3, #0]
 8083410:	4b0e      	ldr	r3, [pc, #56]	; (808344c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083412:	681a      	ldr	r2, [r3, #0]
 8083414:	07d0      	lsls	r0, r2, #31
 8083416:	bf5c      	itt	pl
 8083418:	2201      	movpl	r2, #1
 808341a:	601a      	strpl	r2, [r3, #0]
 808341c:	4b0c      	ldr	r3, [pc, #48]	; (8083450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808341e:	681a      	ldr	r2, [r3, #0]
 8083420:	07d1      	lsls	r1, r2, #31
 8083422:	bf5c      	itt	pl
 8083424:	2201      	movpl	r2, #1
 8083426:	601a      	strpl	r2, [r3, #0]
 8083428:	4b0a      	ldr	r3, [pc, #40]	; (8083454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808342a:	681a      	ldr	r2, [r3, #0]
 808342c:	07d2      	lsls	r2, r2, #31
 808342e:	bf5c      	itt	pl
 8083430:	2201      	movpl	r2, #1
 8083432:	601a      	strpl	r2, [r3, #0]
 8083434:	4770      	bx	lr
 8083436:	bf00      	nop
 8083438:	200007d8 	.word	0x200007d8
 808343c:	200007d4 	.word	0x200007d4
 8083440:	200007d0 	.word	0x200007d0
 8083444:	200007cc 	.word	0x200007cc
 8083448:	200007c8 	.word	0x200007c8
 808344c:	200007c4 	.word	0x200007c4
 8083450:	200007c0 	.word	0x200007c0
 8083454:	200007bc 	.word	0x200007bc

08083458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083458:	4b18      	ldr	r3, [pc, #96]	; (80834bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808345a:	681a      	ldr	r2, [r3, #0]
 808345c:	07d1      	lsls	r1, r2, #31
 808345e:	bf5c      	itt	pl
 8083460:	2201      	movpl	r2, #1
 8083462:	601a      	strpl	r2, [r3, #0]
 8083464:	4b16      	ldr	r3, [pc, #88]	; (80834c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083466:	681a      	ldr	r2, [r3, #0]
 8083468:	07d2      	lsls	r2, r2, #31
 808346a:	bf5c      	itt	pl
 808346c:	2201      	movpl	r2, #1
 808346e:	601a      	strpl	r2, [r3, #0]
 8083470:	4b14      	ldr	r3, [pc, #80]	; (80834c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083472:	681a      	ldr	r2, [r3, #0]
 8083474:	07d0      	lsls	r0, r2, #31
 8083476:	bf5c      	itt	pl
 8083478:	2201      	movpl	r2, #1
 808347a:	601a      	strpl	r2, [r3, #0]
 808347c:	4b12      	ldr	r3, [pc, #72]	; (80834c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808347e:	681a      	ldr	r2, [r3, #0]
 8083480:	07d1      	lsls	r1, r2, #31
 8083482:	bf5c      	itt	pl
 8083484:	2201      	movpl	r2, #1
 8083486:	601a      	strpl	r2, [r3, #0]
 8083488:	4b10      	ldr	r3, [pc, #64]	; (80834cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808348a:	681a      	ldr	r2, [r3, #0]
 808348c:	07d2      	lsls	r2, r2, #31
 808348e:	bf5c      	itt	pl
 8083490:	2201      	movpl	r2, #1
 8083492:	601a      	strpl	r2, [r3, #0]
 8083494:	4b0e      	ldr	r3, [pc, #56]	; (80834d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083496:	681a      	ldr	r2, [r3, #0]
 8083498:	07d0      	lsls	r0, r2, #31
 808349a:	bf5c      	itt	pl
 808349c:	2201      	movpl	r2, #1
 808349e:	601a      	strpl	r2, [r3, #0]
 80834a0:	4b0c      	ldr	r3, [pc, #48]	; (80834d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80834a2:	681a      	ldr	r2, [r3, #0]
 80834a4:	07d1      	lsls	r1, r2, #31
 80834a6:	bf5c      	itt	pl
 80834a8:	2201      	movpl	r2, #1
 80834aa:	601a      	strpl	r2, [r3, #0]
 80834ac:	4b0a      	ldr	r3, [pc, #40]	; (80834d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80834ae:	681a      	ldr	r2, [r3, #0]
 80834b0:	07d2      	lsls	r2, r2, #31
 80834b2:	bf5c      	itt	pl
 80834b4:	2201      	movpl	r2, #1
 80834b6:	601a      	strpl	r2, [r3, #0]
 80834b8:	4770      	bx	lr
 80834ba:	bf00      	nop
 80834bc:	200007f8 	.word	0x200007f8
 80834c0:	200007f4 	.word	0x200007f4
 80834c4:	200007f0 	.word	0x200007f0
 80834c8:	200007ec 	.word	0x200007ec
 80834cc:	200007e8 	.word	0x200007e8
 80834d0:	200007e4 	.word	0x200007e4
 80834d4:	200007e0 	.word	0x200007e0
 80834d8:	200007dc 	.word	0x200007dc

080834dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80834dc:	4b24      	ldr	r3, [pc, #144]	; (8083570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80834de:	681a      	ldr	r2, [r3, #0]
 80834e0:	07d0      	lsls	r0, r2, #31
 80834e2:	bf5c      	itt	pl
 80834e4:	2201      	movpl	r2, #1
 80834e6:	601a      	strpl	r2, [r3, #0]
 80834e8:	4b22      	ldr	r3, [pc, #136]	; (8083574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80834ea:	681a      	ldr	r2, [r3, #0]
 80834ec:	07d1      	lsls	r1, r2, #31
 80834ee:	bf5c      	itt	pl
 80834f0:	2201      	movpl	r2, #1
 80834f2:	601a      	strpl	r2, [r3, #0]
 80834f4:	4b20      	ldr	r3, [pc, #128]	; (8083578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80834f6:	681a      	ldr	r2, [r3, #0]
 80834f8:	07d2      	lsls	r2, r2, #31
 80834fa:	bf5c      	itt	pl
 80834fc:	2201      	movpl	r2, #1
 80834fe:	601a      	strpl	r2, [r3, #0]
 8083500:	4b1e      	ldr	r3, [pc, #120]	; (808357c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083502:	681a      	ldr	r2, [r3, #0]
 8083504:	07d0      	lsls	r0, r2, #31
 8083506:	bf5c      	itt	pl
 8083508:	2201      	movpl	r2, #1
 808350a:	601a      	strpl	r2, [r3, #0]
 808350c:	4b1c      	ldr	r3, [pc, #112]	; (8083580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808350e:	681a      	ldr	r2, [r3, #0]
 8083510:	07d1      	lsls	r1, r2, #31
 8083512:	bf5c      	itt	pl
 8083514:	2201      	movpl	r2, #1
 8083516:	601a      	strpl	r2, [r3, #0]
 8083518:	4b1a      	ldr	r3, [pc, #104]	; (8083584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808351a:	681a      	ldr	r2, [r3, #0]
 808351c:	07d2      	lsls	r2, r2, #31
 808351e:	bf5c      	itt	pl
 8083520:	2201      	movpl	r2, #1
 8083522:	601a      	strpl	r2, [r3, #0]
 8083524:	4b18      	ldr	r3, [pc, #96]	; (8083588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083526:	681a      	ldr	r2, [r3, #0]
 8083528:	07d0      	lsls	r0, r2, #31
 808352a:	bf5c      	itt	pl
 808352c:	2201      	movpl	r2, #1
 808352e:	601a      	strpl	r2, [r3, #0]
 8083530:	4b16      	ldr	r3, [pc, #88]	; (808358c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8083532:	681a      	ldr	r2, [r3, #0]
 8083534:	07d1      	lsls	r1, r2, #31
 8083536:	bf5c      	itt	pl
 8083538:	2201      	movpl	r2, #1
 808353a:	601a      	strpl	r2, [r3, #0]
 808353c:	4b14      	ldr	r3, [pc, #80]	; (8083590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808353e:	681a      	ldr	r2, [r3, #0]
 8083540:	07d2      	lsls	r2, r2, #31
 8083542:	bf5c      	itt	pl
 8083544:	2201      	movpl	r2, #1
 8083546:	601a      	strpl	r2, [r3, #0]
 8083548:	4b12      	ldr	r3, [pc, #72]	; (8083594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808354a:	681a      	ldr	r2, [r3, #0]
 808354c:	07d0      	lsls	r0, r2, #31
 808354e:	bf5c      	itt	pl
 8083550:	2201      	movpl	r2, #1
 8083552:	601a      	strpl	r2, [r3, #0]
 8083554:	4b10      	ldr	r3, [pc, #64]	; (8083598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8083556:	681a      	ldr	r2, [r3, #0]
 8083558:	07d1      	lsls	r1, r2, #31
 808355a:	bf5c      	itt	pl
 808355c:	2201      	movpl	r2, #1
 808355e:	601a      	strpl	r2, [r3, #0]
 8083560:	4b0e      	ldr	r3, [pc, #56]	; (808359c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8083562:	681a      	ldr	r2, [r3, #0]
 8083564:	07d2      	lsls	r2, r2, #31
 8083566:	bf5c      	itt	pl
 8083568:	2201      	movpl	r2, #1
 808356a:	601a      	strpl	r2, [r3, #0]
 808356c:	4770      	bx	lr
 808356e:	bf00      	nop
 8083570:	20000828 	.word	0x20000828
 8083574:	20000824 	.word	0x20000824
 8083578:	20000820 	.word	0x20000820
 808357c:	2000081c 	.word	0x2000081c
 8083580:	20000818 	.word	0x20000818
 8083584:	20000814 	.word	0x20000814
 8083588:	20000810 	.word	0x20000810
 808358c:	2000080c 	.word	0x2000080c
 8083590:	20000808 	.word	0x20000808
 8083594:	20000804 	.word	0x20000804
 8083598:	20000800 	.word	0x20000800
 808359c:	200007fc 	.word	0x200007fc

080835a0 <__aeabi_drsub>:
 80835a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80835a4:	e002      	b.n	80835ac <__adddf3>
 80835a6:	bf00      	nop

080835a8 <__aeabi_dsub>:
 80835a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080835ac <__adddf3>:
 80835ac:	b530      	push	{r4, r5, lr}
 80835ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80835b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80835b6:	ea94 0f05 	teq	r4, r5
 80835ba:	bf08      	it	eq
 80835bc:	ea90 0f02 	teqeq	r0, r2
 80835c0:	bf1f      	itttt	ne
 80835c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80835c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80835ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80835ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80835d2:	f000 80e2 	beq.w	808379a <__adddf3+0x1ee>
 80835d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80835da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80835de:	bfb8      	it	lt
 80835e0:	426d      	neglt	r5, r5
 80835e2:	dd0c      	ble.n	80835fe <__adddf3+0x52>
 80835e4:	442c      	add	r4, r5
 80835e6:	ea80 0202 	eor.w	r2, r0, r2
 80835ea:	ea81 0303 	eor.w	r3, r1, r3
 80835ee:	ea82 0000 	eor.w	r0, r2, r0
 80835f2:	ea83 0101 	eor.w	r1, r3, r1
 80835f6:	ea80 0202 	eor.w	r2, r0, r2
 80835fa:	ea81 0303 	eor.w	r3, r1, r3
 80835fe:	2d36      	cmp	r5, #54	; 0x36
 8083600:	bf88      	it	hi
 8083602:	bd30      	pophi	{r4, r5, pc}
 8083604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808360c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083614:	d002      	beq.n	808361c <__adddf3+0x70>
 8083616:	4240      	negs	r0, r0
 8083618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808361c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083628:	d002      	beq.n	8083630 <__adddf3+0x84>
 808362a:	4252      	negs	r2, r2
 808362c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083630:	ea94 0f05 	teq	r4, r5
 8083634:	f000 80a7 	beq.w	8083786 <__adddf3+0x1da>
 8083638:	f1a4 0401 	sub.w	r4, r4, #1
 808363c:	f1d5 0e20 	rsbs	lr, r5, #32
 8083640:	db0d      	blt.n	808365e <__adddf3+0xb2>
 8083642:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083646:	fa22 f205 	lsr.w	r2, r2, r5
 808364a:	1880      	adds	r0, r0, r2
 808364c:	f141 0100 	adc.w	r1, r1, #0
 8083650:	fa03 f20e 	lsl.w	r2, r3, lr
 8083654:	1880      	adds	r0, r0, r2
 8083656:	fa43 f305 	asr.w	r3, r3, r5
 808365a:	4159      	adcs	r1, r3
 808365c:	e00e      	b.n	808367c <__adddf3+0xd0>
 808365e:	f1a5 0520 	sub.w	r5, r5, #32
 8083662:	f10e 0e20 	add.w	lr, lr, #32
 8083666:	2a01      	cmp	r2, #1
 8083668:	fa03 fc0e 	lsl.w	ip, r3, lr
 808366c:	bf28      	it	cs
 808366e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083672:	fa43 f305 	asr.w	r3, r3, r5
 8083676:	18c0      	adds	r0, r0, r3
 8083678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808367c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083680:	d507      	bpl.n	8083692 <__adddf3+0xe6>
 8083682:	f04f 0e00 	mov.w	lr, #0
 8083686:	f1dc 0c00 	rsbs	ip, ip, #0
 808368a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808368e:	eb6e 0101 	sbc.w	r1, lr, r1
 8083692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083696:	d31b      	bcc.n	80836d0 <__adddf3+0x124>
 8083698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808369c:	d30c      	bcc.n	80836b8 <__adddf3+0x10c>
 808369e:	0849      	lsrs	r1, r1, #1
 80836a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80836a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80836a8:	f104 0401 	add.w	r4, r4, #1
 80836ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80836b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80836b4:	f080 809a 	bcs.w	80837ec <__adddf3+0x240>
 80836b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80836bc:	bf08      	it	eq
 80836be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80836c2:	f150 0000 	adcs.w	r0, r0, #0
 80836c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80836ca:	ea41 0105 	orr.w	r1, r1, r5
 80836ce:	bd30      	pop	{r4, r5, pc}
 80836d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80836d4:	4140      	adcs	r0, r0
 80836d6:	eb41 0101 	adc.w	r1, r1, r1
 80836da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80836de:	f1a4 0401 	sub.w	r4, r4, #1
 80836e2:	d1e9      	bne.n	80836b8 <__adddf3+0x10c>
 80836e4:	f091 0f00 	teq	r1, #0
 80836e8:	bf04      	itt	eq
 80836ea:	4601      	moveq	r1, r0
 80836ec:	2000      	moveq	r0, #0
 80836ee:	fab1 f381 	clz	r3, r1
 80836f2:	bf08      	it	eq
 80836f4:	3320      	addeq	r3, #32
 80836f6:	f1a3 030b 	sub.w	r3, r3, #11
 80836fa:	f1b3 0220 	subs.w	r2, r3, #32
 80836fe:	da0c      	bge.n	808371a <__adddf3+0x16e>
 8083700:	320c      	adds	r2, #12
 8083702:	dd08      	ble.n	8083716 <__adddf3+0x16a>
 8083704:	f102 0c14 	add.w	ip, r2, #20
 8083708:	f1c2 020c 	rsb	r2, r2, #12
 808370c:	fa01 f00c 	lsl.w	r0, r1, ip
 8083710:	fa21 f102 	lsr.w	r1, r1, r2
 8083714:	e00c      	b.n	8083730 <__adddf3+0x184>
 8083716:	f102 0214 	add.w	r2, r2, #20
 808371a:	bfd8      	it	le
 808371c:	f1c2 0c20 	rsble	ip, r2, #32
 8083720:	fa01 f102 	lsl.w	r1, r1, r2
 8083724:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083728:	bfdc      	itt	le
 808372a:	ea41 010c 	orrle.w	r1, r1, ip
 808372e:	4090      	lslle	r0, r2
 8083730:	1ae4      	subs	r4, r4, r3
 8083732:	bfa2      	ittt	ge
 8083734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083738:	4329      	orrge	r1, r5
 808373a:	bd30      	popge	{r4, r5, pc}
 808373c:	ea6f 0404 	mvn.w	r4, r4
 8083740:	3c1f      	subs	r4, #31
 8083742:	da1c      	bge.n	808377e <__adddf3+0x1d2>
 8083744:	340c      	adds	r4, #12
 8083746:	dc0e      	bgt.n	8083766 <__adddf3+0x1ba>
 8083748:	f104 0414 	add.w	r4, r4, #20
 808374c:	f1c4 0220 	rsb	r2, r4, #32
 8083750:	fa20 f004 	lsr.w	r0, r0, r4
 8083754:	fa01 f302 	lsl.w	r3, r1, r2
 8083758:	ea40 0003 	orr.w	r0, r0, r3
 808375c:	fa21 f304 	lsr.w	r3, r1, r4
 8083760:	ea45 0103 	orr.w	r1, r5, r3
 8083764:	bd30      	pop	{r4, r5, pc}
 8083766:	f1c4 040c 	rsb	r4, r4, #12
 808376a:	f1c4 0220 	rsb	r2, r4, #32
 808376e:	fa20 f002 	lsr.w	r0, r0, r2
 8083772:	fa01 f304 	lsl.w	r3, r1, r4
 8083776:	ea40 0003 	orr.w	r0, r0, r3
 808377a:	4629      	mov	r1, r5
 808377c:	bd30      	pop	{r4, r5, pc}
 808377e:	fa21 f004 	lsr.w	r0, r1, r4
 8083782:	4629      	mov	r1, r5
 8083784:	bd30      	pop	{r4, r5, pc}
 8083786:	f094 0f00 	teq	r4, #0
 808378a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808378e:	bf06      	itte	eq
 8083790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083794:	3401      	addeq	r4, #1
 8083796:	3d01      	subne	r5, #1
 8083798:	e74e      	b.n	8083638 <__adddf3+0x8c>
 808379a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808379e:	bf18      	it	ne
 80837a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80837a4:	d029      	beq.n	80837fa <__adddf3+0x24e>
 80837a6:	ea94 0f05 	teq	r4, r5
 80837aa:	bf08      	it	eq
 80837ac:	ea90 0f02 	teqeq	r0, r2
 80837b0:	d005      	beq.n	80837be <__adddf3+0x212>
 80837b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80837b6:	bf04      	itt	eq
 80837b8:	4619      	moveq	r1, r3
 80837ba:	4610      	moveq	r0, r2
 80837bc:	bd30      	pop	{r4, r5, pc}
 80837be:	ea91 0f03 	teq	r1, r3
 80837c2:	bf1e      	ittt	ne
 80837c4:	2100      	movne	r1, #0
 80837c6:	2000      	movne	r0, #0
 80837c8:	bd30      	popne	{r4, r5, pc}
 80837ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80837ce:	d105      	bne.n	80837dc <__adddf3+0x230>
 80837d0:	0040      	lsls	r0, r0, #1
 80837d2:	4149      	adcs	r1, r1
 80837d4:	bf28      	it	cs
 80837d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80837da:	bd30      	pop	{r4, r5, pc}
 80837dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80837e0:	bf3c      	itt	cc
 80837e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80837e6:	bd30      	popcc	{r4, r5, pc}
 80837e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80837ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80837f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80837f4:	f04f 0000 	mov.w	r0, #0
 80837f8:	bd30      	pop	{r4, r5, pc}
 80837fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80837fe:	bf1a      	itte	ne
 8083800:	4619      	movne	r1, r3
 8083802:	4610      	movne	r0, r2
 8083804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083808:	bf1c      	itt	ne
 808380a:	460b      	movne	r3, r1
 808380c:	4602      	movne	r2, r0
 808380e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083812:	bf06      	itte	eq
 8083814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083818:	ea91 0f03 	teqeq	r1, r3
 808381c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083820:	bd30      	pop	{r4, r5, pc}
 8083822:	bf00      	nop

08083824 <__aeabi_ui2d>:
 8083824:	f090 0f00 	teq	r0, #0
 8083828:	bf04      	itt	eq
 808382a:	2100      	moveq	r1, #0
 808382c:	4770      	bxeq	lr
 808382e:	b530      	push	{r4, r5, lr}
 8083830:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083834:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083838:	f04f 0500 	mov.w	r5, #0
 808383c:	f04f 0100 	mov.w	r1, #0
 8083840:	e750      	b.n	80836e4 <__adddf3+0x138>
 8083842:	bf00      	nop

08083844 <__aeabi_i2d>:
 8083844:	f090 0f00 	teq	r0, #0
 8083848:	bf04      	itt	eq
 808384a:	2100      	moveq	r1, #0
 808384c:	4770      	bxeq	lr
 808384e:	b530      	push	{r4, r5, lr}
 8083850:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083854:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808385c:	bf48      	it	mi
 808385e:	4240      	negmi	r0, r0
 8083860:	f04f 0100 	mov.w	r1, #0
 8083864:	e73e      	b.n	80836e4 <__adddf3+0x138>
 8083866:	bf00      	nop

08083868 <__aeabi_f2d>:
 8083868:	0042      	lsls	r2, r0, #1
 808386a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808386e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083872:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083876:	bf1f      	itttt	ne
 8083878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808387c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083884:	4770      	bxne	lr
 8083886:	f092 0f00 	teq	r2, #0
 808388a:	bf14      	ite	ne
 808388c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083890:	4770      	bxeq	lr
 8083892:	b530      	push	{r4, r5, lr}
 8083894:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808389c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80838a0:	e720      	b.n	80836e4 <__adddf3+0x138>
 80838a2:	bf00      	nop

080838a4 <__aeabi_ul2d>:
 80838a4:	ea50 0201 	orrs.w	r2, r0, r1
 80838a8:	bf08      	it	eq
 80838aa:	4770      	bxeq	lr
 80838ac:	b530      	push	{r4, r5, lr}
 80838ae:	f04f 0500 	mov.w	r5, #0
 80838b2:	e00a      	b.n	80838ca <__aeabi_l2d+0x16>

080838b4 <__aeabi_l2d>:
 80838b4:	ea50 0201 	orrs.w	r2, r0, r1
 80838b8:	bf08      	it	eq
 80838ba:	4770      	bxeq	lr
 80838bc:	b530      	push	{r4, r5, lr}
 80838be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80838c2:	d502      	bpl.n	80838ca <__aeabi_l2d+0x16>
 80838c4:	4240      	negs	r0, r0
 80838c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80838ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80838ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80838d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80838d6:	f43f aedc 	beq.w	8083692 <__adddf3+0xe6>
 80838da:	f04f 0203 	mov.w	r2, #3
 80838de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80838e2:	bf18      	it	ne
 80838e4:	3203      	addne	r2, #3
 80838e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80838ea:	bf18      	it	ne
 80838ec:	3203      	addne	r2, #3
 80838ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80838f2:	f1c2 0320 	rsb	r3, r2, #32
 80838f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80838fa:	fa20 f002 	lsr.w	r0, r0, r2
 80838fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8083902:	ea40 000e 	orr.w	r0, r0, lr
 8083906:	fa21 f102 	lsr.w	r1, r1, r2
 808390a:	4414      	add	r4, r2
 808390c:	e6c1      	b.n	8083692 <__adddf3+0xe6>
 808390e:	bf00      	nop

08083910 <__aeabi_dmul>:
 8083910:	b570      	push	{r4, r5, r6, lr}
 8083912:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083916:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808391a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808391e:	bf1d      	ittte	ne
 8083920:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083924:	ea94 0f0c 	teqne	r4, ip
 8083928:	ea95 0f0c 	teqne	r5, ip
 808392c:	f000 f8de 	bleq	8083aec <__aeabi_dmul+0x1dc>
 8083930:	442c      	add	r4, r5
 8083932:	ea81 0603 	eor.w	r6, r1, r3
 8083936:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808393a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808393e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083942:	bf18      	it	ne
 8083944:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808394c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083950:	d038      	beq.n	80839c4 <__aeabi_dmul+0xb4>
 8083952:	fba0 ce02 	umull	ip, lr, r0, r2
 8083956:	f04f 0500 	mov.w	r5, #0
 808395a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808395e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083962:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083966:	f04f 0600 	mov.w	r6, #0
 808396a:	fbe1 5603 	umlal	r5, r6, r1, r3
 808396e:	f09c 0f00 	teq	ip, #0
 8083972:	bf18      	it	ne
 8083974:	f04e 0e01 	orrne.w	lr, lr, #1
 8083978:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808397c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083980:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083984:	d204      	bcs.n	8083990 <__aeabi_dmul+0x80>
 8083986:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808398a:	416d      	adcs	r5, r5
 808398c:	eb46 0606 	adc.w	r6, r6, r6
 8083990:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083994:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083998:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808399c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80839a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80839a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80839a8:	bf88      	it	hi
 80839aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80839ae:	d81e      	bhi.n	80839ee <__aeabi_dmul+0xde>
 80839b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80839b4:	bf08      	it	eq
 80839b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80839ba:	f150 0000 	adcs.w	r0, r0, #0
 80839be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80839c2:	bd70      	pop	{r4, r5, r6, pc}
 80839c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80839c8:	ea46 0101 	orr.w	r1, r6, r1
 80839cc:	ea40 0002 	orr.w	r0, r0, r2
 80839d0:	ea81 0103 	eor.w	r1, r1, r3
 80839d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80839d8:	bfc2      	ittt	gt
 80839da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80839de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80839e2:	bd70      	popgt	{r4, r5, r6, pc}
 80839e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80839e8:	f04f 0e00 	mov.w	lr, #0
 80839ec:	3c01      	subs	r4, #1
 80839ee:	f300 80ab 	bgt.w	8083b48 <__aeabi_dmul+0x238>
 80839f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80839f6:	bfde      	ittt	le
 80839f8:	2000      	movle	r0, #0
 80839fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80839fe:	bd70      	pople	{r4, r5, r6, pc}
 8083a00:	f1c4 0400 	rsb	r4, r4, #0
 8083a04:	3c20      	subs	r4, #32
 8083a06:	da35      	bge.n	8083a74 <__aeabi_dmul+0x164>
 8083a08:	340c      	adds	r4, #12
 8083a0a:	dc1b      	bgt.n	8083a44 <__aeabi_dmul+0x134>
 8083a0c:	f104 0414 	add.w	r4, r4, #20
 8083a10:	f1c4 0520 	rsb	r5, r4, #32
 8083a14:	fa00 f305 	lsl.w	r3, r0, r5
 8083a18:	fa20 f004 	lsr.w	r0, r0, r4
 8083a1c:	fa01 f205 	lsl.w	r2, r1, r5
 8083a20:	ea40 0002 	orr.w	r0, r0, r2
 8083a24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083a2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a30:	fa21 f604 	lsr.w	r6, r1, r4
 8083a34:	eb42 0106 	adc.w	r1, r2, r6
 8083a38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a3c:	bf08      	it	eq
 8083a3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a42:	bd70      	pop	{r4, r5, r6, pc}
 8083a44:	f1c4 040c 	rsb	r4, r4, #12
 8083a48:	f1c4 0520 	rsb	r5, r4, #32
 8083a4c:	fa00 f304 	lsl.w	r3, r0, r4
 8083a50:	fa20 f005 	lsr.w	r0, r0, r5
 8083a54:	fa01 f204 	lsl.w	r2, r1, r4
 8083a58:	ea40 0002 	orr.w	r0, r0, r2
 8083a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083a64:	f141 0100 	adc.w	r1, r1, #0
 8083a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083a6c:	bf08      	it	eq
 8083a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083a72:	bd70      	pop	{r4, r5, r6, pc}
 8083a74:	f1c4 0520 	rsb	r5, r4, #32
 8083a78:	fa00 f205 	lsl.w	r2, r0, r5
 8083a7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8083a80:	fa20 f304 	lsr.w	r3, r0, r4
 8083a84:	fa01 f205 	lsl.w	r2, r1, r5
 8083a88:	ea43 0302 	orr.w	r3, r3, r2
 8083a8c:	fa21 f004 	lsr.w	r0, r1, r4
 8083a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083a94:	fa21 f204 	lsr.w	r2, r1, r4
 8083a98:	ea20 0002 	bic.w	r0, r0, r2
 8083a9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083aa4:	bf08      	it	eq
 8083aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083aaa:	bd70      	pop	{r4, r5, r6, pc}
 8083aac:	f094 0f00 	teq	r4, #0
 8083ab0:	d10f      	bne.n	8083ad2 <__aeabi_dmul+0x1c2>
 8083ab2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083ab6:	0040      	lsls	r0, r0, #1
 8083ab8:	eb41 0101 	adc.w	r1, r1, r1
 8083abc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ac0:	bf08      	it	eq
 8083ac2:	3c01      	subeq	r4, #1
 8083ac4:	d0f7      	beq.n	8083ab6 <__aeabi_dmul+0x1a6>
 8083ac6:	ea41 0106 	orr.w	r1, r1, r6
 8083aca:	f095 0f00 	teq	r5, #0
 8083ace:	bf18      	it	ne
 8083ad0:	4770      	bxne	lr
 8083ad2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083ad6:	0052      	lsls	r2, r2, #1
 8083ad8:	eb43 0303 	adc.w	r3, r3, r3
 8083adc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083ae0:	bf08      	it	eq
 8083ae2:	3d01      	subeq	r5, #1
 8083ae4:	d0f7      	beq.n	8083ad6 <__aeabi_dmul+0x1c6>
 8083ae6:	ea43 0306 	orr.w	r3, r3, r6
 8083aea:	4770      	bx	lr
 8083aec:	ea94 0f0c 	teq	r4, ip
 8083af0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083af4:	bf18      	it	ne
 8083af6:	ea95 0f0c 	teqne	r5, ip
 8083afa:	d00c      	beq.n	8083b16 <__aeabi_dmul+0x206>
 8083afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083b00:	bf18      	it	ne
 8083b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083b06:	d1d1      	bne.n	8083aac <__aeabi_dmul+0x19c>
 8083b08:	ea81 0103 	eor.w	r1, r1, r3
 8083b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b10:	f04f 0000 	mov.w	r0, #0
 8083b14:	bd70      	pop	{r4, r5, r6, pc}
 8083b16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083b1a:	bf06      	itte	eq
 8083b1c:	4610      	moveq	r0, r2
 8083b1e:	4619      	moveq	r1, r3
 8083b20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083b24:	d019      	beq.n	8083b5a <__aeabi_dmul+0x24a>
 8083b26:	ea94 0f0c 	teq	r4, ip
 8083b2a:	d102      	bne.n	8083b32 <__aeabi_dmul+0x222>
 8083b2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083b30:	d113      	bne.n	8083b5a <__aeabi_dmul+0x24a>
 8083b32:	ea95 0f0c 	teq	r5, ip
 8083b36:	d105      	bne.n	8083b44 <__aeabi_dmul+0x234>
 8083b38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083b3c:	bf1c      	itt	ne
 8083b3e:	4610      	movne	r0, r2
 8083b40:	4619      	movne	r1, r3
 8083b42:	d10a      	bne.n	8083b5a <__aeabi_dmul+0x24a>
 8083b44:	ea81 0103 	eor.w	r1, r1, r3
 8083b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083b54:	f04f 0000 	mov.w	r0, #0
 8083b58:	bd70      	pop	{r4, r5, r6, pc}
 8083b5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083b5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083b62:	bd70      	pop	{r4, r5, r6, pc}

08083b64 <__aeabi_ddiv>:
 8083b64:	b570      	push	{r4, r5, r6, lr}
 8083b66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083b6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083b72:	bf1d      	ittte	ne
 8083b74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083b78:	ea94 0f0c 	teqne	r4, ip
 8083b7c:	ea95 0f0c 	teqne	r5, ip
 8083b80:	f000 f8a7 	bleq	8083cd2 <__aeabi_ddiv+0x16e>
 8083b84:	eba4 0405 	sub.w	r4, r4, r5
 8083b88:	ea81 0e03 	eor.w	lr, r1, r3
 8083b8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083b90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083b94:	f000 8088 	beq.w	8083ca8 <__aeabi_ddiv+0x144>
 8083b98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083b9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083ba0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083ba4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083ba8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083bac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083bb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083bb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083bb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083bbc:	429d      	cmp	r5, r3
 8083bbe:	bf08      	it	eq
 8083bc0:	4296      	cmpeq	r6, r2
 8083bc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083bc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083bca:	d202      	bcs.n	8083bd2 <__aeabi_ddiv+0x6e>
 8083bcc:	085b      	lsrs	r3, r3, #1
 8083bce:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bd2:	1ab6      	subs	r6, r6, r2
 8083bd4:	eb65 0503 	sbc.w	r5, r5, r3
 8083bd8:	085b      	lsrs	r3, r3, #1
 8083bda:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083be2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083be6:	ebb6 0e02 	subs.w	lr, r6, r2
 8083bea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083bee:	bf22      	ittt	cs
 8083bf0:	1ab6      	subcs	r6, r6, r2
 8083bf2:	4675      	movcs	r5, lr
 8083bf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8083bf8:	085b      	lsrs	r3, r3, #1
 8083bfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8083bfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c06:	bf22      	ittt	cs
 8083c08:	1ab6      	subcs	r6, r6, r2
 8083c0a:	4675      	movcs	r5, lr
 8083c0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083c10:	085b      	lsrs	r3, r3, #1
 8083c12:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c16:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c1e:	bf22      	ittt	cs
 8083c20:	1ab6      	subcs	r6, r6, r2
 8083c22:	4675      	movcs	r5, lr
 8083c24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083c28:	085b      	lsrs	r3, r3, #1
 8083c2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083c2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083c32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083c36:	bf22      	ittt	cs
 8083c38:	1ab6      	subcs	r6, r6, r2
 8083c3a:	4675      	movcs	r5, lr
 8083c3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083c40:	ea55 0e06 	orrs.w	lr, r5, r6
 8083c44:	d018      	beq.n	8083c78 <__aeabi_ddiv+0x114>
 8083c46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083c4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083c4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083c52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083c56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083c5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083c5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083c62:	d1c0      	bne.n	8083be6 <__aeabi_ddiv+0x82>
 8083c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c68:	d10b      	bne.n	8083c82 <__aeabi_ddiv+0x11e>
 8083c6a:	ea41 0100 	orr.w	r1, r1, r0
 8083c6e:	f04f 0000 	mov.w	r0, #0
 8083c72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083c76:	e7b6      	b.n	8083be6 <__aeabi_ddiv+0x82>
 8083c78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083c7c:	bf04      	itt	eq
 8083c7e:	4301      	orreq	r1, r0
 8083c80:	2000      	moveq	r0, #0
 8083c82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083c86:	bf88      	it	hi
 8083c88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083c8c:	f63f aeaf 	bhi.w	80839ee <__aeabi_dmul+0xde>
 8083c90:	ebb5 0c03 	subs.w	ip, r5, r3
 8083c94:	bf04      	itt	eq
 8083c96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083c9e:	f150 0000 	adcs.w	r0, r0, #0
 8083ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083ca6:	bd70      	pop	{r4, r5, r6, pc}
 8083ca8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083cac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083cb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083cb4:	bfc2      	ittt	gt
 8083cb6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083cba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083cbe:	bd70      	popgt	{r4, r5, r6, pc}
 8083cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083cc4:	f04f 0e00 	mov.w	lr, #0
 8083cc8:	3c01      	subs	r4, #1
 8083cca:	e690      	b.n	80839ee <__aeabi_dmul+0xde>
 8083ccc:	ea45 0e06 	orr.w	lr, r5, r6
 8083cd0:	e68d      	b.n	80839ee <__aeabi_dmul+0xde>
 8083cd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083cd6:	ea94 0f0c 	teq	r4, ip
 8083cda:	bf08      	it	eq
 8083cdc:	ea95 0f0c 	teqeq	r5, ip
 8083ce0:	f43f af3b 	beq.w	8083b5a <__aeabi_dmul+0x24a>
 8083ce4:	ea94 0f0c 	teq	r4, ip
 8083ce8:	d10a      	bne.n	8083d00 <__aeabi_ddiv+0x19c>
 8083cea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083cee:	f47f af34 	bne.w	8083b5a <__aeabi_dmul+0x24a>
 8083cf2:	ea95 0f0c 	teq	r5, ip
 8083cf6:	f47f af25 	bne.w	8083b44 <__aeabi_dmul+0x234>
 8083cfa:	4610      	mov	r0, r2
 8083cfc:	4619      	mov	r1, r3
 8083cfe:	e72c      	b.n	8083b5a <__aeabi_dmul+0x24a>
 8083d00:	ea95 0f0c 	teq	r5, ip
 8083d04:	d106      	bne.n	8083d14 <__aeabi_ddiv+0x1b0>
 8083d06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083d0a:	f43f aefd 	beq.w	8083b08 <__aeabi_dmul+0x1f8>
 8083d0e:	4610      	mov	r0, r2
 8083d10:	4619      	mov	r1, r3
 8083d12:	e722      	b.n	8083b5a <__aeabi_dmul+0x24a>
 8083d14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d18:	bf18      	it	ne
 8083d1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d1e:	f47f aec5 	bne.w	8083aac <__aeabi_dmul+0x19c>
 8083d22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083d26:	f47f af0d 	bne.w	8083b44 <__aeabi_dmul+0x234>
 8083d2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083d2e:	f47f aeeb 	bne.w	8083b08 <__aeabi_dmul+0x1f8>
 8083d32:	e712      	b.n	8083b5a <__aeabi_dmul+0x24a>

08083d34 <__aeabi_d2iz>:
 8083d34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083d38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083d3c:	d215      	bcs.n	8083d6a <__aeabi_d2iz+0x36>
 8083d3e:	d511      	bpl.n	8083d64 <__aeabi_d2iz+0x30>
 8083d40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083d44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083d48:	d912      	bls.n	8083d70 <__aeabi_d2iz+0x3c>
 8083d4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083d52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083d56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083d5a:	fa23 f002 	lsr.w	r0, r3, r2
 8083d5e:	bf18      	it	ne
 8083d60:	4240      	negne	r0, r0
 8083d62:	4770      	bx	lr
 8083d64:	f04f 0000 	mov.w	r0, #0
 8083d68:	4770      	bx	lr
 8083d6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083d6e:	d105      	bne.n	8083d7c <__aeabi_d2iz+0x48>
 8083d70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083d74:	bf08      	it	eq
 8083d76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083d7a:	4770      	bx	lr
 8083d7c:	f04f 0000 	mov.w	r0, #0
 8083d80:	4770      	bx	lr
 8083d82:	bf00      	nop

08083d84 <__aeabi_d2f>:
 8083d84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083d88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083d8c:	bf24      	itt	cs
 8083d8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083d92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083d96:	d90d      	bls.n	8083db4 <__aeabi_d2f+0x30>
 8083d98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083d9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083da0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083da4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083da8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083dac:	bf08      	it	eq
 8083dae:	f020 0001 	biceq.w	r0, r0, #1
 8083db2:	4770      	bx	lr
 8083db4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083db8:	d121      	bne.n	8083dfe <__aeabi_d2f+0x7a>
 8083dba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083dbe:	bfbc      	itt	lt
 8083dc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083dc4:	4770      	bxlt	lr
 8083dc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083dca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083dce:	f1c2 0218 	rsb	r2, r2, #24
 8083dd2:	f1c2 0c20 	rsb	ip, r2, #32
 8083dd6:	fa10 f30c 	lsls.w	r3, r0, ip
 8083dda:	fa20 f002 	lsr.w	r0, r0, r2
 8083dde:	bf18      	it	ne
 8083de0:	f040 0001 	orrne.w	r0, r0, #1
 8083de4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083de8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083dec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083df0:	ea40 000c 	orr.w	r0, r0, ip
 8083df4:	fa23 f302 	lsr.w	r3, r3, r2
 8083df8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083dfc:	e7cc      	b.n	8083d98 <__aeabi_d2f+0x14>
 8083dfe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083e02:	d107      	bne.n	8083e14 <__aeabi_d2f+0x90>
 8083e04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083e08:	bf1e      	ittt	ne
 8083e0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8083e0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083e12:	4770      	bxne	lr
 8083e14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083e20:	4770      	bx	lr
 8083e22:	bf00      	nop

08083e24 <__aeabi_frsub>:
 8083e24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083e28:	e002      	b.n	8083e30 <__addsf3>
 8083e2a:	bf00      	nop

08083e2c <__aeabi_fsub>:
 8083e2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083e30 <__addsf3>:
 8083e30:	0042      	lsls	r2, r0, #1
 8083e32:	bf1f      	itttt	ne
 8083e34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083e38:	ea92 0f03 	teqne	r2, r3
 8083e3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083e40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083e44:	d06a      	beq.n	8083f1c <__addsf3+0xec>
 8083e46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083e4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083e4e:	bfc1      	itttt	gt
 8083e50:	18d2      	addgt	r2, r2, r3
 8083e52:	4041      	eorgt	r1, r0
 8083e54:	4048      	eorgt	r0, r1
 8083e56:	4041      	eorgt	r1, r0
 8083e58:	bfb8      	it	lt
 8083e5a:	425b      	neglt	r3, r3
 8083e5c:	2b19      	cmp	r3, #25
 8083e5e:	bf88      	it	hi
 8083e60:	4770      	bxhi	lr
 8083e62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083e6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083e6e:	bf18      	it	ne
 8083e70:	4240      	negne	r0, r0
 8083e72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083e76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083e7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083e7e:	bf18      	it	ne
 8083e80:	4249      	negne	r1, r1
 8083e82:	ea92 0f03 	teq	r2, r3
 8083e86:	d03f      	beq.n	8083f08 <__addsf3+0xd8>
 8083e88:	f1a2 0201 	sub.w	r2, r2, #1
 8083e8c:	fa41 fc03 	asr.w	ip, r1, r3
 8083e90:	eb10 000c 	adds.w	r0, r0, ip
 8083e94:	f1c3 0320 	rsb	r3, r3, #32
 8083e98:	fa01 f103 	lsl.w	r1, r1, r3
 8083e9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083ea0:	d502      	bpl.n	8083ea8 <__addsf3+0x78>
 8083ea2:	4249      	negs	r1, r1
 8083ea4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083ea8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083eac:	d313      	bcc.n	8083ed6 <__addsf3+0xa6>
 8083eae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083eb2:	d306      	bcc.n	8083ec2 <__addsf3+0x92>
 8083eb4:	0840      	lsrs	r0, r0, #1
 8083eb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8083eba:	f102 0201 	add.w	r2, r2, #1
 8083ebe:	2afe      	cmp	r2, #254	; 0xfe
 8083ec0:	d251      	bcs.n	8083f66 <__addsf3+0x136>
 8083ec2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083ec6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083eca:	bf08      	it	eq
 8083ecc:	f020 0001 	biceq.w	r0, r0, #1
 8083ed0:	ea40 0003 	orr.w	r0, r0, r3
 8083ed4:	4770      	bx	lr
 8083ed6:	0049      	lsls	r1, r1, #1
 8083ed8:	eb40 0000 	adc.w	r0, r0, r0
 8083edc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083ee0:	f1a2 0201 	sub.w	r2, r2, #1
 8083ee4:	d1ed      	bne.n	8083ec2 <__addsf3+0x92>
 8083ee6:	fab0 fc80 	clz	ip, r0
 8083eea:	f1ac 0c08 	sub.w	ip, ip, #8
 8083eee:	ebb2 020c 	subs.w	r2, r2, ip
 8083ef2:	fa00 f00c 	lsl.w	r0, r0, ip
 8083ef6:	bfaa      	itet	ge
 8083ef8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083efc:	4252      	neglt	r2, r2
 8083efe:	4318      	orrge	r0, r3
 8083f00:	bfbc      	itt	lt
 8083f02:	40d0      	lsrlt	r0, r2
 8083f04:	4318      	orrlt	r0, r3
 8083f06:	4770      	bx	lr
 8083f08:	f092 0f00 	teq	r2, #0
 8083f0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083f10:	bf06      	itte	eq
 8083f12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083f16:	3201      	addeq	r2, #1
 8083f18:	3b01      	subne	r3, #1
 8083f1a:	e7b5      	b.n	8083e88 <__addsf3+0x58>
 8083f1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083f20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083f24:	bf18      	it	ne
 8083f26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083f2a:	d021      	beq.n	8083f70 <__addsf3+0x140>
 8083f2c:	ea92 0f03 	teq	r2, r3
 8083f30:	d004      	beq.n	8083f3c <__addsf3+0x10c>
 8083f32:	f092 0f00 	teq	r2, #0
 8083f36:	bf08      	it	eq
 8083f38:	4608      	moveq	r0, r1
 8083f3a:	4770      	bx	lr
 8083f3c:	ea90 0f01 	teq	r0, r1
 8083f40:	bf1c      	itt	ne
 8083f42:	2000      	movne	r0, #0
 8083f44:	4770      	bxne	lr
 8083f46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083f4a:	d104      	bne.n	8083f56 <__addsf3+0x126>
 8083f4c:	0040      	lsls	r0, r0, #1
 8083f4e:	bf28      	it	cs
 8083f50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083f54:	4770      	bx	lr
 8083f56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083f5a:	bf3c      	itt	cc
 8083f5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083f60:	4770      	bxcc	lr
 8083f62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083f66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083f6e:	4770      	bx	lr
 8083f70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083f74:	bf16      	itet	ne
 8083f76:	4608      	movne	r0, r1
 8083f78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083f7c:	4601      	movne	r1, r0
 8083f7e:	0242      	lsls	r2, r0, #9
 8083f80:	bf06      	itte	eq
 8083f82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083f86:	ea90 0f01 	teqeq	r0, r1
 8083f8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083f8e:	4770      	bx	lr

08083f90 <__aeabi_ui2f>:
 8083f90:	f04f 0300 	mov.w	r3, #0
 8083f94:	e004      	b.n	8083fa0 <__aeabi_i2f+0x8>
 8083f96:	bf00      	nop

08083f98 <__aeabi_i2f>:
 8083f98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083f9c:	bf48      	it	mi
 8083f9e:	4240      	negmi	r0, r0
 8083fa0:	ea5f 0c00 	movs.w	ip, r0
 8083fa4:	bf08      	it	eq
 8083fa6:	4770      	bxeq	lr
 8083fa8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083fac:	4601      	mov	r1, r0
 8083fae:	f04f 0000 	mov.w	r0, #0
 8083fb2:	e01c      	b.n	8083fee <__aeabi_l2f+0x2a>

08083fb4 <__aeabi_ul2f>:
 8083fb4:	ea50 0201 	orrs.w	r2, r0, r1
 8083fb8:	bf08      	it	eq
 8083fba:	4770      	bxeq	lr
 8083fbc:	f04f 0300 	mov.w	r3, #0
 8083fc0:	e00a      	b.n	8083fd8 <__aeabi_l2f+0x14>
 8083fc2:	bf00      	nop

08083fc4 <__aeabi_l2f>:
 8083fc4:	ea50 0201 	orrs.w	r2, r0, r1
 8083fc8:	bf08      	it	eq
 8083fca:	4770      	bxeq	lr
 8083fcc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083fd0:	d502      	bpl.n	8083fd8 <__aeabi_l2f+0x14>
 8083fd2:	4240      	negs	r0, r0
 8083fd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083fd8:	ea5f 0c01 	movs.w	ip, r1
 8083fdc:	bf02      	ittt	eq
 8083fde:	4684      	moveq	ip, r0
 8083fe0:	4601      	moveq	r1, r0
 8083fe2:	2000      	moveq	r0, #0
 8083fe4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083fe8:	bf08      	it	eq
 8083fea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083fee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083ff2:	fabc f28c 	clz	r2, ip
 8083ff6:	3a08      	subs	r2, #8
 8083ff8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083ffc:	db10      	blt.n	8084020 <__aeabi_l2f+0x5c>
 8083ffe:	fa01 fc02 	lsl.w	ip, r1, r2
 8084002:	4463      	add	r3, ip
 8084004:	fa00 fc02 	lsl.w	ip, r0, r2
 8084008:	f1c2 0220 	rsb	r2, r2, #32
 808400c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084010:	fa20 f202 	lsr.w	r2, r0, r2
 8084014:	eb43 0002 	adc.w	r0, r3, r2
 8084018:	bf08      	it	eq
 808401a:	f020 0001 	biceq.w	r0, r0, #1
 808401e:	4770      	bx	lr
 8084020:	f102 0220 	add.w	r2, r2, #32
 8084024:	fa01 fc02 	lsl.w	ip, r1, r2
 8084028:	f1c2 0220 	rsb	r2, r2, #32
 808402c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084030:	fa21 f202 	lsr.w	r2, r1, r2
 8084034:	eb43 0002 	adc.w	r0, r3, r2
 8084038:	bf08      	it	eq
 808403a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808403e:	4770      	bx	lr

08084040 <__aeabi_fmul>:
 8084040:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084044:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084048:	bf1e      	ittt	ne
 808404a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808404e:	ea92 0f0c 	teqne	r2, ip
 8084052:	ea93 0f0c 	teqne	r3, ip
 8084056:	d06f      	beq.n	8084138 <__aeabi_fmul+0xf8>
 8084058:	441a      	add	r2, r3
 808405a:	ea80 0c01 	eor.w	ip, r0, r1
 808405e:	0240      	lsls	r0, r0, #9
 8084060:	bf18      	it	ne
 8084062:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084066:	d01e      	beq.n	80840a6 <__aeabi_fmul+0x66>
 8084068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808406c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084070:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084074:	fba0 3101 	umull	r3, r1, r0, r1
 8084078:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808407c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084080:	bf3e      	ittt	cc
 8084082:	0049      	lslcc	r1, r1, #1
 8084084:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084088:	005b      	lslcc	r3, r3, #1
 808408a:	ea40 0001 	orr.w	r0, r0, r1
 808408e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8084092:	2afd      	cmp	r2, #253	; 0xfd
 8084094:	d81d      	bhi.n	80840d2 <__aeabi_fmul+0x92>
 8084096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808409a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808409e:	bf08      	it	eq
 80840a0:	f020 0001 	biceq.w	r0, r0, #1
 80840a4:	4770      	bx	lr
 80840a6:	f090 0f00 	teq	r0, #0
 80840aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80840ae:	bf08      	it	eq
 80840b0:	0249      	lsleq	r1, r1, #9
 80840b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80840b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80840ba:	3a7f      	subs	r2, #127	; 0x7f
 80840bc:	bfc2      	ittt	gt
 80840be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80840c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80840c6:	4770      	bxgt	lr
 80840c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840cc:	f04f 0300 	mov.w	r3, #0
 80840d0:	3a01      	subs	r2, #1
 80840d2:	dc5d      	bgt.n	8084190 <__aeabi_fmul+0x150>
 80840d4:	f112 0f19 	cmn.w	r2, #25
 80840d8:	bfdc      	itt	le
 80840da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80840de:	4770      	bxle	lr
 80840e0:	f1c2 0200 	rsb	r2, r2, #0
 80840e4:	0041      	lsls	r1, r0, #1
 80840e6:	fa21 f102 	lsr.w	r1, r1, r2
 80840ea:	f1c2 0220 	rsb	r2, r2, #32
 80840ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80840f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80840f6:	f140 0000 	adc.w	r0, r0, #0
 80840fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80840fe:	bf08      	it	eq
 8084100:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084104:	4770      	bx	lr
 8084106:	f092 0f00 	teq	r2, #0
 808410a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808410e:	bf02      	ittt	eq
 8084110:	0040      	lsleq	r0, r0, #1
 8084112:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084116:	3a01      	subeq	r2, #1
 8084118:	d0f9      	beq.n	808410e <__aeabi_fmul+0xce>
 808411a:	ea40 000c 	orr.w	r0, r0, ip
 808411e:	f093 0f00 	teq	r3, #0
 8084122:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084126:	bf02      	ittt	eq
 8084128:	0049      	lsleq	r1, r1, #1
 808412a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808412e:	3b01      	subeq	r3, #1
 8084130:	d0f9      	beq.n	8084126 <__aeabi_fmul+0xe6>
 8084132:	ea41 010c 	orr.w	r1, r1, ip
 8084136:	e78f      	b.n	8084058 <__aeabi_fmul+0x18>
 8084138:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808413c:	ea92 0f0c 	teq	r2, ip
 8084140:	bf18      	it	ne
 8084142:	ea93 0f0c 	teqne	r3, ip
 8084146:	d00a      	beq.n	808415e <__aeabi_fmul+0x11e>
 8084148:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808414c:	bf18      	it	ne
 808414e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084152:	d1d8      	bne.n	8084106 <__aeabi_fmul+0xc6>
 8084154:	ea80 0001 	eor.w	r0, r0, r1
 8084158:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808415c:	4770      	bx	lr
 808415e:	f090 0f00 	teq	r0, #0
 8084162:	bf17      	itett	ne
 8084164:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084168:	4608      	moveq	r0, r1
 808416a:	f091 0f00 	teqne	r1, #0
 808416e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8084172:	d014      	beq.n	808419e <__aeabi_fmul+0x15e>
 8084174:	ea92 0f0c 	teq	r2, ip
 8084178:	d101      	bne.n	808417e <__aeabi_fmul+0x13e>
 808417a:	0242      	lsls	r2, r0, #9
 808417c:	d10f      	bne.n	808419e <__aeabi_fmul+0x15e>
 808417e:	ea93 0f0c 	teq	r3, ip
 8084182:	d103      	bne.n	808418c <__aeabi_fmul+0x14c>
 8084184:	024b      	lsls	r3, r1, #9
 8084186:	bf18      	it	ne
 8084188:	4608      	movne	r0, r1
 808418a:	d108      	bne.n	808419e <__aeabi_fmul+0x15e>
 808418c:	ea80 0001 	eor.w	r0, r0, r1
 8084190:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808419c:	4770      	bx	lr
 808419e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80841a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80841a6:	4770      	bx	lr

080841a8 <__aeabi_fdiv>:
 80841a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80841ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80841b0:	bf1e      	ittt	ne
 80841b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80841b6:	ea92 0f0c 	teqne	r2, ip
 80841ba:	ea93 0f0c 	teqne	r3, ip
 80841be:	d069      	beq.n	8084294 <__aeabi_fdiv+0xec>
 80841c0:	eba2 0203 	sub.w	r2, r2, r3
 80841c4:	ea80 0c01 	eor.w	ip, r0, r1
 80841c8:	0249      	lsls	r1, r1, #9
 80841ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80841ce:	d037      	beq.n	8084240 <__aeabi_fdiv+0x98>
 80841d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80841d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80841d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80841dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80841e0:	428b      	cmp	r3, r1
 80841e2:	bf38      	it	cc
 80841e4:	005b      	lslcc	r3, r3, #1
 80841e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80841ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80841ee:	428b      	cmp	r3, r1
 80841f0:	bf24      	itt	cs
 80841f2:	1a5b      	subcs	r3, r3, r1
 80841f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80841f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80841fc:	bf24      	itt	cs
 80841fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8084202:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084206:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808420a:	bf24      	itt	cs
 808420c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084210:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084214:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084218:	bf24      	itt	cs
 808421a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808421e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084222:	011b      	lsls	r3, r3, #4
 8084224:	bf18      	it	ne
 8084226:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808422a:	d1e0      	bne.n	80841ee <__aeabi_fdiv+0x46>
 808422c:	2afd      	cmp	r2, #253	; 0xfd
 808422e:	f63f af50 	bhi.w	80840d2 <__aeabi_fmul+0x92>
 8084232:	428b      	cmp	r3, r1
 8084234:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084238:	bf08      	it	eq
 808423a:	f020 0001 	biceq.w	r0, r0, #1
 808423e:	4770      	bx	lr
 8084240:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084244:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084248:	327f      	adds	r2, #127	; 0x7f
 808424a:	bfc2      	ittt	gt
 808424c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084250:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084254:	4770      	bxgt	lr
 8084256:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808425a:	f04f 0300 	mov.w	r3, #0
 808425e:	3a01      	subs	r2, #1
 8084260:	e737      	b.n	80840d2 <__aeabi_fmul+0x92>
 8084262:	f092 0f00 	teq	r2, #0
 8084266:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808426a:	bf02      	ittt	eq
 808426c:	0040      	lsleq	r0, r0, #1
 808426e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084272:	3a01      	subeq	r2, #1
 8084274:	d0f9      	beq.n	808426a <__aeabi_fdiv+0xc2>
 8084276:	ea40 000c 	orr.w	r0, r0, ip
 808427a:	f093 0f00 	teq	r3, #0
 808427e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084282:	bf02      	ittt	eq
 8084284:	0049      	lsleq	r1, r1, #1
 8084286:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808428a:	3b01      	subeq	r3, #1
 808428c:	d0f9      	beq.n	8084282 <__aeabi_fdiv+0xda>
 808428e:	ea41 010c 	orr.w	r1, r1, ip
 8084292:	e795      	b.n	80841c0 <__aeabi_fdiv+0x18>
 8084294:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084298:	ea92 0f0c 	teq	r2, ip
 808429c:	d108      	bne.n	80842b0 <__aeabi_fdiv+0x108>
 808429e:	0242      	lsls	r2, r0, #9
 80842a0:	f47f af7d 	bne.w	808419e <__aeabi_fmul+0x15e>
 80842a4:	ea93 0f0c 	teq	r3, ip
 80842a8:	f47f af70 	bne.w	808418c <__aeabi_fmul+0x14c>
 80842ac:	4608      	mov	r0, r1
 80842ae:	e776      	b.n	808419e <__aeabi_fmul+0x15e>
 80842b0:	ea93 0f0c 	teq	r3, ip
 80842b4:	d104      	bne.n	80842c0 <__aeabi_fdiv+0x118>
 80842b6:	024b      	lsls	r3, r1, #9
 80842b8:	f43f af4c 	beq.w	8084154 <__aeabi_fmul+0x114>
 80842bc:	4608      	mov	r0, r1
 80842be:	e76e      	b.n	808419e <__aeabi_fmul+0x15e>
 80842c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80842c4:	bf18      	it	ne
 80842c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80842ca:	d1ca      	bne.n	8084262 <__aeabi_fdiv+0xba>
 80842cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80842d0:	f47f af5c 	bne.w	808418c <__aeabi_fmul+0x14c>
 80842d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80842d8:	f47f af3c 	bne.w	8084154 <__aeabi_fmul+0x114>
 80842dc:	e75f      	b.n	808419e <__aeabi_fmul+0x15e>
 80842de:	bf00      	nop

080842e0 <__aeabi_f2iz>:
 80842e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80842e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80842e8:	d30f      	bcc.n	808430a <__aeabi_f2iz+0x2a>
 80842ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80842ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80842f2:	d90d      	bls.n	8084310 <__aeabi_f2iz+0x30>
 80842f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80842f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80842fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084300:	fa23 f002 	lsr.w	r0, r3, r2
 8084304:	bf18      	it	ne
 8084306:	4240      	negne	r0, r0
 8084308:	4770      	bx	lr
 808430a:	f04f 0000 	mov.w	r0, #0
 808430e:	4770      	bx	lr
 8084310:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084314:	d101      	bne.n	808431a <__aeabi_f2iz+0x3a>
 8084316:	0242      	lsls	r2, r0, #9
 8084318:	d105      	bne.n	8084326 <__aeabi_f2iz+0x46>
 808431a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808431e:	bf08      	it	eq
 8084320:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084324:	4770      	bx	lr
 8084326:	f04f 0000 	mov.w	r0, #0
 808432a:	4770      	bx	lr

0808432c <atoi>:
 808432c:	220a      	movs	r2, #10
 808432e:	2100      	movs	r1, #0
 8084330:	f000 ba3c 	b.w	80847ac <strtol>

08084334 <__cxa_atexit>:
 8084334:	b510      	push	{r4, lr}
 8084336:	4c05      	ldr	r4, [pc, #20]	; (808434c <__cxa_atexit+0x18>)
 8084338:	4613      	mov	r3, r2
 808433a:	b12c      	cbz	r4, 8084348 <__cxa_atexit+0x14>
 808433c:	460a      	mov	r2, r1
 808433e:	4601      	mov	r1, r0
 8084340:	2002      	movs	r0, #2
 8084342:	f3af 8000 	nop.w
 8084346:	bd10      	pop	{r4, pc}
 8084348:	4620      	mov	r0, r4
 808434a:	bd10      	pop	{r4, pc}
 808434c:	00000000 	.word	0x00000000

08084350 <difftime>:
 8084350:	b508      	push	{r3, lr}
 8084352:	1a40      	subs	r0, r0, r1
 8084354:	f7ff fa76 	bl	8083844 <__aeabi_i2d>
 8084358:	bd08      	pop	{r3, pc}
	...

0808435c <localtime>:
 808435c:	b538      	push	{r3, r4, r5, lr}
 808435e:	4b07      	ldr	r3, [pc, #28]	; (808437c <localtime+0x20>)
 8084360:	4605      	mov	r5, r0
 8084362:	681c      	ldr	r4, [r3, #0]
 8084364:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084366:	b91b      	cbnz	r3, 8084370 <localtime+0x14>
 8084368:	2024      	movs	r0, #36	; 0x24
 808436a:	f7fd fc2f 	bl	8081bcc <malloc>
 808436e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084370:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084372:	4628      	mov	r0, r5
 8084374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084378:	f000 b802 	b.w	8084380 <localtime_r>
 808437c:	20000114 	.word	0x20000114

08084380 <localtime_r>:
 8084380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084384:	460c      	mov	r4, r1
 8084386:	4680      	mov	r8, r0
 8084388:	f000 fd16 	bl	8084db8 <__gettzinfo>
 808438c:	4621      	mov	r1, r4
 808438e:	4607      	mov	r7, r0
 8084390:	4640      	mov	r0, r8
 8084392:	f000 fd15 	bl	8084dc0 <gmtime_r>
 8084396:	6946      	ldr	r6, [r0, #20]
 8084398:	4604      	mov	r4, r0
 808439a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808439e:	07b3      	lsls	r3, r6, #30
 80843a0:	d105      	bne.n	80843ae <localtime_r+0x2e>
 80843a2:	2264      	movs	r2, #100	; 0x64
 80843a4:	fb96 f3f2 	sdiv	r3, r6, r2
 80843a8:	fb02 6313 	mls	r3, r2, r3, r6
 80843ac:	b94b      	cbnz	r3, 80843c2 <localtime_r+0x42>
 80843ae:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80843b2:	fb96 f3f5 	sdiv	r3, r6, r5
 80843b6:	fb05 6513 	mls	r5, r5, r3, r6
 80843ba:	fab5 f385 	clz	r3, r5
 80843be:	095b      	lsrs	r3, r3, #5
 80843c0:	e000      	b.n	80843c4 <localtime_r+0x44>
 80843c2:	2301      	movs	r3, #1
 80843c4:	4a5f      	ldr	r2, [pc, #380]	; (8084544 <localtime_r+0x1c4>)
 80843c6:	2530      	movs	r5, #48	; 0x30
 80843c8:	fb05 2503 	mla	r5, r5, r3, r2
 80843cc:	f000 fb28 	bl	8084a20 <__tz_lock>
 80843d0:	f000 fb28 	bl	8084a24 <_tzset_unlocked>
 80843d4:	4b5c      	ldr	r3, [pc, #368]	; (8084548 <localtime_r+0x1c8>)
 80843d6:	681b      	ldr	r3, [r3, #0]
 80843d8:	b1f3      	cbz	r3, 8084418 <localtime_r+0x98>
 80843da:	687b      	ldr	r3, [r7, #4]
 80843dc:	429e      	cmp	r6, r3
 80843de:	d105      	bne.n	80843ec <localtime_r+0x6c>
 80843e0:	6839      	ldr	r1, [r7, #0]
 80843e2:	f8d8 3000 	ldr.w	r3, [r8]
 80843e6:	69fa      	ldr	r2, [r7, #28]
 80843e8:	b941      	cbnz	r1, 80843fc <localtime_r+0x7c>
 80843ea:	e00a      	b.n	8084402 <localtime_r+0x82>
 80843ec:	4630      	mov	r0, r6
 80843ee:	f000 fa6f 	bl	80848d0 <__tzcalc_limits>
 80843f2:	2800      	cmp	r0, #0
 80843f4:	d1f4      	bne.n	80843e0 <localtime_r+0x60>
 80843f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80843fa:	e00d      	b.n	8084418 <localtime_r+0x98>
 80843fc:	4293      	cmp	r3, r2
 80843fe:	db08      	blt.n	8084412 <localtime_r+0x92>
 8084400:	e001      	b.n	8084406 <localtime_r+0x86>
 8084402:	4293      	cmp	r3, r2
 8084404:	da07      	bge.n	8084416 <localtime_r+0x96>
 8084406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084408:	4293      	cmp	r3, r2
 808440a:	bfac      	ite	ge
 808440c:	2300      	movge	r3, #0
 808440e:	2301      	movlt	r3, #1
 8084410:	e002      	b.n	8084418 <localtime_r+0x98>
 8084412:	2300      	movs	r3, #0
 8084414:	e000      	b.n	8084418 <localtime_r+0x98>
 8084416:	2301      	movs	r3, #1
 8084418:	6223      	str	r3, [r4, #32]
 808441a:	6a23      	ldr	r3, [r4, #32]
 808441c:	203c      	movs	r0, #60	; 0x3c
 808441e:	2b01      	cmp	r3, #1
 8084420:	bf0c      	ite	eq
 8084422:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8084424:	6a39      	ldrne	r1, [r7, #32]
 8084426:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808442a:	fb91 f6f3 	sdiv	r6, r1, r3
 808442e:	fb03 1316 	mls	r3, r3, r6, r1
 8084432:	fb93 f2f0 	sdiv	r2, r3, r0
 8084436:	fb00 3012 	mls	r0, r0, r2, r3
 808443a:	6861      	ldr	r1, [r4, #4]
 808443c:	6823      	ldr	r3, [r4, #0]
 808443e:	1a89      	subs	r1, r1, r2
 8084440:	68a2      	ldr	r2, [r4, #8]
 8084442:	1a1b      	subs	r3, r3, r0
 8084444:	1b92      	subs	r2, r2, r6
 8084446:	2b3b      	cmp	r3, #59	; 0x3b
 8084448:	6023      	str	r3, [r4, #0]
 808444a:	6061      	str	r1, [r4, #4]
 808444c:	60a2      	str	r2, [r4, #8]
 808444e:	dd03      	ble.n	8084458 <localtime_r+0xd8>
 8084450:	3101      	adds	r1, #1
 8084452:	6061      	str	r1, [r4, #4]
 8084454:	3b3c      	subs	r3, #60	; 0x3c
 8084456:	e004      	b.n	8084462 <localtime_r+0xe2>
 8084458:	2b00      	cmp	r3, #0
 808445a:	da03      	bge.n	8084464 <localtime_r+0xe4>
 808445c:	3901      	subs	r1, #1
 808445e:	6061      	str	r1, [r4, #4]
 8084460:	333c      	adds	r3, #60	; 0x3c
 8084462:	6023      	str	r3, [r4, #0]
 8084464:	6863      	ldr	r3, [r4, #4]
 8084466:	2b3b      	cmp	r3, #59	; 0x3b
 8084468:	dd03      	ble.n	8084472 <localtime_r+0xf2>
 808446a:	3201      	adds	r2, #1
 808446c:	60a2      	str	r2, [r4, #8]
 808446e:	3b3c      	subs	r3, #60	; 0x3c
 8084470:	e004      	b.n	808447c <localtime_r+0xfc>
 8084472:	2b00      	cmp	r3, #0
 8084474:	da03      	bge.n	808447e <localtime_r+0xfe>
 8084476:	3a01      	subs	r2, #1
 8084478:	60a2      	str	r2, [r4, #8]
 808447a:	333c      	adds	r3, #60	; 0x3c
 808447c:	6063      	str	r3, [r4, #4]
 808447e:	68a3      	ldr	r3, [r4, #8]
 8084480:	2b17      	cmp	r3, #23
 8084482:	dd22      	ble.n	80844ca <localtime_r+0x14a>
 8084484:	69e2      	ldr	r2, [r4, #28]
 8084486:	3b18      	subs	r3, #24
 8084488:	3201      	adds	r2, #1
 808448a:	61e2      	str	r2, [r4, #28]
 808448c:	69a2      	ldr	r2, [r4, #24]
 808448e:	60a3      	str	r3, [r4, #8]
 8084490:	3201      	adds	r2, #1
 8084492:	2a06      	cmp	r2, #6
 8084494:	bfc8      	it	gt
 8084496:	2200      	movgt	r2, #0
 8084498:	61a2      	str	r2, [r4, #24]
 808449a:	68e2      	ldr	r2, [r4, #12]
 808449c:	6923      	ldr	r3, [r4, #16]
 808449e:	3201      	adds	r2, #1
 80844a0:	60e2      	str	r2, [r4, #12]
 80844a2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80844a6:	428a      	cmp	r2, r1
 80844a8:	dd46      	ble.n	8084538 <localtime_r+0x1b8>
 80844aa:	3301      	adds	r3, #1
 80844ac:	2b0c      	cmp	r3, #12
 80844ae:	bf08      	it	eq
 80844b0:	6963      	ldreq	r3, [r4, #20]
 80844b2:	eba2 0201 	sub.w	r2, r2, r1
 80844b6:	60e2      	str	r2, [r4, #12]
 80844b8:	bf05      	ittet	eq
 80844ba:	3301      	addeq	r3, #1
 80844bc:	2200      	moveq	r2, #0
 80844be:	6123      	strne	r3, [r4, #16]
 80844c0:	6122      	streq	r2, [r4, #16]
 80844c2:	bf04      	itt	eq
 80844c4:	6163      	streq	r3, [r4, #20]
 80844c6:	61e2      	streq	r2, [r4, #28]
 80844c8:	e036      	b.n	8084538 <localtime_r+0x1b8>
 80844ca:	2b00      	cmp	r3, #0
 80844cc:	da34      	bge.n	8084538 <localtime_r+0x1b8>
 80844ce:	69e2      	ldr	r2, [r4, #28]
 80844d0:	3318      	adds	r3, #24
 80844d2:	3a01      	subs	r2, #1
 80844d4:	61e2      	str	r2, [r4, #28]
 80844d6:	69a2      	ldr	r2, [r4, #24]
 80844d8:	60a3      	str	r3, [r4, #8]
 80844da:	3a01      	subs	r2, #1
 80844dc:	bf48      	it	mi
 80844de:	2206      	movmi	r2, #6
 80844e0:	61a2      	str	r2, [r4, #24]
 80844e2:	68e2      	ldr	r2, [r4, #12]
 80844e4:	3a01      	subs	r2, #1
 80844e6:	60e2      	str	r2, [r4, #12]
 80844e8:	bb32      	cbnz	r2, 8084538 <localtime_r+0x1b8>
 80844ea:	6923      	ldr	r3, [r4, #16]
 80844ec:	3b01      	subs	r3, #1
 80844ee:	d401      	bmi.n	80844f4 <localtime_r+0x174>
 80844f0:	6123      	str	r3, [r4, #16]
 80844f2:	e01d      	b.n	8084530 <localtime_r+0x1b0>
 80844f4:	230b      	movs	r3, #11
 80844f6:	6123      	str	r3, [r4, #16]
 80844f8:	6963      	ldr	r3, [r4, #20]
 80844fa:	1e5a      	subs	r2, r3, #1
 80844fc:	f012 0f03 	tst.w	r2, #3
 8084500:	6162      	str	r2, [r4, #20]
 8084502:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8084506:	d105      	bne.n	8084514 <localtime_r+0x194>
 8084508:	2164      	movs	r1, #100	; 0x64
 808450a:	fb93 f2f1 	sdiv	r2, r3, r1
 808450e:	fb01 3212 	mls	r2, r1, r2, r3
 8084512:	b94a      	cbnz	r2, 8084528 <localtime_r+0x1a8>
 8084514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084518:	fb93 f2f1 	sdiv	r2, r3, r1
 808451c:	fb01 3312 	mls	r3, r1, r2, r3
 8084520:	fab3 f383 	clz	r3, r3
 8084524:	095b      	lsrs	r3, r3, #5
 8084526:	e000      	b.n	808452a <localtime_r+0x1aa>
 8084528:	2301      	movs	r3, #1
 808452a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808452e:	61e3      	str	r3, [r4, #28]
 8084530:	6923      	ldr	r3, [r4, #16]
 8084532:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8084536:	60e3      	str	r3, [r4, #12]
 8084538:	f000 fa73 	bl	8084a22 <__tz_unlock>
 808453c:	4620      	mov	r0, r4
 808453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084542:	bf00      	nop
 8084544:	080856b4 	.word	0x080856b4
 8084548:	20000848 	.word	0x20000848

0808454c <memcpy>:
 808454c:	b510      	push	{r4, lr}
 808454e:	1e43      	subs	r3, r0, #1
 8084550:	440a      	add	r2, r1
 8084552:	4291      	cmp	r1, r2
 8084554:	d004      	beq.n	8084560 <memcpy+0x14>
 8084556:	f811 4b01 	ldrb.w	r4, [r1], #1
 808455a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808455e:	e7f8      	b.n	8084552 <memcpy+0x6>
 8084560:	bd10      	pop	{r4, pc}

08084562 <memset>:
 8084562:	4603      	mov	r3, r0
 8084564:	4402      	add	r2, r0
 8084566:	4293      	cmp	r3, r2
 8084568:	d002      	beq.n	8084570 <memset+0xe>
 808456a:	f803 1b01 	strb.w	r1, [r3], #1
 808456e:	e7fa      	b.n	8084566 <memset+0x4>
 8084570:	4770      	bx	lr
	...

08084574 <srand>:
 8084574:	b538      	push	{r3, r4, r5, lr}
 8084576:	4b12      	ldr	r3, [pc, #72]	; (80845c0 <srand+0x4c>)
 8084578:	4605      	mov	r5, r0
 808457a:	681c      	ldr	r4, [r3, #0]
 808457c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808457e:	b9d3      	cbnz	r3, 80845b6 <srand+0x42>
 8084580:	2018      	movs	r0, #24
 8084582:	f7fd fb23 	bl	8081bcc <malloc>
 8084586:	f243 330e 	movw	r3, #13070	; 0x330e
 808458a:	63a0      	str	r0, [r4, #56]	; 0x38
 808458c:	8003      	strh	r3, [r0, #0]
 808458e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084592:	8043      	strh	r3, [r0, #2]
 8084594:	f241 2334 	movw	r3, #4660	; 0x1234
 8084598:	8083      	strh	r3, [r0, #4]
 808459a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808459e:	80c3      	strh	r3, [r0, #6]
 80845a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80845a4:	8103      	strh	r3, [r0, #8]
 80845a6:	2305      	movs	r3, #5
 80845a8:	8143      	strh	r3, [r0, #10]
 80845aa:	230b      	movs	r3, #11
 80845ac:	8183      	strh	r3, [r0, #12]
 80845ae:	2201      	movs	r2, #1
 80845b0:	2300      	movs	r3, #0
 80845b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80845b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80845b8:	2200      	movs	r2, #0
 80845ba:	611d      	str	r5, [r3, #16]
 80845bc:	615a      	str	r2, [r3, #20]
 80845be:	bd38      	pop	{r3, r4, r5, pc}
 80845c0:	20000114 	.word	0x20000114

080845c4 <strcat>:
 80845c4:	4602      	mov	r2, r0
 80845c6:	b510      	push	{r4, lr}
 80845c8:	4613      	mov	r3, r2
 80845ca:	781c      	ldrb	r4, [r3, #0]
 80845cc:	3201      	adds	r2, #1
 80845ce:	2c00      	cmp	r4, #0
 80845d0:	d1fa      	bne.n	80845c8 <strcat+0x4>
 80845d2:	3b01      	subs	r3, #1
 80845d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80845d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80845dc:	2a00      	cmp	r2, #0
 80845de:	d1f9      	bne.n	80845d4 <strcat+0x10>
 80845e0:	bd10      	pop	{r4, pc}

080845e2 <strcmp>:
 80845e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80845e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80845ea:	2a01      	cmp	r2, #1
 80845ec:	bf28      	it	cs
 80845ee:	429a      	cmpcs	r2, r3
 80845f0:	d0f7      	beq.n	80845e2 <strcmp>
 80845f2:	1ad0      	subs	r0, r2, r3
 80845f4:	4770      	bx	lr

080845f6 <strcpy>:
 80845f6:	4603      	mov	r3, r0
 80845f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80845fc:	f803 2b01 	strb.w	r2, [r3], #1
 8084600:	2a00      	cmp	r2, #0
 8084602:	d1f9      	bne.n	80845f8 <strcpy+0x2>
 8084604:	4770      	bx	lr
	...

08084608 <strdup>:
 8084608:	4b02      	ldr	r3, [pc, #8]	; (8084614 <strdup+0xc>)
 808460a:	4601      	mov	r1, r0
 808460c:	6818      	ldr	r0, [r3, #0]
 808460e:	f000 b803 	b.w	8084618 <_strdup_r>
 8084612:	bf00      	nop
 8084614:	20000114 	.word	0x20000114

08084618 <_strdup_r>:
 8084618:	b570      	push	{r4, r5, r6, lr}
 808461a:	4606      	mov	r6, r0
 808461c:	4608      	mov	r0, r1
 808461e:	460c      	mov	r4, r1
 8084620:	f000 f80d 	bl	808463e <strlen>
 8084624:	1c45      	adds	r5, r0, #1
 8084626:	4629      	mov	r1, r5
 8084628:	4630      	mov	r0, r6
 808462a:	f7fd faff 	bl	8081c2c <_malloc_r>
 808462e:	4606      	mov	r6, r0
 8084630:	b118      	cbz	r0, 808463a <_strdup_r+0x22>
 8084632:	462a      	mov	r2, r5
 8084634:	4621      	mov	r1, r4
 8084636:	f7ff ff89 	bl	808454c <memcpy>
 808463a:	4630      	mov	r0, r6
 808463c:	bd70      	pop	{r4, r5, r6, pc}

0808463e <strlen>:
 808463e:	4603      	mov	r3, r0
 8084640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084644:	2a00      	cmp	r2, #0
 8084646:	d1fb      	bne.n	8084640 <strlen+0x2>
 8084648:	1a18      	subs	r0, r3, r0
 808464a:	3801      	subs	r0, #1
 808464c:	4770      	bx	lr

0808464e <strncmp>:
 808464e:	b530      	push	{r4, r5, lr}
 8084650:	b182      	cbz	r2, 8084674 <strncmp+0x26>
 8084652:	1e45      	subs	r5, r0, #1
 8084654:	3901      	subs	r1, #1
 8084656:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808465a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808465e:	42a3      	cmp	r3, r4
 8084660:	d106      	bne.n	8084670 <strncmp+0x22>
 8084662:	43ec      	mvns	r4, r5
 8084664:	4414      	add	r4, r2
 8084666:	42e0      	cmn	r0, r4
 8084668:	d001      	beq.n	808466e <strncmp+0x20>
 808466a:	2b00      	cmp	r3, #0
 808466c:	d1f3      	bne.n	8084656 <strncmp+0x8>
 808466e:	461c      	mov	r4, r3
 8084670:	1b18      	subs	r0, r3, r4
 8084672:	bd30      	pop	{r4, r5, pc}
 8084674:	4610      	mov	r0, r2
 8084676:	bd30      	pop	{r4, r5, pc}

08084678 <strncpy>:
 8084678:	4603      	mov	r3, r0
 808467a:	b510      	push	{r4, lr}
 808467c:	b142      	cbz	r2, 8084690 <strncpy+0x18>
 808467e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084682:	3a01      	subs	r2, #1
 8084684:	f803 4b01 	strb.w	r4, [r3], #1
 8084688:	2c00      	cmp	r4, #0
 808468a:	d1f7      	bne.n	808467c <strncpy+0x4>
 808468c:	441a      	add	r2, r3
 808468e:	e000      	b.n	8084692 <strncpy+0x1a>
 8084690:	bd10      	pop	{r4, pc}
 8084692:	4293      	cmp	r3, r2
 8084694:	d002      	beq.n	808469c <strncpy+0x24>
 8084696:	f803 4b01 	strb.w	r4, [r3], #1
 808469a:	e7fa      	b.n	8084692 <strncpy+0x1a>
 808469c:	bd10      	pop	{r4, pc}
	...

080846a0 <_strtol_r>:
 80846a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80846a4:	460f      	mov	r7, r1
 80846a6:	4680      	mov	r8, r0
 80846a8:	483f      	ldr	r0, [pc, #252]	; (80847a8 <_strtol_r+0x108>)
 80846aa:	f8d0 9000 	ldr.w	r9, [r0]
 80846ae:	463d      	mov	r5, r7
 80846b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80846b4:	eb09 0004 	add.w	r0, r9, r4
 80846b8:	7840      	ldrb	r0, [r0, #1]
 80846ba:	f000 0008 	and.w	r0, r0, #8
 80846be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80846c2:	b108      	cbz	r0, 80846c8 <_strtol_r+0x28>
 80846c4:	462f      	mov	r7, r5
 80846c6:	e7f2      	b.n	80846ae <_strtol_r+0xe>
 80846c8:	2c2d      	cmp	r4, #45	; 0x2d
 80846ca:	d103      	bne.n	80846d4 <_strtol_r+0x34>
 80846cc:	1cbd      	adds	r5, r7, #2
 80846ce:	787c      	ldrb	r4, [r7, #1]
 80846d0:	2601      	movs	r6, #1
 80846d2:	e003      	b.n	80846dc <_strtol_r+0x3c>
 80846d4:	2c2b      	cmp	r4, #43	; 0x2b
 80846d6:	bf04      	itt	eq
 80846d8:	787c      	ldrbeq	r4, [r7, #1]
 80846da:	1cbd      	addeq	r5, r7, #2
 80846dc:	b113      	cbz	r3, 80846e4 <_strtol_r+0x44>
 80846de:	2b10      	cmp	r3, #16
 80846e0:	d10a      	bne.n	80846f8 <_strtol_r+0x58>
 80846e2:	e05b      	b.n	808479c <_strtol_r+0xfc>
 80846e4:	2c30      	cmp	r4, #48	; 0x30
 80846e6:	d157      	bne.n	8084798 <_strtol_r+0xf8>
 80846e8:	7828      	ldrb	r0, [r5, #0]
 80846ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80846ee:	2858      	cmp	r0, #88	; 0x58
 80846f0:	d14d      	bne.n	808478e <_strtol_r+0xee>
 80846f2:	786c      	ldrb	r4, [r5, #1]
 80846f4:	2310      	movs	r3, #16
 80846f6:	3502      	adds	r5, #2
 80846f8:	2e00      	cmp	r6, #0
 80846fa:	bf14      	ite	ne
 80846fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084700:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084704:	fbbc faf3 	udiv	sl, ip, r3
 8084708:	2700      	movs	r7, #0
 808470a:	4638      	mov	r0, r7
 808470c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084710:	eb09 0e04 	add.w	lr, r9, r4
 8084714:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084718:	f01e 0f04 	tst.w	lr, #4
 808471c:	d001      	beq.n	8084722 <_strtol_r+0x82>
 808471e:	3c30      	subs	r4, #48	; 0x30
 8084720:	e00b      	b.n	808473a <_strtol_r+0x9a>
 8084722:	f01e 0e03 	ands.w	lr, lr, #3
 8084726:	d01b      	beq.n	8084760 <_strtol_r+0xc0>
 8084728:	f1be 0f01 	cmp.w	lr, #1
 808472c:	bf0c      	ite	eq
 808472e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084732:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084736:	ebce 0404 	rsb	r4, lr, r4
 808473a:	42a3      	cmp	r3, r4
 808473c:	dd10      	ble.n	8084760 <_strtol_r+0xc0>
 808473e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084742:	d00a      	beq.n	808475a <_strtol_r+0xba>
 8084744:	4550      	cmp	r0, sl
 8084746:	d806      	bhi.n	8084756 <_strtol_r+0xb6>
 8084748:	d101      	bne.n	808474e <_strtol_r+0xae>
 808474a:	4564      	cmp	r4, ip
 808474c:	dc03      	bgt.n	8084756 <_strtol_r+0xb6>
 808474e:	fb03 4000 	mla	r0, r3, r0, r4
 8084752:	2701      	movs	r7, #1
 8084754:	e001      	b.n	808475a <_strtol_r+0xba>
 8084756:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808475a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808475e:	e7d7      	b.n	8084710 <_strtol_r+0x70>
 8084760:	1c7b      	adds	r3, r7, #1
 8084762:	d10c      	bne.n	808477e <_strtol_r+0xde>
 8084764:	2e00      	cmp	r6, #0
 8084766:	f04f 0322 	mov.w	r3, #34	; 0x22
 808476a:	bf14      	ite	ne
 808476c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084770:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084774:	f8c8 3000 	str.w	r3, [r8]
 8084778:	b92a      	cbnz	r2, 8084786 <_strtol_r+0xe6>
 808477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808477e:	b106      	cbz	r6, 8084782 <_strtol_r+0xe2>
 8084780:	4240      	negs	r0, r0
 8084782:	b172      	cbz	r2, 80847a2 <_strtol_r+0x102>
 8084784:	b107      	cbz	r7, 8084788 <_strtol_r+0xe8>
 8084786:	1e69      	subs	r1, r5, #1
 8084788:	6011      	str	r1, [r2, #0]
 808478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808478e:	2430      	movs	r4, #48	; 0x30
 8084790:	2b00      	cmp	r3, #0
 8084792:	d1b1      	bne.n	80846f8 <_strtol_r+0x58>
 8084794:	2308      	movs	r3, #8
 8084796:	e7af      	b.n	80846f8 <_strtol_r+0x58>
 8084798:	230a      	movs	r3, #10
 808479a:	e7ad      	b.n	80846f8 <_strtol_r+0x58>
 808479c:	2c30      	cmp	r4, #48	; 0x30
 808479e:	d0a3      	beq.n	80846e8 <_strtol_r+0x48>
 80847a0:	e7aa      	b.n	80846f8 <_strtol_r+0x58>
 80847a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80847a6:	bf00      	nop
 80847a8:	200000b0 	.word	0x200000b0

080847ac <strtol>:
 80847ac:	4613      	mov	r3, r2
 80847ae:	460a      	mov	r2, r1
 80847b0:	4601      	mov	r1, r0
 80847b2:	4802      	ldr	r0, [pc, #8]	; (80847bc <strtol+0x10>)
 80847b4:	6800      	ldr	r0, [r0, #0]
 80847b6:	f7ff bf73 	b.w	80846a0 <_strtol_r>
 80847ba:	bf00      	nop
 80847bc:	20000114 	.word	0x20000114

080847c0 <_strtoul_r>:
 80847c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80847c4:	460e      	mov	r6, r1
 80847c6:	4680      	mov	r8, r0
 80847c8:	483b      	ldr	r0, [pc, #236]	; (80848b8 <_strtoul_r+0xf8>)
 80847ca:	f8d0 9000 	ldr.w	r9, [r0]
 80847ce:	4635      	mov	r5, r6
 80847d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80847d4:	eb09 0004 	add.w	r0, r9, r4
 80847d8:	7840      	ldrb	r0, [r0, #1]
 80847da:	f000 0008 	and.w	r0, r0, #8
 80847de:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80847e2:	b108      	cbz	r0, 80847e8 <_strtoul_r+0x28>
 80847e4:	462e      	mov	r6, r5
 80847e6:	e7f2      	b.n	80847ce <_strtoul_r+0xe>
 80847e8:	2c2d      	cmp	r4, #45	; 0x2d
 80847ea:	d103      	bne.n	80847f4 <_strtoul_r+0x34>
 80847ec:	1cb5      	adds	r5, r6, #2
 80847ee:	7874      	ldrb	r4, [r6, #1]
 80847f0:	2701      	movs	r7, #1
 80847f2:	e003      	b.n	80847fc <_strtoul_r+0x3c>
 80847f4:	2c2b      	cmp	r4, #43	; 0x2b
 80847f6:	bf04      	itt	eq
 80847f8:	7874      	ldrbeq	r4, [r6, #1]
 80847fa:	1cb5      	addeq	r5, r6, #2
 80847fc:	b113      	cbz	r3, 8084804 <_strtoul_r+0x44>
 80847fe:	2b10      	cmp	r3, #16
 8084800:	d10a      	bne.n	8084818 <_strtoul_r+0x58>
 8084802:	e053      	b.n	80848ac <_strtoul_r+0xec>
 8084804:	2c30      	cmp	r4, #48	; 0x30
 8084806:	d14f      	bne.n	80848a8 <_strtoul_r+0xe8>
 8084808:	7828      	ldrb	r0, [r5, #0]
 808480a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808480e:	2858      	cmp	r0, #88	; 0x58
 8084810:	d145      	bne.n	808489e <_strtoul_r+0xde>
 8084812:	786c      	ldrb	r4, [r5, #1]
 8084814:	2310      	movs	r3, #16
 8084816:	3502      	adds	r5, #2
 8084818:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808481c:	fbbc fcf3 	udiv	ip, ip, r3
 8084820:	fb03 fa0c 	mul.w	sl, r3, ip
 8084824:	2600      	movs	r6, #0
 8084826:	ea6f 0a0a 	mvn.w	sl, sl
 808482a:	4630      	mov	r0, r6
 808482c:	eb09 0e04 	add.w	lr, r9, r4
 8084830:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084834:	f01e 0f04 	tst.w	lr, #4
 8084838:	d001      	beq.n	808483e <_strtoul_r+0x7e>
 808483a:	3c30      	subs	r4, #48	; 0x30
 808483c:	e00b      	b.n	8084856 <_strtoul_r+0x96>
 808483e:	f01e 0e03 	ands.w	lr, lr, #3
 8084842:	d01a      	beq.n	808487a <_strtoul_r+0xba>
 8084844:	f1be 0f01 	cmp.w	lr, #1
 8084848:	bf0c      	ite	eq
 808484a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808484e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084852:	ebce 0404 	rsb	r4, lr, r4
 8084856:	42a3      	cmp	r3, r4
 8084858:	dd0f      	ble.n	808487a <_strtoul_r+0xba>
 808485a:	2e00      	cmp	r6, #0
 808485c:	db08      	blt.n	8084870 <_strtoul_r+0xb0>
 808485e:	4560      	cmp	r0, ip
 8084860:	d806      	bhi.n	8084870 <_strtoul_r+0xb0>
 8084862:	d101      	bne.n	8084868 <_strtoul_r+0xa8>
 8084864:	4554      	cmp	r4, sl
 8084866:	dc03      	bgt.n	8084870 <_strtoul_r+0xb0>
 8084868:	fb03 4000 	mla	r0, r3, r0, r4
 808486c:	2601      	movs	r6, #1
 808486e:	e001      	b.n	8084874 <_strtoul_r+0xb4>
 8084870:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084878:	e7d8      	b.n	808482c <_strtoul_r+0x6c>
 808487a:	2e00      	cmp	r6, #0
 808487c:	da07      	bge.n	808488e <_strtoul_r+0xce>
 808487e:	2322      	movs	r3, #34	; 0x22
 8084880:	f8c8 3000 	str.w	r3, [r8]
 8084884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084888:	b92a      	cbnz	r2, 8084896 <_strtoul_r+0xd6>
 808488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808488e:	b107      	cbz	r7, 8084892 <_strtoul_r+0xd2>
 8084890:	4240      	negs	r0, r0
 8084892:	b172      	cbz	r2, 80848b2 <_strtoul_r+0xf2>
 8084894:	b106      	cbz	r6, 8084898 <_strtoul_r+0xd8>
 8084896:	1e69      	subs	r1, r5, #1
 8084898:	6011      	str	r1, [r2, #0]
 808489a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808489e:	2430      	movs	r4, #48	; 0x30
 80848a0:	2b00      	cmp	r3, #0
 80848a2:	d1b9      	bne.n	8084818 <_strtoul_r+0x58>
 80848a4:	2308      	movs	r3, #8
 80848a6:	e7b7      	b.n	8084818 <_strtoul_r+0x58>
 80848a8:	230a      	movs	r3, #10
 80848aa:	e7b5      	b.n	8084818 <_strtoul_r+0x58>
 80848ac:	2c30      	cmp	r4, #48	; 0x30
 80848ae:	d0ab      	beq.n	8084808 <_strtoul_r+0x48>
 80848b0:	e7b2      	b.n	8084818 <_strtoul_r+0x58>
 80848b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80848b6:	bf00      	nop
 80848b8:	200000b0 	.word	0x200000b0

080848bc <strtoul>:
 80848bc:	4613      	mov	r3, r2
 80848be:	460a      	mov	r2, r1
 80848c0:	4601      	mov	r1, r0
 80848c2:	4802      	ldr	r0, [pc, #8]	; (80848cc <strtoul+0x10>)
 80848c4:	6800      	ldr	r0, [r0, #0]
 80848c6:	f7ff bf7b 	b.w	80847c0 <_strtoul_r>
 80848ca:	bf00      	nop
 80848cc:	20000114 	.word	0x20000114

080848d0 <__tzcalc_limits>:
 80848d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80848d4:	4604      	mov	r4, r0
 80848d6:	f000 fa6f 	bl	8084db8 <__gettzinfo>
 80848da:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80848de:	429c      	cmp	r4, r3
 80848e0:	f340 8096 	ble.w	8084a10 <__tzcalc_limits+0x140>
 80848e4:	f240 156d 	movw	r5, #365	; 0x16d
 80848e8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80848ec:	18e3      	adds	r3, r4, r3
 80848ee:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80848f2:	109b      	asrs	r3, r3, #2
 80848f4:	fb05 3502 	mla	r5, r5, r2, r3
 80848f8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80848fc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8084900:	fb92 f3f3 	sdiv	r3, r2, r3
 8084904:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8084908:	442b      	add	r3, r5
 808490a:	18a5      	adds	r5, r4, r2
 808490c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084910:	fb94 f7f2 	sdiv	r7, r4, r2
 8084914:	fb95 f5f2 	sdiv	r5, r5, r2
 8084918:	fb02 4717 	mls	r7, r2, r7, r4
 808491c:	441d      	add	r5, r3
 808491e:	2364      	movs	r3, #100	; 0x64
 8084920:	fb94 f6f3 	sdiv	r6, r4, r3
 8084924:	fab7 fe87 	clz	lr, r7
 8084928:	4601      	mov	r1, r0
 808492a:	fb03 4616 	mls	r6, r3, r6, r4
 808492e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8084932:	9301      	str	r3, [sp, #4]
 8084934:	f004 0303 	and.w	r3, r4, #3
 8084938:	6044      	str	r4, [r0, #4]
 808493a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808493e:	9300      	str	r3, [sp, #0]
 8084940:	f04f 0c07 	mov.w	ip, #7
 8084944:	7a0b      	ldrb	r3, [r1, #8]
 8084946:	2b4a      	cmp	r3, #74	; 0x4a
 8084948:	d10e      	bne.n	8084968 <__tzcalc_limits+0x98>
 808494a:	694b      	ldr	r3, [r1, #20]
 808494c:	9a00      	ldr	r2, [sp, #0]
 808494e:	18ec      	adds	r4, r5, r3
 8084950:	b902      	cbnz	r2, 8084954 <__tzcalc_limits+0x84>
 8084952:	b906      	cbnz	r6, 8084956 <__tzcalc_limits+0x86>
 8084954:	b927      	cbnz	r7, 8084960 <__tzcalc_limits+0x90>
 8084956:	2b3b      	cmp	r3, #59	; 0x3b
 8084958:	bfd4      	ite	le
 808495a:	2300      	movle	r3, #0
 808495c:	2301      	movgt	r3, #1
 808495e:	e000      	b.n	8084962 <__tzcalc_limits+0x92>
 8084960:	2300      	movs	r3, #0
 8084962:	4423      	add	r3, r4
 8084964:	3b01      	subs	r3, #1
 8084966:	e03f      	b.n	80849e8 <__tzcalc_limits+0x118>
 8084968:	2b44      	cmp	r3, #68	; 0x44
 808496a:	d102      	bne.n	8084972 <__tzcalc_limits+0xa2>
 808496c:	694b      	ldr	r3, [r1, #20]
 808496e:	442b      	add	r3, r5
 8084970:	e03a      	b.n	80849e8 <__tzcalc_limits+0x118>
 8084972:	9b00      	ldr	r3, [sp, #0]
 8084974:	b92b      	cbnz	r3, 8084982 <__tzcalc_limits+0xb2>
 8084976:	2e00      	cmp	r6, #0
 8084978:	bf0c      	ite	eq
 808497a:	46f0      	moveq	r8, lr
 808497c:	f04f 0801 	movne.w	r8, #1
 8084980:	e000      	b.n	8084984 <__tzcalc_limits+0xb4>
 8084982:	46f0      	mov	r8, lr
 8084984:	46a9      	mov	r9, r5
 8084986:	4b24      	ldr	r3, [pc, #144]	; (8084a18 <__tzcalc_limits+0x148>)
 8084988:	2230      	movs	r2, #48	; 0x30
 808498a:	fb02 3808 	mla	r8, r2, r8, r3
 808498e:	68cc      	ldr	r4, [r1, #12]
 8084990:	f1a8 0a04 	sub.w	sl, r8, #4
 8084994:	2301      	movs	r3, #1
 8084996:	42a3      	cmp	r3, r4
 8084998:	da04      	bge.n	80849a4 <__tzcalc_limits+0xd4>
 808499a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808499e:	3301      	adds	r3, #1
 80849a0:	44d9      	add	r9, fp
 80849a2:	e7f8      	b.n	8084996 <__tzcalc_limits+0xc6>
 80849a4:	f109 0304 	add.w	r3, r9, #4
 80849a8:	fb93 fbfc 	sdiv	fp, r3, ip
 80849ac:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80849b0:	ebca 0a03 	rsb	sl, sl, r3
 80849b4:	694b      	ldr	r3, [r1, #20]
 80849b6:	2c01      	cmp	r4, #1
 80849b8:	bfb8      	it	lt
 80849ba:	2401      	movlt	r4, #1
 80849bc:	ebb3 0a0a 	subs.w	sl, r3, sl
 80849c0:	690b      	ldr	r3, [r1, #16]
 80849c2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80849c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80849ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80849ce:	bf48      	it	mi
 80849d0:	f10a 0a07 	addmi.w	sl, sl, #7
 80849d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80849d8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80849dc:	4453      	add	r3, sl
 80849de:	42a3      	cmp	r3, r4
 80849e0:	db01      	blt.n	80849e6 <__tzcalc_limits+0x116>
 80849e2:	3b07      	subs	r3, #7
 80849e4:	e7fb      	b.n	80849de <__tzcalc_limits+0x10e>
 80849e6:	444b      	add	r3, r9
 80849e8:	698c      	ldr	r4, [r1, #24]
 80849ea:	4a0c      	ldr	r2, [pc, #48]	; (8084a1c <__tzcalc_limits+0x14c>)
 80849ec:	fb02 4303 	mla	r3, r2, r3, r4
 80849f0:	6a0c      	ldr	r4, [r1, #32]
 80849f2:	4423      	add	r3, r4
 80849f4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80849f8:	9b01      	ldr	r3, [sp, #4]
 80849fa:	4299      	cmp	r1, r3
 80849fc:	d1a2      	bne.n	8084944 <__tzcalc_limits+0x74>
 80849fe:	69c3      	ldr	r3, [r0, #28]
 8084a00:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8084a02:	4293      	cmp	r3, r2
 8084a04:	bfac      	ite	ge
 8084a06:	2300      	movge	r3, #0
 8084a08:	2301      	movlt	r3, #1
 8084a0a:	6003      	str	r3, [r0, #0]
 8084a0c:	2001      	movs	r0, #1
 8084a0e:	e000      	b.n	8084a12 <__tzcalc_limits+0x142>
 8084a10:	2000      	movs	r0, #0
 8084a12:	b003      	add	sp, #12
 8084a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a18:	080856b4 	.word	0x080856b4
 8084a1c:	00015180 	.word	0x00015180

08084a20 <__tz_lock>:
 8084a20:	4770      	bx	lr

08084a22 <__tz_unlock>:
 8084a22:	4770      	bx	lr

08084a24 <_tzset_unlocked>:
 8084a24:	4b01      	ldr	r3, [pc, #4]	; (8084a2c <_tzset_unlocked+0x8>)
 8084a26:	6818      	ldr	r0, [r3, #0]
 8084a28:	f000 b802 	b.w	8084a30 <_tzset_unlocked_r>
 8084a2c:	20000114 	.word	0x20000114

08084a30 <_tzset_unlocked_r>:
 8084a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084a34:	b08d      	sub	sp, #52	; 0x34
 8084a36:	4607      	mov	r7, r0
 8084a38:	f000 f9be 	bl	8084db8 <__gettzinfo>
 8084a3c:	49b0      	ldr	r1, [pc, #704]	; (8084d00 <_tzset_unlocked_r+0x2d0>)
 8084a3e:	4604      	mov	r4, r0
 8084a40:	4638      	mov	r0, r7
 8084a42:	f000 f9b1 	bl	8084da8 <_getenv_r>
 8084a46:	4eaf      	ldr	r6, [pc, #700]	; (8084d04 <_tzset_unlocked_r+0x2d4>)
 8084a48:	4605      	mov	r5, r0
 8084a4a:	b960      	cbnz	r0, 8084a66 <_tzset_unlocked_r+0x36>
 8084a4c:	4bae      	ldr	r3, [pc, #696]	; (8084d08 <_tzset_unlocked_r+0x2d8>)
 8084a4e:	4aaf      	ldr	r2, [pc, #700]	; (8084d0c <_tzset_unlocked_r+0x2dc>)
 8084a50:	6018      	str	r0, [r3, #0]
 8084a52:	4baf      	ldr	r3, [pc, #700]	; (8084d10 <_tzset_unlocked_r+0x2e0>)
 8084a54:	6018      	str	r0, [r3, #0]
 8084a56:	4baf      	ldr	r3, [pc, #700]	; (8084d14 <_tzset_unlocked_r+0x2e4>)
 8084a58:	6830      	ldr	r0, [r6, #0]
 8084a5a:	601a      	str	r2, [r3, #0]
 8084a5c:	605a      	str	r2, [r3, #4]
 8084a5e:	f7fd f8bd 	bl	8081bdc <free>
 8084a62:	6035      	str	r5, [r6, #0]
 8084a64:	e148      	b.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084a66:	6831      	ldr	r1, [r6, #0]
 8084a68:	b979      	cbnz	r1, 8084a8a <_tzset_unlocked_r+0x5a>
 8084a6a:	6830      	ldr	r0, [r6, #0]
 8084a6c:	f7fd f8b6 	bl	8081bdc <free>
 8084a70:	4628      	mov	r0, r5
 8084a72:	f7ff fde4 	bl	808463e <strlen>
 8084a76:	1c41      	adds	r1, r0, #1
 8084a78:	4638      	mov	r0, r7
 8084a7a:	f7fd f8d7 	bl	8081c2c <_malloc_r>
 8084a7e:	6030      	str	r0, [r6, #0]
 8084a80:	b148      	cbz	r0, 8084a96 <_tzset_unlocked_r+0x66>
 8084a82:	4629      	mov	r1, r5
 8084a84:	f7ff fdb7 	bl	80845f6 <strcpy>
 8084a88:	e005      	b.n	8084a96 <_tzset_unlocked_r+0x66>
 8084a8a:	f7ff fdaa 	bl	80845e2 <strcmp>
 8084a8e:	2800      	cmp	r0, #0
 8084a90:	f000 8132 	beq.w	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084a94:	e7e9      	b.n	8084a6a <_tzset_unlocked_r+0x3a>
 8084a96:	782b      	ldrb	r3, [r5, #0]
 8084a98:	ae0a      	add	r6, sp, #40	; 0x28
 8084a9a:	2b3a      	cmp	r3, #58	; 0x3a
 8084a9c:	bf08      	it	eq
 8084a9e:	3501      	addeq	r5, #1
 8084aa0:	4633      	mov	r3, r6
 8084aa2:	4a9d      	ldr	r2, [pc, #628]	; (8084d18 <_tzset_unlocked_r+0x2e8>)
 8084aa4:	499d      	ldr	r1, [pc, #628]	; (8084d1c <_tzset_unlocked_r+0x2ec>)
 8084aa6:	4628      	mov	r0, r5
 8084aa8:	f7fd f8a8 	bl	8081bfc <siscanf>
 8084aac:	2800      	cmp	r0, #0
 8084aae:	f340 8123 	ble.w	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084ab4:	18ef      	adds	r7, r5, r3
 8084ab6:	5ceb      	ldrb	r3, [r5, r3]
 8084ab8:	2b2d      	cmp	r3, #45	; 0x2d
 8084aba:	d103      	bne.n	8084ac4 <_tzset_unlocked_r+0x94>
 8084abc:	3701      	adds	r7, #1
 8084abe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084ac2:	e003      	b.n	8084acc <_tzset_unlocked_r+0x9c>
 8084ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8084ac6:	bf08      	it	eq
 8084ac8:	3701      	addeq	r7, #1
 8084aca:	2501      	movs	r5, #1
 8084acc:	f10d 0a20 	add.w	sl, sp, #32
 8084ad0:	f10d 0b1e 	add.w	fp, sp, #30
 8084ad4:	f04f 0800 	mov.w	r8, #0
 8084ad8:	9603      	str	r6, [sp, #12]
 8084ada:	f8cd a008 	str.w	sl, [sp, #8]
 8084ade:	9601      	str	r6, [sp, #4]
 8084ae0:	f8cd b000 	str.w	fp, [sp]
 8084ae4:	4633      	mov	r3, r6
 8084ae6:	aa07      	add	r2, sp, #28
 8084ae8:	498d      	ldr	r1, [pc, #564]	; (8084d20 <_tzset_unlocked_r+0x2f0>)
 8084aea:	4638      	mov	r0, r7
 8084aec:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084af0:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084af4:	f7fd f882 	bl	8081bfc <siscanf>
 8084af8:	4540      	cmp	r0, r8
 8084afa:	f340 80fd 	ble.w	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084afe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084b02:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084b06:	213c      	movs	r1, #60	; 0x3c
 8084b08:	fb01 3302 	mla	r3, r1, r2, r3
 8084b0c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084b10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084b14:	fb01 3302 	mla	r3, r1, r2, r3
 8084b18:	435d      	muls	r5, r3
 8084b1a:	4b7f      	ldr	r3, [pc, #508]	; (8084d18 <_tzset_unlocked_r+0x2e8>)
 8084b1c:	6225      	str	r5, [r4, #32]
 8084b1e:	4d7d      	ldr	r5, [pc, #500]	; (8084d14 <_tzset_unlocked_r+0x2e4>)
 8084b20:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084d2c <_tzset_unlocked_r+0x2fc>
 8084b24:	602b      	str	r3, [r5, #0]
 8084b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b28:	464a      	mov	r2, r9
 8084b2a:	441f      	add	r7, r3
 8084b2c:	497b      	ldr	r1, [pc, #492]	; (8084d1c <_tzset_unlocked_r+0x2ec>)
 8084b2e:	4633      	mov	r3, r6
 8084b30:	4638      	mov	r0, r7
 8084b32:	f7fd f863 	bl	8081bfc <siscanf>
 8084b36:	4540      	cmp	r0, r8
 8084b38:	dc08      	bgt.n	8084b4c <_tzset_unlocked_r+0x11c>
 8084b3a:	682b      	ldr	r3, [r5, #0]
 8084b3c:	6a22      	ldr	r2, [r4, #32]
 8084b3e:	606b      	str	r3, [r5, #4]
 8084b40:	4b71      	ldr	r3, [pc, #452]	; (8084d08 <_tzset_unlocked_r+0x2d8>)
 8084b42:	601a      	str	r2, [r3, #0]
 8084b44:	4b72      	ldr	r3, [pc, #456]	; (8084d10 <_tzset_unlocked_r+0x2e0>)
 8084b46:	f8c3 8000 	str.w	r8, [r3]
 8084b4a:	e0d5      	b.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b4e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084b52:	18fd      	adds	r5, r7, r3
 8084b54:	5cfb      	ldrb	r3, [r7, r3]
 8084b56:	2b2d      	cmp	r3, #45	; 0x2d
 8084b58:	d103      	bne.n	8084b62 <_tzset_unlocked_r+0x132>
 8084b5a:	3501      	adds	r5, #1
 8084b5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084b60:	e003      	b.n	8084b6a <_tzset_unlocked_r+0x13a>
 8084b62:	2b2b      	cmp	r3, #43	; 0x2b
 8084b64:	bf08      	it	eq
 8084b66:	3501      	addeq	r5, #1
 8084b68:	2701      	movs	r7, #1
 8084b6a:	2300      	movs	r3, #0
 8084b6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084b70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084b74:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084b78:	930a      	str	r3, [sp, #40]	; 0x28
 8084b7a:	9603      	str	r6, [sp, #12]
 8084b7c:	f8cd a008 	str.w	sl, [sp, #8]
 8084b80:	9601      	str	r6, [sp, #4]
 8084b82:	f8cd b000 	str.w	fp, [sp]
 8084b86:	4633      	mov	r3, r6
 8084b88:	aa07      	add	r2, sp, #28
 8084b8a:	4965      	ldr	r1, [pc, #404]	; (8084d20 <_tzset_unlocked_r+0x2f0>)
 8084b8c:	4628      	mov	r0, r5
 8084b8e:	f7fd f835 	bl	8081bfc <siscanf>
 8084b92:	2800      	cmp	r0, #0
 8084b94:	dc04      	bgt.n	8084ba0 <_tzset_unlocked_r+0x170>
 8084b96:	6a23      	ldr	r3, [r4, #32]
 8084b98:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8084b9c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8084b9e:	e00e      	b.n	8084bbe <_tzset_unlocked_r+0x18e>
 8084ba0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084ba4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084ba8:	213c      	movs	r1, #60	; 0x3c
 8084baa:	fb01 3302 	mla	r3, r1, r2, r3
 8084bae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084bb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084bb6:	fb01 3302 	mla	r3, r1, r2, r3
 8084bba:	435f      	muls	r7, r3
 8084bbc:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084bbe:	4627      	mov	r7, r4
 8084bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084bc2:	f04f 0900 	mov.w	r9, #0
 8084bc6:	441d      	add	r5, r3
 8084bc8:	782b      	ldrb	r3, [r5, #0]
 8084bca:	2b2c      	cmp	r3, #44	; 0x2c
 8084bcc:	bf08      	it	eq
 8084bce:	3501      	addeq	r5, #1
 8084bd0:	f895 8000 	ldrb.w	r8, [r5]
 8084bd4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084bd8:	d126      	bne.n	8084c28 <_tzset_unlocked_r+0x1f8>
 8084bda:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084bde:	9302      	str	r3, [sp, #8]
 8084be0:	ab09      	add	r3, sp, #36	; 0x24
 8084be2:	9300      	str	r3, [sp, #0]
 8084be4:	9603      	str	r6, [sp, #12]
 8084be6:	9601      	str	r6, [sp, #4]
 8084be8:	4633      	mov	r3, r6
 8084bea:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084bee:	494d      	ldr	r1, [pc, #308]	; (8084d24 <_tzset_unlocked_r+0x2f4>)
 8084bf0:	4628      	mov	r0, r5
 8084bf2:	f7fd f803 	bl	8081bfc <siscanf>
 8084bf6:	2803      	cmp	r0, #3
 8084bf8:	d17e      	bne.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084bfa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084bfe:	1e4b      	subs	r3, r1, #1
 8084c00:	2b0b      	cmp	r3, #11
 8084c02:	d879      	bhi.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084c04:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084c08:	1e53      	subs	r3, r2, #1
 8084c0a:	2b04      	cmp	r3, #4
 8084c0c:	d874      	bhi.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084c0e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8084c12:	2b06      	cmp	r3, #6
 8084c14:	d870      	bhi.n	8084cf8 <_tzset_unlocked_r+0x2c8>
 8084c16:	f887 8008 	strb.w	r8, [r7, #8]
 8084c1a:	60f9      	str	r1, [r7, #12]
 8084c1c:	613a      	str	r2, [r7, #16]
 8084c1e:	617b      	str	r3, [r7, #20]
 8084c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084c22:	eb05 0803 	add.w	r8, r5, r3
 8084c26:	e02a      	b.n	8084c7e <_tzset_unlocked_r+0x24e>
 8084c28:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084c2c:	bf06      	itte	eq
 8084c2e:	4643      	moveq	r3, r8
 8084c30:	3501      	addeq	r5, #1
 8084c32:	2344      	movne	r3, #68	; 0x44
 8084c34:	220a      	movs	r2, #10
 8084c36:	a90b      	add	r1, sp, #44	; 0x2c
 8084c38:	4628      	mov	r0, r5
 8084c3a:	9305      	str	r3, [sp, #20]
 8084c3c:	f7ff fe3e 	bl	80848bc <strtoul>
 8084c40:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084c44:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084c48:	4545      	cmp	r5, r8
 8084c4a:	9b05      	ldr	r3, [sp, #20]
 8084c4c:	d114      	bne.n	8084c78 <_tzset_unlocked_r+0x248>
 8084c4e:	234d      	movs	r3, #77	; 0x4d
 8084c50:	f1b9 0f00 	cmp.w	r9, #0
 8084c54:	d107      	bne.n	8084c66 <_tzset_unlocked_r+0x236>
 8084c56:	7223      	strb	r3, [r4, #8]
 8084c58:	2303      	movs	r3, #3
 8084c5a:	60e3      	str	r3, [r4, #12]
 8084c5c:	2302      	movs	r3, #2
 8084c5e:	6123      	str	r3, [r4, #16]
 8084c60:	f8c4 9014 	str.w	r9, [r4, #20]
 8084c64:	e00b      	b.n	8084c7e <_tzset_unlocked_r+0x24e>
 8084c66:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084c6a:	230b      	movs	r3, #11
 8084c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8084c6e:	2301      	movs	r3, #1
 8084c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084c72:	2300      	movs	r3, #0
 8084c74:	6323      	str	r3, [r4, #48]	; 0x30
 8084c76:	e002      	b.n	8084c7e <_tzset_unlocked_r+0x24e>
 8084c78:	b280      	uxth	r0, r0
 8084c7a:	723b      	strb	r3, [r7, #8]
 8084c7c:	6178      	str	r0, [r7, #20]
 8084c7e:	2302      	movs	r3, #2
 8084c80:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084c84:	2300      	movs	r3, #0
 8084c86:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084c8a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8084c90:	f898 3000 	ldrb.w	r3, [r8]
 8084c94:	2b2f      	cmp	r3, #47	; 0x2f
 8084c96:	d10b      	bne.n	8084cb0 <_tzset_unlocked_r+0x280>
 8084c98:	9603      	str	r6, [sp, #12]
 8084c9a:	f8cd a008 	str.w	sl, [sp, #8]
 8084c9e:	9601      	str	r6, [sp, #4]
 8084ca0:	f8cd b000 	str.w	fp, [sp]
 8084ca4:	4633      	mov	r3, r6
 8084ca6:	aa07      	add	r2, sp, #28
 8084ca8:	491f      	ldr	r1, [pc, #124]	; (8084d28 <_tzset_unlocked_r+0x2f8>)
 8084caa:	4640      	mov	r0, r8
 8084cac:	f7fc ffa6 	bl	8081bfc <siscanf>
 8084cb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084cb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084cb8:	213c      	movs	r1, #60	; 0x3c
 8084cba:	fb01 3302 	mla	r3, r1, r2, r3
 8084cbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084cc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084cc6:	fb01 3302 	mla	r3, r1, r2, r3
 8084cca:	61bb      	str	r3, [r7, #24]
 8084ccc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084cce:	f109 0901 	add.w	r9, r9, #1
 8084cd2:	f1b9 0f02 	cmp.w	r9, #2
 8084cd6:	4445      	add	r5, r8
 8084cd8:	f107 071c 	add.w	r7, r7, #28
 8084cdc:	f47f af74 	bne.w	8084bc8 <_tzset_unlocked_r+0x198>
 8084ce0:	6860      	ldr	r0, [r4, #4]
 8084ce2:	f7ff fdf5 	bl	80848d0 <__tzcalc_limits>
 8084ce6:	6a22      	ldr	r2, [r4, #32]
 8084ce8:	4b07      	ldr	r3, [pc, #28]	; (8084d08 <_tzset_unlocked_r+0x2d8>)
 8084cea:	601a      	str	r2, [r3, #0]
 8084cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084cee:	1a9b      	subs	r3, r3, r2
 8084cf0:	4a07      	ldr	r2, [pc, #28]	; (8084d10 <_tzset_unlocked_r+0x2e0>)
 8084cf2:	bf18      	it	ne
 8084cf4:	2301      	movne	r3, #1
 8084cf6:	6013      	str	r3, [r2, #0]
 8084cf8:	b00d      	add	sp, #52	; 0x34
 8084cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084cfe:	bf00      	nop
 8084d00:	08085714 	.word	0x08085714
 8084d04:	20000844 	.word	0x20000844
 8084d08:	2000084c 	.word	0x2000084c
 8084d0c:	08085717 	.word	0x08085717
 8084d10:	20000848 	.word	0x20000848
 8084d14:	20000118 	.word	0x20000118
 8084d18:	20000837 	.word	0x20000837
 8084d1c:	0808571b 	.word	0x0808571b
 8084d20:	0808573e 	.word	0x0808573e
 8084d24:	0808572a 	.word	0x0808572a
 8084d28:	0808573d 	.word	0x0808573d
 8084d2c:	2000082c 	.word	0x2000082c

08084d30 <_findenv_r>:
 8084d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d34:	4607      	mov	r7, r0
 8084d36:	468b      	mov	fp, r1
 8084d38:	4690      	mov	r8, r2
 8084d3a:	f000 f8d7 	bl	8084eec <__env_lock>
 8084d3e:	4b19      	ldr	r3, [pc, #100]	; (8084da4 <_findenv_r+0x74>)
 8084d40:	681d      	ldr	r5, [r3, #0]
 8084d42:	469a      	mov	sl, r3
 8084d44:	b13d      	cbz	r5, 8084d56 <_findenv_r+0x26>
 8084d46:	465c      	mov	r4, fp
 8084d48:	4623      	mov	r3, r4
 8084d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084d4e:	b142      	cbz	r2, 8084d62 <_findenv_r+0x32>
 8084d50:	2a3d      	cmp	r2, #61	; 0x3d
 8084d52:	461c      	mov	r4, r3
 8084d54:	d1f8      	bne.n	8084d48 <_findenv_r+0x18>
 8084d56:	4638      	mov	r0, r7
 8084d58:	f000 f8c9 	bl	8084eee <__env_unlock>
 8084d5c:	2000      	movs	r0, #0
 8084d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d62:	ebcb 0404 	rsb	r4, fp, r4
 8084d66:	46a9      	mov	r9, r5
 8084d68:	f859 0b04 	ldr.w	r0, [r9], #4
 8084d6c:	2800      	cmp	r0, #0
 8084d6e:	d0f2      	beq.n	8084d56 <_findenv_r+0x26>
 8084d70:	4622      	mov	r2, r4
 8084d72:	4659      	mov	r1, fp
 8084d74:	f7ff fc6b 	bl	808464e <strncmp>
 8084d78:	b988      	cbnz	r0, 8084d9e <_findenv_r+0x6e>
 8084d7a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8084d7e:	191e      	adds	r6, r3, r4
 8084d80:	5d1b      	ldrb	r3, [r3, r4]
 8084d82:	2b3d      	cmp	r3, #61	; 0x3d
 8084d84:	d10b      	bne.n	8084d9e <_findenv_r+0x6e>
 8084d86:	f8da 3000 	ldr.w	r3, [sl]
 8084d8a:	4638      	mov	r0, r7
 8084d8c:	1aed      	subs	r5, r5, r3
 8084d8e:	10ad      	asrs	r5, r5, #2
 8084d90:	f8c8 5000 	str.w	r5, [r8]
 8084d94:	f000 f8ab 	bl	8084eee <__env_unlock>
 8084d98:	1c70      	adds	r0, r6, #1
 8084d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d9e:	464d      	mov	r5, r9
 8084da0:	e7e1      	b.n	8084d66 <_findenv_r+0x36>
 8084da2:	bf00      	nop
 8084da4:	20000160 	.word	0x20000160

08084da8 <_getenv_r>:
 8084da8:	b507      	push	{r0, r1, r2, lr}
 8084daa:	aa01      	add	r2, sp, #4
 8084dac:	f7ff ffc0 	bl	8084d30 <_findenv_r>
 8084db0:	b003      	add	sp, #12
 8084db2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084db8 <__gettzinfo>:
 8084db8:	4800      	ldr	r0, [pc, #0]	; (8084dbc <__gettzinfo+0x4>)
 8084dba:	4770      	bx	lr
 8084dbc:	20000120 	.word	0x20000120

08084dc0 <gmtime_r>:
 8084dc0:	6802      	ldr	r2, [r0, #0]
 8084dc2:	4b46      	ldr	r3, [pc, #280]	; (8084edc <gmtime_r+0x11c>)
 8084dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084dc6:	fb92 f4f3 	sdiv	r4, r2, r3
 8084dca:	fb03 2214 	mls	r2, r3, r4, r2
 8084dce:	2a00      	cmp	r2, #0
 8084dd0:	bfbc      	itt	lt
 8084dd2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8084dd6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084dda:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084dde:	fb92 f3f0 	sdiv	r3, r2, r0
 8084de2:	fb00 2213 	mls	r2, r0, r3, r2
 8084de6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084dea:	608b      	str	r3, [r1, #8]
 8084dec:	fb92 f3f0 	sdiv	r3, r2, r0
 8084df0:	fb00 2213 	mls	r2, r0, r3, r2
 8084df4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084df8:	bfac      	ite	ge
 8084dfa:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084dfe:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084e02:	604b      	str	r3, [r1, #4]
 8084e04:	600a      	str	r2, [r1, #0]
 8084e06:	2307      	movs	r3, #7
 8084e08:	1ce2      	adds	r2, r4, #3
 8084e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8084e0e:	4d34      	ldr	r5, [pc, #208]	; (8084ee0 <gmtime_r+0x120>)
 8084e10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084e14:	fb94 f5f5 	sdiv	r5, r4, r5
 8084e18:	1ad3      	subs	r3, r2, r3
 8084e1a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084e1e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084e22:	618b      	str	r3, [r1, #24]
 8084e24:	4b2f      	ldr	r3, [pc, #188]	; (8084ee4 <gmtime_r+0x124>)
 8084e26:	4830      	ldr	r0, [pc, #192]	; (8084ee8 <gmtime_r+0x128>)
 8084e28:	fb03 4405 	mla	r4, r3, r5, r4
 8084e2c:	fbb4 f2f2 	udiv	r2, r4, r2
 8084e30:	fbb4 f3f7 	udiv	r3, r4, r7
 8084e34:	fbb4 f0f0 	udiv	r0, r4, r0
 8084e38:	4422      	add	r2, r4
 8084e3a:	1ad2      	subs	r2, r2, r3
 8084e3c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084e40:	1a13      	subs	r3, r2, r0
 8084e42:	f240 126d 	movw	r2, #365	; 0x16d
 8084e46:	fbb3 f6f6 	udiv	r6, r3, r6
 8084e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8084e4e:	fbb3 f3f7 	udiv	r3, r3, r7
 8084e52:	4434      	add	r4, r6
 8084e54:	1ae3      	subs	r3, r4, r3
 8084e56:	fb02 3310 	mls	r3, r2, r0, r3
 8084e5a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084e5e:	2499      	movs	r4, #153	; 0x99
 8084e60:	3202      	adds	r2, #2
 8084e62:	fbb2 f2f4 	udiv	r2, r2, r4
 8084e66:	4354      	muls	r4, r2
 8084e68:	1ca6      	adds	r6, r4, #2
 8084e6a:	2405      	movs	r4, #5
 8084e6c:	fbb6 f4f4 	udiv	r4, r6, r4
 8084e70:	2a0a      	cmp	r2, #10
 8084e72:	bf34      	ite	cc
 8084e74:	2602      	movcc	r6, #2
 8084e76:	f06f 0609 	mvncs.w	r6, #9
 8084e7a:	4416      	add	r6, r2
 8084e7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084e80:	fb02 0505 	mla	r5, r2, r5, r0
 8084e84:	1c5f      	adds	r7, r3, #1
 8084e86:	2e01      	cmp	r6, #1
 8084e88:	bf98      	it	ls
 8084e8a:	3501      	addls	r5, #1
 8084e8c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084e90:	eba7 0704 	sub.w	r7, r7, r4
 8084e94:	d302      	bcc.n	8084e9c <gmtime_r+0xdc>
 8084e96:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084e9a:	e014      	b.n	8084ec6 <gmtime_r+0x106>
 8084e9c:	0782      	lsls	r2, r0, #30
 8084e9e:	d105      	bne.n	8084eac <gmtime_r+0xec>
 8084ea0:	2464      	movs	r4, #100	; 0x64
 8084ea2:	fbb0 f2f4 	udiv	r2, r0, r4
 8084ea6:	fb04 0212 	mls	r2, r4, r2, r0
 8084eaa:	b94a      	cbnz	r2, 8084ec0 <gmtime_r+0x100>
 8084eac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084eb0:	fbb0 f4f2 	udiv	r4, r0, r2
 8084eb4:	fb02 0014 	mls	r0, r2, r4, r0
 8084eb8:	fab0 f280 	clz	r2, r0
 8084ebc:	0952      	lsrs	r2, r2, #5
 8084ebe:	e000      	b.n	8084ec2 <gmtime_r+0x102>
 8084ec0:	2201      	movs	r2, #1
 8084ec2:	333b      	adds	r3, #59	; 0x3b
 8084ec4:	441a      	add	r2, r3
 8084ec6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084eca:	2300      	movs	r3, #0
 8084ecc:	61ca      	str	r2, [r1, #28]
 8084ece:	614d      	str	r5, [r1, #20]
 8084ed0:	610e      	str	r6, [r1, #16]
 8084ed2:	60cf      	str	r7, [r1, #12]
 8084ed4:	620b      	str	r3, [r1, #32]
 8084ed6:	4608      	mov	r0, r1
 8084ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084eda:	bf00      	nop
 8084edc:	00015180 	.word	0x00015180
 8084ee0:	00023ab1 	.word	0x00023ab1
 8084ee4:	fffdc54f 	.word	0xfffdc54f
 8084ee8:	00023ab0 	.word	0x00023ab0

08084eec <__env_lock>:
 8084eec:	4770      	bx	lr

08084eee <__env_unlock>:
 8084eee:	4770      	bx	lr

08084ef0 <dynalib_user>:
 8084ef0:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8084f00:	0000 0000                                   ....

08084f04 <_ZTV5Timer>:
	...
 8084f0c:	0261 0808 02a5 0808 0129 0808               a.......)...

08084f18 <_ZTV8MB85RC64>:
	...
 8084f20:	0135 0808 0149 0808 1449 0808 14f3 0808     5...I...I.......
 8084f30:	156d 0808 0030 7325 5320 253a 2e32 6630     m...0.%s S:%2.0f
 8084f40:	2525 202c 3a51 3225 302e 2566 2025 4100     %%, Q:%2.0f%% .A
 8084f50:	2b54 4643 4e55 313d 0d36 000a 6f43 746e     T+CFUN=16...Cont
 8084f60:	6f72 206c 6f50 6577 2072 202d 4c00 776f     rol Power - .Low
 8084f70:	4c20 7665 6c65 2d20 0020 7550 706d 4f20      Level - .Pump O
 8084f80:	206e 202d 5000 7261 6974 6c63 2065 6f50     n - .Particle Po
 8084f90:	6577 0072 6c41 7265 7374 7b00 6122 656c     wer.Alerts.{"ale
 8084fa0:	7472 6156 756c 2265 253a 2c69 2220 7570     rtValue":%i, "pu
 8084fb0:	706d 6d41 7370 3a22 6925 202c 7022 6d75     mpAmps":%i, "pum
 8084fc0:	4d70 6e69 2273 253a 2c69 2220 6162 7474     pMins":%i, "batt
 8084fd0:	7265 2279 253a 2c69 2220 6574 706d 3a22     ery":%i, "temp":
 8084fe0:	6925 202c 7222 7365 7465 2273 253a 7d69     %i, "resets":%i}
 8084ff0:	4d00 6e6f 7469 726f 6e69 5f67 7645 6e65     .Monitoring_Even
 8085000:	0074 7550 706d 4f20 206e 6552 6563 7669     t.Pump On Receiv
 8085010:	6465 5300 6174 7574 0073 7550 706d 4f20     ed.Status.Pump O
 8085020:	6666 5220 6365 6965 6576 0064 7246 6d6f     ff Received.From
 8085030:	2520 2073 6f74 2520 0073 7453 7461 2065      %s to %s.State 
 8085040:	7254 6e61 6973 6974 6e6f 5300 7465 5620     Transition.Set V
 8085050:	7265 6f62 6573 4d20 646f 0065 6c43 6165     erbose Mode.Clea
 8085060:	6572 2064 6556 6272 736f 2065 6f4d 6564     red Verbose Mode
 8085070:	4e00 206f 6144 6174 5500 6962 6f64 7374     .No Data.Ubidots
 8085080:	4820 6f6f 006b 6552 7073 6e6f 6573 5220      Hook.Response R
 8085090:	6365 6965 6576 0064 7453 7461 0065 7552     eceived.State.Ru
 80850a0:	6e6e 6e69 0067 6144 6c69 2079 6c43 6165     nning.Daily Clea
 80850b0:	756e 0070 6146 6c6c 4c73 6b61 4265 6165     nup.FallsLakeBea
 80850c0:	6576 4472 6d61 2d6e 6146 6c6c 4c73 6b61     verDamn-FallsLak
 80850d0:	3365 502d 6d75 4370 6e6f 7274 6c6f 5300     e3-PumpControl.S
 80850e0:	6275 6373 6972 6562 7320 6375 6563 7373     ubscribe success
 80850f0:	7566 006c 7550 5362 6275 5300 6275 6373     ful.PubSub.Subsc
 8085100:	6972 6562 4e20 746f 7320 6375 6563 7373     ribe Not success
 8085110:	7566 006c 6953 6e67 6c61 5200 7365 7465     ful.Signal.Reset
 8085120:	6f43 6e75 0074 6554 706d 7265 7461 7275     Count.Temperatur
 8085130:	0065 6552 656c 7361 0065 7473 7461 4f65     e.Release.stateO
 8085140:	4366 6768 7000 6d75 4170 706d 0073 7570     fChg.pumpAmps.pu
 8085150:	706d 694d 756e 6574 0073 6552 6573 2d74     mpMinutes.Reset-
 8085160:	5246 4d41 5200 7365 7465 432d 756f 746e     FRAM.Reset-Count
 8085170:	0073 6148 6472 522d 7365 7465 5300 6e65     s.Hard-Reset.Sen
 8085180:	2d64 6f4e 0077 6556 6272 736f 2d65 6f4d     d-Now.Verbose-Mo
 8085190:	6564 4900 6c64 0065 6552 7073 6e6f 6573     de.Idle.Response
 80851a0:	5420 6d69 6f65 7475 4520 7272 726f 4500      Timeout Error.E
 80851b0:	7272 726f 5320 6174 6574 2d20 5220 7365     rror State - Res
 80851c0:	7465 4500 7272 726f 5320 6174 6574 2d20     et.Error State -
 80851d0:	5020 776f 7265 4320 6379 656c 4500 7272      Power Cycle.Err
 80851e0:	726f 5320 6174 6574 2d20 4620 6c75 206c     or State - Full 
 80851f0:	6f4d 6564 206d 6552 6573 0074 6e55 6e6b     Modem Reset.Unkn
 8085200:	776f 006e 6f4e 656e 5700 4669 0069 5347     own.None.WiFi.GS
 8085210:	004d 4d55 5354 4300 4d44 0041 544c 0045     M.UMTS.CDMA.LTE.
 8085220:	4549 4545 3038 3132 3435 4c00 4554 435f     IEEE802154.LTE_C
 8085230:	5441 4d5f 0031 544c 5f45 4143 5f54 424e     AT_M1.LTE_CAT_NB
 8085240:	0031 2e30 3934 7700 6972 6574 6144 6174     1.0.49.writeData
 8085250:	6620 6961 656c 2064 7564 6972 676e 6520      failed during e
 8085260:	6172 6573 6620 6172 416d 6464 3d72 7525     rase framAddr=%u
 8085270:	7200 6165 2064 6573 2074 6461 7264 7365     .read set addres
 8085280:	2073 6166 6c69 6465 2520 0064 6964 6e64     s failed %d.didn
 8085290:	7427 7220 6365 6965 6576 6520 6f6e 6775     't receive enoug
 80852a0:	2068 7962 6574 2073 6f63 6e75 3d74 7525     h bytes count=%u
 80852b0:	7700 6972 6574 6620 6961 656c 2064 6425     .write failed %d
 80852c0:	0000 0000                                   ....

080852c4 <_ZTV6MB85RC>:
	...
 80852cc:	1369 0808 136b 0808 1449 0808 14f3 0808     i...k...I.......
 80852dc:	156d 0808                                   m...

080852e0 <_ZTVN5spark13CellularClassE>:
	...
 80852e8:	1d1b 0808 1d11 0808 1d07 0808 021d 0808     ................
 80852f8:	1cfb 0808 1cef 0808 1ce3 0808 1cdb 0808     ................
 8085308:	1cd1 0808 1cc7 0808 1c83 0808               ............

08085314 <_ZTV14CellularSignal>:
	...
 808531c:	1dc9 0808 1e4b 0808 1dcb 0808 1e89 0808     ....K...........
 808532c:	1dd1 0808 1e59 0808 1df5 0808 1e19 0808     ....Y...........
 808533c:	fffc ffff 0000 0000 1e43 0808               ........C...

08085348 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085350:	1ed1 0808 1ed7 0808 1f1b 0808 1ee5 0808     ................
 8085360:	1ed3 0808                                   ....

08085364 <_ZTV7TwoWire>:
	...
 808536c:	25c1 0808 260b 0808 25e3 0808 25c3 0808     .%...&...%...%..
 808537c:	25eb 0808 25f3 0808 25fb 0808 2603 0808     .%...%...%...&..

0808538c <_ZTV9IPAddress>:
	...
 8085394:	2709 0808 26f9 0808 26fb 0808 6162 6475     .'...&...&..baud
 80853a4:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80853b4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80853c4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80853d4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80853e4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80853f4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8085404:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 8085414:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 8085424:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 8085434:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 8085444:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
 8085454:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 8085464:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8085474:	6170 696e 0063 6c61 006c 0000               panic.all...

08085480 <_ZTVN5spark12NetworkClassE>:
	...
 8085488:	27a9 0808 27b3 0808 27bd 0808 27c7 0808     .'...'...'...'..
 8085498:	27d1 0808 27dd 0808 27e9 0808 27f5 0808     .'...'...'...'..
 80854a8:	27fd 0808 2807 0808 2811 0808               .'...(...(..

080854b4 <_ZTV8SPIClass>:
	...
 80854bc:	2a31 0808 2a33 0808 2b25 3330 3a64 3025     1*..3*..%+03d:%0
 80854cc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80854dc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080854ec <_ZTV11USARTSerial>:
	...
 80854f4:	2d11 0808 2d61 0808 2d6f 0808 2915 0808     .-..a-..o-...)..
 8085504:	2d25 0808 2d47 0808 2d33 0808 2d5b 0808     %-..G-..3-..[-..
 8085514:	2d13 0808 2d17 0808                         .-...-..

0808551c <_ZTV9USBSerial>:
	...
 8085524:	2e19 0808 2e69 0808 2e77 0808 2915 0808     ....i...w....)..
 8085534:	2e55 0808 2e1b 0808 2e31 0808 2e63 0808     U.......1...c...
 8085544:	2e47 0808 2e15 0808                         G.......

0808554c <_ctype_>:
 808554c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808555c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808556c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808557c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808558c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808559c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80855ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80855bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80855cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085650 <__sf_fake_stdin>:
	...

08085670 <__sf_fake_stdout>:
	...

08085690 <__sf_fake_stderr>:
	...
 80856b0:	0043 0000                                   C...

080856b4 <__month_lengths>:
 80856b4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80856c4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80856d4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80856e4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80856f4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085704:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085714:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085724:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085734:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085744:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08085750 <link_const_variable_data_end>:
 8085750:	080800b7 	.word	0x080800b7
 8085754:	08081225 	.word	0x08081225
 8085758:	0808161f 	.word	0x0808161f
 808575c:	08081d99 	.word	0x08081d99
 8085760:	08082799 	.word	0x08082799
 8085764:	0808285d 	.word	0x0808285d
 8085768:	08082a15 	.word	0x08082a15
 808576c:	08082bed 	.word	0x08082bed
 8085770:	08082cfd 	.word	0x08082cfd
 8085774:	08083271 	.word	0x08083271
 8085778:	080832a1 	.word	0x080832a1
 808577c:	08083311 	.word	0x08083311
 8085780:	080833d5 	.word	0x080833d5
 8085784:	08083459 	.word	0x08083459
 8085788:	080834dd 	.word	0x080834dd

0808578c <link_constructors_end>:
 808578c:	00000000 	.word	0x00000000
