
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Control/target/1.4.2/electron/Cellular-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005670  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08085690  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000fc  20000000  08085694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006ec  200000fc  200000fc  000400fc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08085790  08085790  00035790  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080857b8  080857b8  000357b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bcaae  00000000  00000000  000357bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011aba  00000000  00000000  000f226a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000171f2  00000000  00000000  00103d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023a8  00000000  00000000  0011af16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000038f8  00000000  00000000  0011d2be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027409  00000000  00000000  00120bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002950e  00000000  00000000  00147fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a83b3  00000000  00000000  001714cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c99c  00000000  00000000  00219880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fa73 	bl	808451c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fa78 	bl	8084532 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08085694 	.word	0x08085694
 8080050:	200000fc 	.word	0x200000fc
 8080054:	200000fc 	.word	0x200000fc
 8080058:	200007e8 	.word	0x200007e8
 808005c:	200007e8 	.word	0x200007e8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f002 ff69 	bl	8082f38 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808564c 	.word	0x0808564c
 8080088:	08085684 	.word	0x08085684

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 bfca 	b.w	8081024 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fd47 	bl	8080b24 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 bf0f 	b.w	8082ebc <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bc75 	b.w	808198c <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bc7b 	b.w	808199c <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b6:	6803      	ldr	r3, [r0, #0]
 80800b8:	b2c9      	uxtb	r1, r1
 80800ba:	689b      	ldr	r3, [r3, #8]
 80800bc:	4718      	bx	r3

080800be <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800be:	2200      	movs	r2, #0
 80800c0:	7042      	strb	r2, [r0, #1]
}
 80800c2:	4770      	bx	lr

080800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800c4:	b570      	push	{r4, r5, r6, lr}
 80800c6:	4606      	mov	r6, r0
 80800c8:	460c      	mov	r4, r1
 80800ca:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800cc:	f002 ffc6 	bl	808305c <_Z19__fetch_global_Wirev>
 80800d0:	7831      	ldrb	r1, [r6, #0]
 80800d2:	f002 f9b7 	bl	8082444 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800d6:	f002 ffc1 	bl	808305c <_Z19__fetch_global_Wirev>
 80800da:	0a21      	lsrs	r1, r4, #8
 80800dc:	f7ff ffeb 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800e0:	f002 ffbc 	bl	808305c <_Z19__fetch_global_Wirev>
 80800e4:	b2e1      	uxtb	r1, r4
 80800e6:	f7ff ffe6 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800ea:	f002 ffb7 	bl	808305c <_Z19__fetch_global_Wirev>
 80800ee:	6803      	ldr	r3, [r0, #0]
 80800f0:	4629      	mov	r1, r5
 80800f2:	689b      	ldr	r3, [r3, #8]
 80800f4:	4798      	blx	r3
  Wire.endTransmission();
 80800f6:	f002 ffb1 	bl	808305c <_Z19__fetch_global_Wirev>
}
 80800fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 80800fe:	f002 b9ac 	b.w	808245a <_ZN7TwoWire15endTransmissionEv>

08080102 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080102:	b538      	push	{r3, r4, r5, lr}
 8080104:	4604      	mov	r4, r0
 8080106:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080108:	f002 ffa8 	bl	808305c <_Z19__fetch_global_Wirev>
 808010c:	7821      	ldrb	r1, [r4, #0]
 808010e:	f002 f999 	bl	8082444 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080112:	f002 ffa3 	bl	808305c <_Z19__fetch_global_Wirev>
 8080116:	0a29      	lsrs	r1, r5, #8
 8080118:	f7ff ffcd 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808011c:	f002 ff9e 	bl	808305c <_Z19__fetch_global_Wirev>
 8080120:	b2e9      	uxtb	r1, r5
 8080122:	f7ff ffc8 	bl	80800b6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080126:	f002 ff99 	bl	808305c <_Z19__fetch_global_Wirev>
 808012a:	f002 f996 	bl	808245a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808012e:	f002 ff95 	bl	808305c <_Z19__fetch_global_Wirev>
 8080132:	2201      	movs	r2, #1
 8080134:	7821      	ldrb	r1, [r4, #0]
 8080136:	f002 f978 	bl	808242a <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 808013a:	f002 ff8f 	bl	808305c <_Z19__fetch_global_Wirev>
 808013e:	6803      	ldr	r3, [r0, #0]
 8080140:	695b      	ldr	r3, [r3, #20]
 8080142:	4798      	blx	r3
}
 8080144:	b2c0      	uxtb	r0, r0
 8080146:	bd38      	pop	{r3, r4, r5, pc}

08080148 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>:
                  Product ID fields (bytes 7..0). Should be 0x510 for
                  the MB85RC256V.
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::getDeviceID(uint16_t *manufacturerID, uint16_t *productID)
{
 8080148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808014a:	4604      	mov	r4, r0
 808014c:	4616      	mov	r6, r2
 808014e:	460f      	mov	r7, r1
  uint8_t a[3] = { 0, 0, 0 };
  uint8_t results;

  Wire.beginTransmission(MB85RC_SLAVE_ID >> 1);
 8080150:	f002 ff84 	bl	808305c <_Z19__fetch_global_Wirev>
 8080154:	217c      	movs	r1, #124	; 0x7c
 8080156:	f002 f979 	bl	808244c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(i2c_addr << 1);
 808015a:	f002 ff7f 	bl	808305c <_Z19__fetch_global_Wirev>
 808015e:	7821      	ldrb	r1, [r4, #0]
 8080160:	0049      	lsls	r1, r1, #1
 8080162:	f7ff ffa8 	bl	80800b6 <_ZN7TwoWire5writeEi>
  results = Wire.endTransmission(false);
 8080166:	f002 ff79 	bl	808305c <_Z19__fetch_global_Wirev>
 808016a:	2100      	movs	r1, #0
 808016c:	f002 f971 	bl	8082452 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(MB85RC_SLAVE_ID >> 1, 3);
 8080170:	f002 ff74 	bl	808305c <_Z19__fetch_global_Wirev>
 8080174:	2203      	movs	r2, #3
 8080176:	217c      	movs	r1, #124	; 0x7c
 8080178:	f002 f95a 	bl	8082430 <_ZN7TwoWire11requestFromEii>
  a[0] = Wire.read();
 808017c:	f002 ff6e 	bl	808305c <_Z19__fetch_global_Wirev>
 8080180:	6803      	ldr	r3, [r0, #0]
 8080182:	695b      	ldr	r3, [r3, #20]
 8080184:	4798      	blx	r3
 8080186:	4605      	mov	r5, r0
  a[1] = Wire.read();
 8080188:	f002 ff68 	bl	808305c <_Z19__fetch_global_Wirev>
 808018c:	6803      	ldr	r3, [r0, #0]
 808018e:	695b      	ldr	r3, [r3, #20]
 8080190:	4798      	blx	r3
 8080192:	4604      	mov	r4, r0
  a[2] = Wire.read();
 8080194:	f002 ff62 	bl	808305c <_Z19__fetch_global_Wirev>
 8080198:	6803      	ldr	r3, [r0, #0]
 808019a:	695b      	ldr	r3, [r3, #20]
 808019c:	4798      	blx	r3

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 808019e:	f3c4 1203 	ubfx	r2, r4, #4, #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801a2:	0224      	lsls	r4, r4, #8
  a[1] = Wire.read();
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801a4:	b2eb      	uxtb	r3, r5
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801a6:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80801aa:	b2c0      	uxtb	r0, r0
  a[1] = Wire.read();
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801ac:	eb02 1303 	add.w	r3, r2, r3, lsl #4
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801b0:	4404      	add	r4, r0
  a[1] = Wire.read();
  a[2] = Wire.read();

  /* Shift values to separate manuf and prod IDs */
  /* See p.10 of http://www.fujitsu.com/downloads/MICRO/fsa/pdf/products/memory/fram/MB85RC256V-DS501-00017-3v0-E.pdf */
  *manufacturerID = (a[0] << 4) + (a[1]  >> 4);
 80801b2:	803b      	strh	r3, [r7, #0]
  *productID = ((a[1] & 0x0F) << 8) + a[2];
 80801b4:	8034      	strh	r4, [r6, #0]
 80801b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080801b8 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80801b8:	b513      	push	{r0, r1, r4, lr}
 80801ba:	4604      	mov	r4, r0
  i2c_addr = addr;
 80801bc:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80801be:	f002 ff4d 	bl	808305c <_Z19__fetch_global_Wirev>
 80801c2:	f002 f923 	bl	808240c <_ZN7TwoWire5beginEv>

  /* Make sure we're actually connected */
  uint16_t manufID, prodID;
  getDeviceID(&manufID, &prodID);
 80801c6:	f10d 0206 	add.w	r2, sp, #6
 80801ca:	a901      	add	r1, sp, #4
 80801cc:	4620      	mov	r0, r4
 80801ce:	f7ff ffbb 	bl	8080148 <_ZN17Adafruit_FRAM_I2C11getDeviceIDEPtS0_>
  if (manufID != 0x00A)
 80801d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80801d6:	2b0a      	cmp	r3, #10
 80801d8:	d107      	bne.n	80801ea <_ZN17Adafruit_FRAM_I2C5beginEh+0x32>
  {
    //Serial.print("Unexpected Manufacturer ID: 0x");
    //Serial.println(manufID, HEX);
    return false;
  }
  if (prodID != 0x510)
 80801da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80801de:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80801e2:	d102      	bne.n	80801ea <_ZN17Adafruit_FRAM_I2C5beginEh+0x32>
    //Serial.println(prodID, HEX);
    return false;
  }

  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
 80801e4:	2001      	movs	r0, #1
 80801e6:	7060      	strb	r0, [r4, #1]

  return true;
 80801e8:	e000      	b.n	80801ec <_ZN17Adafruit_FRAM_I2C5beginEh+0x34>
  getDeviceID(&manufID, &prodID);
  if (manufID != 0x00A)
  {
    //Serial.print("Unexpected Manufacturer ID: 0x");
    //Serial.println(manufID, HEX);
    return false;
 80801ea:	2000      	movs	r0, #0

  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;

  return true;
}
 80801ec:	b002      	add	sp, #8
 80801ee:	bd10      	pop	{r4, pc}

080801f0 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80801f0:	f001 b9a0 	b.w	8081534 <HAL_Pin_Map>

080801f4 <_Z17pumpTimerCallbackv>:
      }
      break;
  }
}

void pumpTimerCallback() { pumpingEnabled = false; }
 80801f4:	4b01      	ldr	r3, [pc, #4]	; (80801fc <_Z17pumpTimerCallbackv+0x8>)
 80801f6:	2200      	movs	r2, #0
 80801f8:	701a      	strb	r2, [r3, #0]
 80801fa:	4770      	bx	lr
 80801fc:	20000110 	.word	0x20000110

08080200 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080200:	6803      	ldr	r3, [r0, #0]
 8080202:	4718      	bx	r3

08080204 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080204:	2a01      	cmp	r2, #1
 8080206:	d002      	beq.n	808020e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 8080208:	2a02      	cmp	r2, #2
 808020a:	d002      	beq.n	8080212 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808020c:	e004      	b.n	8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808020e:	6001      	str	r1, [r0, #0]
	      break;
 8080210:	e002      	b.n	8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080212:	680b      	ldr	r3, [r1, #0]
 8080214:	b100      	cbz	r0, 8080218 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 8080216:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080218:	2000      	movs	r0, #0
 808021a:	4770      	bx	lr

0808021c <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 808021c:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808021e:	4904      	ldr	r1, [pc, #16]	; (8080230 <_Z7sendNow6String+0x14>)
 8080220:	f002 fba3 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080224:	b118      	cbz	r0, 808022e <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 8080226:	4b03      	ldr	r3, [pc, #12]	; (8080234 <_Z7sendNow6String+0x18>)
 8080228:	2205      	movs	r2, #5
 808022a:	701a      	strb	r2, [r3, #0]
    return 1;
 808022c:	2001      	movs	r0, #1
  }
  else return 0;
}
 808022e:	bd08      	pop	{r3, pc}
 8080230:	0808517d 	.word	0x0808517d
 8080234:	20000118 	.word	0x20000118

08080238 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8080238:	6943      	ldr	r3, [r0, #20]
 808023a:	b113      	cbz	r3, 8080242 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808023c:	6983      	ldr	r3, [r0, #24]
 808023e:	300c      	adds	r0, #12
 8080240:	4718      	bx	r3
 8080242:	4770      	bx	lr

08080244 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 8080244:	b513      	push	{r0, r1, r4, lr}
 8080246:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8080248:	2100      	movs	r1, #0
 808024a:	4608      	mov	r0, r1
 808024c:	f001 f8fa 	bl	8081444 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080250:	a902      	add	r1, sp, #8
 8080252:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 8080254:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080256:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 808025a:	f001 f90b 	bl	8081474 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 808025e:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 8080260:	b10c      	cbz	r4, 8080266 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 8080262:	2301      	movs	r3, #1
 8080264:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8080266:	2100      	movs	r1, #0
 8080268:	2001      	movs	r0, #1
 808026a:	f001 f8eb 	bl	8081444 <os_thread_scheduling>
            }
        }
        if (t) {
 808026e:	b12c      	cbz	r4, 808027c <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 8080270:	6823      	ldr	r3, [r4, #0]
 8080272:	4620      	mov	r0, r4
 8080274:	689b      	ldr	r3, [r3, #8]
 8080276:	4798      	blx	r3
            t->running = false;
 8080278:	2300      	movs	r3, #0
 808027a:	7123      	strb	r3, [r4, #4]
        }
    }
 808027c:	b002      	add	sp, #8
 808027e:	bd10      	pop	{r4, pc}

08080280 <_Z11watchdogISRv>:
  return temperatureF;
}

// Here is were we will put the timer and other ISRs
void watchdogISR()
{
 8080280:	b508      	push	{r3, lr}
  if (pettingEnabled) {
 8080282:	4b07      	ldr	r3, [pc, #28]	; (80802a0 <_Z11watchdogISRv+0x20>)
 8080284:	781b      	ldrb	r3, [r3, #0]
 8080286:	b14b      	cbz	r3, 808029c <_Z11watchdogISRv+0x1c>
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
 8080288:	2101      	movs	r1, #1
 808028a:	2006      	movs	r0, #6
 808028c:	f002 feb5 	bl	8082ffa <digitalWrite>
    digitalWrite(donePin, LOW);
  }
}
 8080290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// Here is were we will put the timer and other ISRs
void watchdogISR()
{
  if (pettingEnabled) {
    digitalWrite(donePin, HIGH);                              // Pet the watchdog
    digitalWrite(donePin, LOW);
 8080294:	2100      	movs	r1, #0
 8080296:	2006      	movs	r0, #6
 8080298:	f002 beaf 	b.w	8082ffa <digitalWrite>
 808029c:	bd08      	pop	{r3, pc}
 808029e:	bf00      	nop
 80802a0:	20000008 	.word	0x20000008

080802a4 <_Z11pumpControl6String>:
 * They are intended to allow for customization and control during installations
 * and to allow for management.
*/

int pumpControl(String command)   // Will reset the local counts
{
 80802a4:	b538      	push	{r3, r4, r5, lr}
 80802a6:	4909      	ldr	r1, [pc, #36]	; (80802cc <_Z11pumpControl6String+0x28>)
 80802a8:	4605      	mov	r5, r0
 80802aa:	f002 fb5e 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80802ae:	4604      	mov	r4, r0
 80802b0:	b118      	cbz	r0, 80802ba <_Z11pumpControl6String+0x16>
  {
    pumpingEnabled = true;
 80802b2:	4b07      	ldr	r3, [pc, #28]	; (80802d0 <_Z11pumpControl6String+0x2c>)
 80802b4:	2001      	movs	r0, #1
 80802b6:	7018      	strb	r0, [r3, #0]
    return 1;
 80802b8:	bd38      	pop	{r3, r4, r5, pc}
 80802ba:	4906      	ldr	r1, [pc, #24]	; (80802d4 <_Z11pumpControl6String+0x30>)
 80802bc:	4628      	mov	r0, r5
 80802be:	f002 fb54 	bl	808296a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0") {
 80802c2:	b110      	cbz	r0, 80802ca <_Z11pumpControl6String+0x26>
    pumpingEnabled = false;
 80802c4:	4b02      	ldr	r3, [pc, #8]	; (80802d0 <_Z11pumpControl6String+0x2c>)
    return 1;
 80802c6:	2001      	movs	r0, #1
  {
    pumpingEnabled = true;
    return 1;
  }
  else if (command == "0") {
    pumpingEnabled = false;
 80802c8:	701c      	strb	r4, [r3, #0]
    return 1;
  }
  else return 0;
}
 80802ca:	bd38      	pop	{r3, r4, r5, pc}
 80802cc:	0808517d 	.word	0x0808517d
 80802d0:	20000110 	.word	0x20000110
 80802d4:	08084ee8 	.word	0x08084ee8

080802d8 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)   // Will perform a hard reset on the Electron
{
 80802d8:	b508      	push	{r3, lr}
 80802da:	4905      	ldr	r1, [pc, #20]	; (80802f0 <_Z12hardResetNow6String+0x18>)
 80802dc:	f002 fb45 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80802e0:	b120      	cbz	r0, 80802ec <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 80802e2:	2004      	movs	r0, #4
 80802e4:	2101      	movs	r1, #1
 80802e6:	f002 fe88 	bl	8082ffa <digitalWrite>
 80802ea:	2001      	movs	r0, #1
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}
 80802ec:	bd08      	pop	{r3, pc}
 80802ee:	bf00      	nop
 80802f0:	0808517d 	.word	0x0808517d

080802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80802f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80802f6:	4605      	mov	r5, r0
 80802f8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80802fc:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80802fe:	f88d 3000 	strb.w	r3, [sp]
 8080302:	233c      	movs	r3, #60	; 0x3c
 8080304:	f001 fe52 	bl	8081fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 8080308:	4628      	mov	r0, r5
 808030a:	b003      	add	sp, #12
 808030c:	bd30      	pop	{r4, r5, pc}

0808030e <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808030e:	2200      	movs	r2, #0
 8080310:	4611      	mov	r1, r2
 8080312:	6840      	ldr	r0, [r0, #4]
 8080314:	f001 bb02 	b.w	808191c <network_ready>

08080318 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080318:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808031a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808031c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808031e:	b113      	cbz	r3, 8080326 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080320:	2203      	movs	r2, #3
 8080322:	4601      	mov	r1, r0
 8080324:	4798      	blx	r3
    }
 8080326:	4620      	mov	r0, r4
 8080328:	bd10      	pop	{r4, pc}

0808032a <_ZN5Timer4stopEj>:
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 808032a:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 808032c:	6880      	ldr	r0, [r0, #8]
 808032e:	2300      	movs	r3, #0
 8080330:	b140      	cbz	r0, 8080344 <_ZN5Timer4stopEj+0x1a>
 8080332:	e88d 000a 	stmia.w	sp, {r1, r3}
 8080336:	461a      	mov	r2, r3
 8080338:	2102      	movs	r1, #2
 808033a:	f001 f8a3 	bl	8081484 <os_timer_change>
 808033e:	fab0 f080 	clz	r0, r0
 8080342:	0940      	lsrs	r0, r0, #5
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080344:	b003      	add	sp, #12
 8080346:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808034c <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 808034c:	b538      	push	{r3, r4, r5, lr}
 808034e:	4b0f      	ldr	r3, [pc, #60]	; (808038c <_ZN5TimerD1Ev+0x40>)
 8080350:	4604      	mov	r4, r0
 8080352:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 8080354:	6883      	ldr	r3, [r0, #8]
 8080356:	b19b      	cbz	r3, 8080380 <_ZN5TimerD1Ev+0x34>
            stop();
 8080358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808035c:	f7ff ffe5 	bl	808032a <_ZN5Timer4stopEj>
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 8080360:	2100      	movs	r1, #0
 8080362:	68a0      	ldr	r0, [r4, #8]
 8080364:	f001 f89e 	bl	80814a4 <os_timer_set_id>
            while (running) {
 8080368:	7923      	ldrb	r3, [r4, #4]
 808036a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808036e:	b113      	cbz	r3, 8080376 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
 8080370:	f001 f860 	bl	8081434 <os_thread_yield>
 8080374:	e7f8      	b.n	8080368 <_ZN5TimerD1Ev+0x1c>
            }
            os_timer_destroy(handle, nullptr);
 8080376:	4629      	mov	r1, r5
 8080378:	68a0      	ldr	r0, [r4, #8]
 808037a:	f001 f873 	bl	8081464 <os_timer_destroy>
            handle = nullptr;
 808037e:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080380:	f104 000c 	add.w	r0, r4, #12
 8080384:	f7ff ffc8 	bl	8080318 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 8080388:	4620      	mov	r0, r4
 808038a:	bd38      	pop	{r3, r4, r5, pc}
 808038c:	08084edc 	.word	0x08084edc

08080390 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080390:	b510      	push	{r4, lr}
 8080392:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 8080394:	f7ff ffda 	bl	808034c <_ZN5TimerD1Ev>
 8080398:	4620      	mov	r0, r4
 808039a:	211c      	movs	r1, #28
 808039c:	f002 fee9 	bl	8083172 <_ZdlPvj>
 80803a0:	4620      	mov	r0, r4
 80803a2:	bd10      	pop	{r4, pc}

080803a4 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80803a4:	b281      	uxth	r1, r0
 80803a6:	4801      	ldr	r0, [pc, #4]	; (80803ac <_Z9FRAMread8j+0x8>)
 80803a8:	f7ff beab 	b.w	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
 80803ac:	20000108 	.word	0x20000108

080803b0 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80803b0:	460a      	mov	r2, r1
 80803b2:	b281      	uxth	r1, r0
 80803b4:	4801      	ldr	r0, [pc, #4]	; (80803bc <_Z10FRAMwrite8jh+0xc>)
 80803b6:	f7ff be85 	b.w	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80803ba:	bf00      	nop
 80803bc:	20000108 	.word	0x20000108

080803c0 <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 80803c0:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 80803c2:	4d07      	ldr	r5, [pc, #28]	; (80803e0 <_Z10FRAMread16j+0x20>)
 80803c4:	b284      	uxth	r4, r0
 80803c6:	4621      	mov	r1, r4
 80803c8:	4628      	mov	r0, r5
 80803ca:	f7ff fe9a 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 80803ce:	1c61      	adds	r1, r4, #1
int FRAMread16(unsigned int address)
{
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 80803d0:	4606      	mov	r6, r0
    one = fram.read8(address + 1);
 80803d2:	b289      	uxth	r1, r1
 80803d4:	4628      	mov	r0, r5
 80803d6:	f7ff fe94 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 80803da:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 80803de:	bd70      	pop	{r4, r5, r6, pc}
 80803e0:	20000108 	.word	0x20000108

080803e4 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 80803e4:	b570      	push	{r4, r5, r6, lr}
 80803e6:	460e      	mov	r6, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 80803e8:	4d07      	ldr	r5, [pc, #28]	; (8080408 <_Z11FRAMwrite16ji+0x24>)
 80803ea:	b284      	uxth	r4, r0
 80803ec:	b2ca      	uxtb	r2, r1
 80803ee:	4628      	mov	r0, r5
 80803f0:	4621      	mov	r1, r4
 80803f2:	f7ff fe67 	bl	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 80803f6:	1c61      	adds	r1, r4, #1
 80803f8:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80803fc:	4628      	mov	r0, r5
}
 80803fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
    fram.write8(address + 1, one);
 8080402:	b289      	uxth	r1, r1
 8080404:	f7ff be5e 	b.w	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080408:	20000108 	.word	0x20000108

0808040c <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)   // Resets the current hourly and daily counts
{
 808040c:	b508      	push	{r3, lr}
 808040e:	490a      	ldr	r1, [pc, #40]	; (8080438 <_Z11resetCounts6String+0x2c>)
 8080410:	f002 faab 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080414:	b170      	cbz	r0, 8080434 <_Z11resetCounts6String+0x28>
  {
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
 8080416:	2100      	movs	r1, #0
 8080418:	2002      	movs	r0, #2
 808041a:	f7ff ffc9 	bl	80803b0 <_Z10FRAMwrite8jh>
    resetCount = 0;
 808041e:	4b07      	ldr	r3, [pc, #28]	; (808043c <_Z11resetCounts6String+0x30>)
 8080420:	2100      	movs	r1, #0
 8080422:	6019      	str	r1, [r3, #0]
    dataInFlight = false;
 8080424:	4b06      	ldr	r3, [pc, #24]	; (8080440 <_Z11resetCounts6String+0x34>)
    dailyPumpingMins = 0;
    FRAMwrite16(DAILYPUMPMINUTES,0);
 8080426:	2014      	movs	r0, #20
{
  if (command == "1")
  {
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
    resetCount = 0;
    dataInFlight = false;
 8080428:	7019      	strb	r1, [r3, #0]
    dailyPumpingMins = 0;
 808042a:	4b06      	ldr	r3, [pc, #24]	; (8080444 <_Z11resetCounts6String+0x38>)
 808042c:	6019      	str	r1, [r3, #0]
    FRAMwrite16(DAILYPUMPMINUTES,0);
 808042e:	f7ff ffd9 	bl	80803e4 <_Z11FRAMwrite16ji>
 8080432:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 8080434:	bd08      	pop	{r3, pc}
 8080436:	bf00      	nop
 8080438:	0808517d 	.word	0x0808517d
 808043c:	20000124 	.word	0x20000124
 8080440:	200001bc 	.word	0x200001bc
 8080444:	2000011c 	.word	0x2000011c

08080448 <_Z10FRAMread32m>:
}

unsigned long FRAMread32(unsigned long address)
{
 8080448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 808044c:	4e0f      	ldr	r6, [pc, #60]	; (808048c <_Z10FRAMread32m+0x44>)
 808044e:	b284      	uxth	r4, r0
 8080450:	4621      	mov	r1, r4
 8080452:	4630      	mov	r0, r6
 8080454:	f7ff fe55 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 8080458:	1c61      	adds	r1, r4, #1
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 808045a:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 808045c:	b289      	uxth	r1, r1
 808045e:	4630      	mov	r0, r6
 8080460:	f7ff fe4f 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 8080464:	1ca1      	adds	r1, r4, #2
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
 8080466:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 8080468:	b289      	uxth	r1, r1
 808046a:	4630      	mov	r0, r6
 808046c:	f7ff fe49 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 8080470:	1ce1      	adds	r1, r4, #3
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
    two = fram.read8(address + 2);
 8080472:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 8080474:	b289      	uxth	r1, r1
 8080476:	4630      	mov	r0, r6
 8080478:	f7ff fe43 	bl	8080102 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 808047c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8080480:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 8080484:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 8080488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808048c:	20000108 	.word	0x20000108

08080490 <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
 8080490:	b570      	push	{r4, r5, r6, lr}
 8080492:	460e      	mov	r6, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
 8080494:	4d0e      	ldr	r5, [pc, #56]	; (80804d0 <_Z11FRAMwrite32im+0x40>)
 8080496:	b284      	uxth	r4, r0
 8080498:	b2ca      	uxtb	r2, r1
 808049a:	4628      	mov	r0, r5
 808049c:	4621      	mov	r1, r4
 808049e:	f7ff fe11 	bl	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
 80804a2:	1c61      	adds	r1, r4, #1
 80804a4:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80804a8:	4628      	mov	r0, r5
 80804aa:	b289      	uxth	r1, r1
 80804ac:	f7ff fe0a 	bl	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
 80804b0:	1ca1      	adds	r1, r4, #2
 80804b2:	f3c6 4207 	ubfx	r2, r6, #16, #8
 80804b6:	4628      	mov	r0, r5
 80804b8:	b289      	uxth	r1, r1
 80804ba:	f7ff fe03 	bl	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
 80804be:	1ce1      	adds	r1, r4, #3
 80804c0:	0e32      	lsrs	r2, r6, #24
 80804c2:	4628      	mov	r0, r5
}
 80804c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
    fram.write8(address + 1, three);
    fram.write8(address + 2, two);
    fram.write8(address + 3, one);
 80804c8:	b289      	uxth	r1, r1
 80804ca:	f7ff bdfb 	b.w	80800c4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80804ce:	bf00      	nop
 80804d0:	20000108 	.word	0x20000108

080804d4 <_Z17getSignalStrengthv>:
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
}


void getSignalStrength()
{
 80804d4:	b530      	push	{r4, r5, lr}
 80804d6:	b08f      	sub	sp, #60	; 0x3c
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 80804d8:	4910      	ldr	r1, [pc, #64]	; (808051c <_Z17getSignalStrengthv+0x48>)
 80804da:	a804      	add	r0, sp, #16
 80804dc:	f001 fb0a 	bl	8081af4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 80804e0:	a804      	add	r0, sp, #16
 80804e2:	f001 fb5a 	bl	8081b9a <_ZNK14CellularSignal19getAccessTechnologyEv>
 80804e6:	4604      	mov	r4, r0
 
  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 80804e8:	a804      	add	r0, sp, #16
 80804ea:	f001 fbb5 	bl	8081c58 <_ZNK14CellularSignal11getStrengthEv>
 80804ee:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 80804f0:	a804      	add	r0, sp, #16
 80804f2:	f001 fb99 	bl	8081c28 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80804f6:	f003 f8ed 	bl	80836d4 <__aeabi_f2d>
 80804fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80804fe:	4628      	mov	r0, r5
 8080500:	f003 f8e8 	bl	80836d4 <__aeabi_f2d>
 8080504:	e9cd 0100 	strd	r0, r1, [sp]
 8080508:	4b05      	ldr	r3, [pc, #20]	; (8080520 <_Z17getSignalStrengthv+0x4c>)
 808050a:	4a06      	ldr	r2, [pc, #24]	; (8080524 <_Z17getSignalStrengthv+0x50>)
 808050c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8080510:	2140      	movs	r1, #64	; 0x40
 8080512:	4805      	ldr	r0, [pc, #20]	; (8080528 <_Z17getSignalStrengthv+0x54>)
 8080514:	f001 fa62 	bl	80819dc <snprintf>
}
 8080518:	b00f      	add	sp, #60	; 0x3c
 808051a:	bd30      	pop	{r4, r5, pc}
 808051c:	200001c8 	.word	0x200001c8
 8080520:	2000001c 	.word	0x2000001c
 8080524:	08084eea 	.word	0x08084eea
 8080528:	2000016c 	.word	0x2000016c
 808052c:	00000000 	.word	0x00000000

08080530 <_Z14getTemperaturev>:

int getTemperature()
{
 8080530:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080532:	200a      	movs	r0, #10
 8080534:	f002 fd7a 	bl	808302c <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080538:	f003 f8ba 	bl	80836b0 <__aeabi_i2d>
 808053c:	a314      	add	r3, pc, #80	; (adr r3, 8080590 <_Z14getTemperaturev+0x60>)
 808053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080542:	f003 f91b 	bl	808377c <__aeabi_dmul>
 8080546:	f003 fb53 	bl	8083bf0 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808054a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 808054e:	f003 fcad 	bl	8083eac <__aeabi_fmul>
 8080552:	f003 f8bf 	bl	80836d4 <__aeabi_f2d>
 8080556:	2200      	movs	r2, #0
 8080558:	4b0f      	ldr	r3, [pc, #60]	; (8080598 <_Z14getTemperaturev+0x68>)
 808055a:	f002 ff5b 	bl	8083414 <__aeabi_dsub>
 808055e:	2200      	movs	r2, #0
 8080560:	4b0e      	ldr	r3, [pc, #56]	; (808059c <_Z14getTemperaturev+0x6c>)
 8080562:	f003 f90b 	bl	808377c <__aeabi_dmul>
 8080566:	f003 fb1b 	bl	8083ba0 <__aeabi_d2iz>
 808056a:	f003 f8a1 	bl	80836b0 <__aeabi_i2d>
 808056e:	2200      	movs	r2, #0
 8080570:	4b0b      	ldr	r3, [pc, #44]	; (80805a0 <_Z14getTemperaturev+0x70>)
 8080572:	f003 f903 	bl	808377c <__aeabi_dmul>
 8080576:	2200      	movs	r2, #0
 8080578:	4b0a      	ldr	r3, [pc, #40]	; (80805a4 <_Z14getTemperaturev+0x74>)
 808057a:	f003 fa29 	bl	80839d0 <__aeabi_ddiv>
 808057e:	2200      	movs	r2, #0
 8080580:	4b09      	ldr	r3, [pc, #36]	; (80805a8 <_Z14getTemperaturev+0x78>)
 8080582:	f002 ff49 	bl	8083418 <__adddf3>
 8080586:	f003 fb0b 	bl	8083ba0 <__aeabi_d2iz>
 808058a:	4b08      	ldr	r3, [pc, #32]	; (80805ac <_Z14getTemperaturev+0x7c>)
 808058c:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 808058e:	bd08      	pop	{r3, pc}
 8080590:	66666666 	.word	0x66666666
 8080594:	400a6666 	.word	0x400a6666
 8080598:	3fe00000 	.word	0x3fe00000
 808059c:	40590000 	.word	0x40590000
 80805a0:	40220000 	.word	0x40220000
 80805a4:	40140000 	.word	0x40140000
 80805a8:	40400000 	.word	0x40400000
 80805ac:	2000012c 	.word	0x2000012c

080805b0 <_Z17connectToParticlev>:
  }
}

// These functions manage our connecion to Particle
bool connectToParticle()
{
 80805b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!Cellular.ready())
 80805b4:	4d2f      	ldr	r5, [pc, #188]	; (8080674 <_Z17connectToParticlev+0xc4>)
 80805b6:	4628      	mov	r0, r5
 80805b8:	f7ff fea9 	bl	808030e <_ZN5spark13CellularClass5readyEv>
 80805bc:	4604      	mov	r4, r0
 80805be:	bb38      	cbnz	r0, 8080610 <_Z17connectToParticlev+0x60>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80805c0:	4603      	mov	r3, r0
 80805c2:	4602      	mov	r2, r0
 80805c4:	4601      	mov	r1, r0
 80805c6:	6868      	ldr	r0, [r5, #4]
 80805c8:	f001 f9b0 	bl	808192c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80805cc:	4623      	mov	r3, r4
 80805ce:	4622      	mov	r2, r4
 80805d0:	4621      	mov	r1, r4
 80805d2:	6868      	ldr	r0, [r5, #4]
 80805d4:	f001 f98a 	bl	80818ec <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80805d8:	4620      	mov	r0, r4
 80805da:	f000 ffa3 	bl	8081524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80805de:	4604      	mov	r4, r0
 80805e0:	4e25      	ldr	r6, [pc, #148]	; (8080678 <_Z17connectToParticlev+0xc8>)
 80805e2:	2500      	movs	r5, #0
 80805e4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80805e6:	2000      	movs	r0, #0
 80805e8:	f000 ff9c 	bl	8081524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80805ec:	1b00      	subs	r0, r0, r4
 80805ee:	eb61 0105 	sbc.w	r1, r1, r5
 80805f2:	428f      	cmp	r7, r1
 80805f4:	bf08      	it	eq
 80805f6:	4286      	cmpeq	r6, r0
 80805f8:	d306      	bcc.n	8080608 <_Z17connectToParticlev+0x58>
  {
    Cellular.on();                                           // turn on the Modem
    Cellular.connect();                                      // Connect to the cellular network
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 80805fa:	481e      	ldr	r0, [pc, #120]	; (8080674 <_Z17connectToParticlev+0xc4>)
 80805fc:	f7ff fe87 	bl	808030e <_ZN5spark13CellularClass5readyEv>
 8080600:	b910      	cbnz	r0, 8080608 <_Z17connectToParticlev+0x58>
            spark_process();
 8080602:	f001 f923 	bl	808184c <spark_process>
 8080606:	e7ee      	b.n	80805e6 <_Z17connectToParticlev+0x36>
 8080608:	481a      	ldr	r0, [pc, #104]	; (8080674 <_Z17connectToParticlev+0xc4>)
 808060a:	f7ff fe80 	bl	808030e <_ZN5spark13CellularClass5readyEv>
 808060e:	b308      	cbz	r0, 8080654 <_Z17connectToParticlev+0xa4>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080610:	f000 ff70 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080614:	4c19      	ldr	r4, [pc, #100]	; (808067c <_Z17connectToParticlev+0xcc>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080616:	f247 582f 	movw	r8, #29999	; 0x752f
 808061a:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808061c:	f001 f916 	bl	808184c <spark_process>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080620:	f001 f91c 	bl	808185c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080624:	2000      	movs	r0, #0
 8080626:	f000 ff7d 	bl	8081524 <hal_timer_millis>
 808062a:	4625      	mov	r5, r4


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808062c:	4606      	mov	r6, r0
 808062e:	2700      	movs	r7, #0
 8080630:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080634:	2000      	movs	r0, #0
 8080636:	f000 ff75 	bl	8081524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808063a:	1b80      	subs	r0, r0, r6
 808063c:	eb61 0107 	sbc.w	r1, r1, r7
 8080640:	4589      	cmp	r9, r1
 8080642:	bf08      	it	eq
 8080644:	4580      	cmpeq	r8, r0
 8080646:	d307      	bcc.n	8080658 <_Z17connectToParticlev+0xa8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080648:	f001 f918 	bl	808187c <spark_cloud_flag_connected>
 808064c:	b920      	cbnz	r0, 8080658 <_Z17connectToParticlev+0xa8>
            spark_process();
 808064e:	f001 f8fd 	bl	808184c <spark_process>
 8080652:	e7ef      	b.n	8080634 <_Z17connectToParticlev+0x84>
 8080654:	2400      	movs	r4, #0
 8080656:	e009      	b.n	808066c <_Z17connectToParticlev+0xbc>
 8080658:	f001 f910 	bl	808187c <spark_cloud_flag_connected>
  }
  Particle.process();
  Particle.connect();                                      // Connect to Particle
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 808065c:	4604      	mov	r4, r0
 808065e:	2800      	cmp	r0, #0
 8080660:	d0f8      	beq.n	8080654 <_Z17connectToParticlev+0xa4>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080662:	f000 ff47 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080666:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080668:	f001 f8f0 	bl	808184c <spark_process>
  Particle.process();
  return true;
}
 808066c:	4620      	mov	r0, r4
 808066e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080672:	bf00      	nop
 8080674:	200001c8 	.word	0x200001c8
 8080678:	00015f8f 	.word	0x00015f8f
 808067c:	200006b4 	.word	0x200006b4

08080680 <_Z12notConnectedv>:
  delay(3000);
  Cellular.off();                                           // Turn off the cellular modem
  return true;
}

bool notConnected() {
 8080680:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080682:	f001 f8fb 	bl	808187c <spark_cloud_flag_connected>
  return !Particle.connected();                             // This is a requirement to use waitFor
 8080686:	f080 0001 	eor.w	r0, r0, #1
}
 808068a:	b2c0      	uxtb	r0, r0
 808068c:	bd08      	pop	{r3, pc}
	...

08080690 <_Z22disconnectFromParticlev>:
  Particle.process();
  return true;
}

bool disconnectFromParticle()
{
 8080690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080692:	f001 f8eb 	bl	808186c <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080696:	2000      	movs	r0, #0
 8080698:	f000 ff44 	bl	8081524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808069c:	f242 760f 	movw	r6, #9999	; 0x270f
 80806a0:	4604      	mov	r4, r0
 80806a2:	2500      	movs	r5, #0
 80806a4:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80806a6:	2000      	movs	r0, #0
 80806a8:	f000 ff3c 	bl	8081524 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80806ac:	1b00      	subs	r0, r0, r4
 80806ae:	eb61 0105 	sbc.w	r1, r1, r5
 80806b2:	428f      	cmp	r7, r1
 80806b4:	bf08      	it	eq
 80806b6:	4286      	cmpeq	r6, r0
 80806b8:	d305      	bcc.n	80806c6 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();                                   // Disconnect from Particle in prep for sleep
  waitFor(notConnected,10000);
 80806ba:	f7ff ffe1 	bl	8080680 <_Z12notConnectedv>
 80806be:	b910      	cbnz	r0, 80806c6 <_Z22disconnectFromParticlev+0x36>
            spark_process();
 80806c0:	f001 f8c4 	bl	808184c <spark_process>
 80806c4:	e7ef      	b.n	80806a6 <_Z22disconnectFromParticlev+0x16>
 80806c6:	4c0a      	ldr	r4, [pc, #40]	; (80806f0 <_Z22disconnectFromParticlev+0x60>)
 80806c8:	f7ff ffda 	bl	8080680 <_Z12notConnectedv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80806cc:	2200      	movs	r2, #0
 80806ce:	2102      	movs	r1, #2
 80806d0:	6860      	ldr	r0, [r4, #4]
 80806d2:	f001 f91b 	bl	808190c <network_disconnect>
  Cellular.disconnect();                                   // Disconnect from the cellular network
  delay(3000);
 80806d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80806da:	f001 f9a3 	bl	8081a24 <delay>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80806de:	2300      	movs	r3, #0
 80806e0:	6860      	ldr	r0, [r4, #4]
 80806e2:	461a      	mov	r2, r3
 80806e4:	4619      	mov	r1, r3
 80806e6:	f001 f929 	bl	808193c <network_off>
  Cellular.off();                                           // Turn off the cellular modem
  return true;
}
 80806ea:	2001      	movs	r0, #1
 80806ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80806ee:	bf00      	nop
 80806f0:	200001c8 	.word	0x200001c8

080806f4 <_Z12getLostPowerv>:
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  lastPublish = millis();
  return 1;
}

bool getLostPower() {
 80806f4:	b508      	push	{r3, lr}
	// Bit 2 (mask 0x4) == PG_STAT. If non-zero, power is good but we want to return 1 if power is lost.
	// This means we're powered off USB or VIN, so we don't know for sure if there's a battery
	byte systemStatus = power.getSystemStatus();
 80806f6:	4804      	ldr	r0, [pc, #16]	; (8080708 <_Z12getLostPowerv+0x14>)
 80806f8:	f001 fffd 	bl	80826f6 <_ZN4PMIC15getSystemStatusEv>
	return ((systemStatus & 0x04) == 0);
 80806fc:	f080 0004 	eor.w	r0, r0, #4
}
 8080700:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8080704:	bd08      	pop	{r3, pc}
 8080706:	bf00      	nop
 8080708:	20000100 	.word	0x20000100

0808070c <_Z16takeMeasurementsv>:
  return !Particle.connected();                             // This is a requirement to use waitFor
}


// Take measurements
void takeMeasurements() {
 808070c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080710:	f000 fef0 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  lastSample = millis();
 8080714:	4b50      	ldr	r3, [pc, #320]	; (8080858 <_Z16takeMeasurementsv+0x14c>)
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080716:	4c51      	ldr	r4, [pc, #324]	; (808085c <_Z16takeMeasurementsv+0x150>)
}


// Take measurements
void takeMeasurements() {
  lastSample = millis();
 8080718:	6018      	str	r0, [r3, #0]
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
 808071a:	2007      	movs	r0, #7
 808071c:	f7ff fe42 	bl	80803a4 <_Z9FRAMread8j>
 8080720:	4f4f      	ldr	r7, [pc, #316]	; (8080860 <_Z16takeMeasurementsv+0x154>)
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
 8080722:	f894 8000 	ldrb.w	r8, [r4]
  alertValueInt = int(alertValue);                                              // For reporting
 8080726:	4b4f      	ldr	r3, [pc, #316]	; (8080864 <_Z16takeMeasurementsv+0x158>)
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 8080728:	4e4f      	ldr	r6, [pc, #316]	; (8080868 <_Z16takeMeasurementsv+0x15c>)


// Take measurements
void takeMeasurements() {
  lastSample = millis();
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
 808072a:	7038      	strb	r0, [r7, #0]
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  alertValueInt = int(alertValue);                                              // For reporting
 808072c:	f8c3 8000 	str.w	r8, [r3]
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
  alertValue = 0b00000000;                                                      // Reset for each run through

  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080730:	484e      	ldr	r0, [pc, #312]	; (808086c <_Z16takeMeasurementsv+0x160>)
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  alertValueInt = int(alertValue);                                              // For reporting
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080732:	2300      	movs	r3, #0
  lastSample = millis();
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  alertValueInt = int(alertValue);                                              // For reporting
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
  int lastPumpAmps = pumpAmps;                                                  // What was the pumpAmps measurement last time
 8080734:	6835      	ldr	r5, [r6, #0]
  alertValue = 0b00000000;                                                      // Reset for each run through
 8080736:	7023      	strb	r3, [r4, #0]

  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
 8080738:	f7ff fde9 	bl	808030e <_ZN5spark13CellularClass5readyEv>
 808073c:	b108      	cbz	r0, 8080742 <_Z16takeMeasurementsv+0x36>
 808073e:	f7ff fec9 	bl	80804d4 <_Z17getSignalStrengthv>
  getTemperature();                                                             // Get Temperature at startup as well
 8080742:	f7ff fef5 	bl	8080530 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
 8080746:	484a      	ldr	r0, [pc, #296]	; (8080870 <_Z16takeMeasurementsv+0x164>)
 8080748:	f001 fdfe 	bl	8082348 <_ZN9FuelGauge6getSoCEv>
 808074c:	f003 fd74 	bl	8084238 <__aeabi_f2iz>
 8080750:	4b48      	ldr	r3, [pc, #288]	; (8080874 <_Z16takeMeasurementsv+0x168>)
 8080752:	6018      	str	r0, [r3, #0]
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 8080754:	4b48      	ldr	r3, [pc, #288]	; (8080878 <_Z16takeMeasurementsv+0x16c>)
 8080756:	681a      	ldr	r2, [r3, #0]
 8080758:	f8d2 32bc 	ldr.w	r3, [r2, #700]	; 0x2bc
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;       // Set the value for alertValue - This is opposite - power is good
 808075c:	f8b2 12c0 	ldrh.w	r1, [r2, #704]	; 0x2c0
 8080760:	691b      	ldr	r3, [r3, #16]
 8080762:	4219      	tst	r1, r3
 8080764:	bf08      	it	eq
 8080766:	7823      	ldrbeq	r3, [r4, #0]
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
 8080768:	f8b2 12f8 	ldrh.w	r1, [r2, #760]	; 0x2f8
  alertValue = 0b00000000;                                                      // Reset for each run through

  if (Cellular.ready()) getSignalStrength();                                    // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                             // Get Temperature at startup as well
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;       // Set the value for alertValue - This is opposite - power is good
 808076c:	bf04      	itt	eq
 808076e:	f043 0301 	orreq.w	r3, r3, #1
 8080772:	7023      	strbeq	r3, [r4, #0]
 8080774:	f8d2 32f4 	ldr.w	r3, [r2, #756]	; 0x2f4
 8080778:	691b      	ldr	r3, [r3, #16]
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
 808077a:	4219      	tst	r1, r3
 808077c:	bf02      	ittt	eq
 808077e:	7823      	ldrbeq	r3, [r4, #0]
 8080780:	f043 0302 	orreq.w	r3, r3, #2
 8080784:	7023      	strbeq	r3, [r4, #0]
 8080786:	f8d2 32d8 	ldr.w	r3, [r2, #728]	; 0x2d8
 808078a:	6919      	ldr	r1, [r3, #16]
  if (!pinReadFast(pumpOnPin))                                                  // If the pump is on, we need to sample the current
 808078c:	f8b2 32dc 	ldrh.w	r3, [r2, #732]	; 0x2dc
 8080790:	ea13 0901 	ands.w	r9, r3, r1
 8080794:	d12e      	bne.n	80807f4 <_Z16takeMeasurementsv+0xe8>
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 8080796:	7823      	ldrb	r3, [r4, #0]
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 8080798:	200c      	movs	r0, #12
  stateOfCharge = int(batteryMonitor.getSoC());                                 // Percentage of full charge
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;       // Set the value for alertValue - This is opposite - power is good
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (!pinReadFast(pumpOnPin))                                                  // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
 808079a:	f043 0304 	orr.w	r3, r3, #4
 808079e:	7023      	strb	r3, [r4, #0]
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 80807a0:	f002 fc44 	bl	808302c <analogRead>
 80807a4:	4b35      	ldr	r3, [pc, #212]	; (808087c <_Z16takeMeasurementsv+0x170>)
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 80807a6:	f640 72ff 	movw	r2, #4095	; 0xfff
  if (!pinReadFast(controlPowerPin)) alertValue = alertValue | 0b00000001;       // Set the value for alertValue - This is opposite - power is good
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (!pinReadFast(pumpOnPin))                                                  // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
 80807aa:	6018      	str	r0, [r3, #0]
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 80807ac:	2320      	movs	r3, #32
 80807ae:	9300      	str	r3, [sp, #0]
 80807b0:	4649      	mov	r1, r9
 80807b2:	464b      	mov	r3, r9
 80807b4:	f001 f92a 	bl	8081a0c <_Z3mapiiiii>
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 80807b8:	1c6b      	adds	r3, r5, #1
 80807ba:	4298      	cmp	r0, r3
  if (!pinReadFast(lowLevelPin)) alertValue = alertValue | 0b00000010;          // Set the value for alertValue
  if (!pinReadFast(pumpOnPin))                                                  // If the pump is on, we need to sample the current
  {
    alertValue = alertValue | 0b00000100;                                       // Set the value for alertValue
    pumpCurrentRaw = analogRead(pumpCurrentPin);                                // Current sensor is fairly linear from 1 to 32 Amps
    pumpAmps = map(pumpCurrentRaw,0,4095,0,32);                                 // Map analog voltage to current
 80807bc:	6030      	str	r0, [r6, #0]
    if (pumpAmps >= lastPumpAmps + 2 || pumpAmps <= lastPumpAmps - 2) pumpAmpsSignificantChange = true;
 80807be:	dc05      	bgt.n	80807cc <_Z16takeMeasurementsv+0xc0>
 80807c0:	3d01      	subs	r5, #1
 80807c2:	42a8      	cmp	r0, r5
 80807c4:	bfac      	ite	ge
 80807c6:	2500      	movge	r5, #0
 80807c8:	2501      	movlt	r5, #1
 80807ca:	e000      	b.n	80807ce <_Z16takeMeasurementsv+0xc2>
 80807cc:	2501      	movs	r5, #1
    if (!(controlRegister & 0b00000010)) {                                      // This is a new pumping session
 80807ce:	783b      	ldrb	r3, [r7, #0]
 80807d0:	079b      	lsls	r3, r3, #30
 80807d2:	d430      	bmi.n	8080836 <_Z16takeMeasurementsv+0x12a>
      pumpingStart = Time.now();
 80807d4:	f002 f9bf 	bl	8082b56 <_ZN9TimeClass3nowEv>
 80807d8:	4b29      	ldr	r3, [pc, #164]	; (8080880 <_Z16takeMeasurementsv+0x174>)
 80807da:	4601      	mov	r1, r0
 80807dc:	6018      	str	r0, [r3, #0]
      FRAMwrite32(CURRENTCOUNTSTIME,pumpingStart);                              // Write to FRAM in case of a reset
 80807de:	200e      	movs	r0, #14
 80807e0:	f7ff fe56 	bl	8080490 <_Z11FRAMwrite32im>
      FRAMwrite8(CONTROLREGISTER,controlRegister | 0b00000010);                 // Turn on the pumping bit
 80807e4:	4b1e      	ldr	r3, [pc, #120]	; (8080860 <_Z16takeMeasurementsv+0x154>)
 80807e6:	2007      	movs	r0, #7
 80807e8:	7819      	ldrb	r1, [r3, #0]
 80807ea:	f041 0102 	orr.w	r1, r1, #2
 80807ee:	f7ff fddf 	bl	80803b0 <_Z10FRAMwrite8jh>
 80807f2:	e020      	b.n	8080836 <_Z16takeMeasurementsv+0x12a>
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
 80807f4:	7839      	ldrb	r1, [r7, #0]
 80807f6:	f001 0302 	and.w	r3, r1, #2
 80807fa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80807fe:	b1cb      	cbz	r3, 8080834 <_Z16takeMeasurementsv+0x128>
    FRAMwrite8(CONTROLREGISTER,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
 8080800:	f081 0102 	eor.w	r1, r1, #2
 8080804:	2007      	movs	r0, #7
 8080806:	f7ff fdd3 	bl	80803b0 <_Z10FRAMwrite8jh>
    time_t pumpingStop = Time.now();
 808080a:	f002 f9a4 	bl	8082b56 <_ZN9TimeClass3nowEv>
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 808080e:	4b1c      	ldr	r3, [pc, #112]	; (8080880 <_Z16takeMeasurementsv+0x174>)
void takeMeasurements() {
  lastSample = millis();
  controlRegister = FRAMread8(CONTROLREGISTER);                                 // Check the control register
  byte lastAlertValue = alertValue;                                             // Last value - so we can detect a
  alertValueInt = int(alertValue);                                              // For reporting
  bool pumpAmpsSignificantChange = false;                                       // Don't want to waste bandwidth reporting small changes
 8080810:	2500      	movs	r5, #0
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
    FRAMwrite8(CONTROLREGISTER,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
    time_t pumpingStop = Time.now();
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 8080812:	6819      	ldr	r1, [r3, #0]
 8080814:	f003 fd84 	bl	8084320 <difftime>
 8080818:	2200      	movs	r2, #0
 808081a:	4b1a      	ldr	r3, [pc, #104]	; (8080884 <_Z16takeMeasurementsv+0x178>)
 808081c:	f003 f8d8 	bl	80839d0 <__aeabi_ddiv>
 8080820:	f003 f9be 	bl	8083ba0 <__aeabi_d2iz>
 8080824:	4b18      	ldr	r3, [pc, #96]	; (8080888 <_Z16takeMeasurementsv+0x17c>)
 8080826:	6819      	ldr	r1, [r3, #0]
 8080828:	4401      	add	r1, r0
    FRAMwrite16(DAILYPUMPMINUTES,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 808082a:	2014      	movs	r0, #20
    }
  }
  else if (controlRegister & 0b00000010) {                                      // If the pump is off but the pumping flag is set
    FRAMwrite8(CONTROLREGISTER,controlRegister ^ 0b00000010);                   // It is on and I want to turn the pumping bit off with an xor
    time_t pumpingStop = Time.now();
    dailyPumpingMins += int(difftime(pumpingStop,pumpingStart)/60);                 // Add to the total for the day
 808082c:	6019      	str	r1, [r3, #0]
    FRAMwrite16(DAILYPUMPMINUTES,dailyPumpingMins);                             // Store it in FRAM in case of a reset
 808082e:	f7ff fdd9 	bl	80803e4 <_Z11FRAMwrite16ji>
 8080832:	e000      	b.n	8080836 <_Z16takeMeasurementsv+0x12a>
  }
  else pumpAmps = 0;
 8080834:	6035      	str	r5, [r6, #0]
  if (getLostPower()) alertValue = alertValue | 0b10000000;                      // Set the value for alertValue
 8080836:	f7ff ff5d 	bl	80806f4 <_Z12getLostPowerv>
 808083a:	b118      	cbz	r0, 8080844 <_Z16takeMeasurementsv+0x138>
 808083c:	7823      	ldrb	r3, [r4, #0]
 808083e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080842:	7023      	strb	r3, [r4, #0]
  if (alertValue != lastAlertValue || pumpAmpsSignificantChange) state = REPORTING_STATE;
 8080844:	7823      	ldrb	r3, [r4, #0]
 8080846:	4543      	cmp	r3, r8
 8080848:	d100      	bne.n	808084c <_Z16takeMeasurementsv+0x140>
 808084a:	b115      	cbz	r5, 8080852 <_Z16takeMeasurementsv+0x146>
 808084c:	4b0f      	ldr	r3, [pc, #60]	; (808088c <_Z16takeMeasurementsv+0x180>)
 808084e:	2205      	movs	r2, #5
 8080850:	701a      	strb	r2, [r3, #0]
}
 8080852:	b003      	add	sp, #12
 8080854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080858:	2000014c 	.word	0x2000014c
 808085c:	20000128 	.word	0x20000128
 8080860:	200001bd 	.word	0x200001bd
 8080864:	20000134 	.word	0x20000134
 8080868:	20000114 	.word	0x20000114
 808086c:	200001c8 	.word	0x200001c8
 8080870:	200001ac 	.word	0x200001ac
 8080874:	20000120 	.word	0x20000120
 8080878:	20000140 	.word	0x20000140
 808087c:	200001b8 	.word	0x200001b8
 8080880:	20000148 	.word	0x20000148
 8080884:	404e0000 	.word	0x404e0000
 8080888:	2000011c 	.word	0x2000011c
 808088c:	20000118 	.word	0x20000118

08080890 <_Z20meterParticlePublishv>:
	byte systemStatus = power.getSystemStatus();
	return ((systemStatus & 0x04) == 0);
}

bool meterParticlePublish(void)
{
 8080890:	b508      	push	{r3, lr}
 8080892:	f000 fe2f 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080896:	4b05      	ldr	r3, [pc, #20]	; (80808ac <_Z20meterParticlePublishv+0x1c>)
 8080898:	681b      	ldr	r3, [r3, #0]
 808089a:	1ac0      	subs	r0, r0, r3
 808089c:	4b04      	ldr	r3, [pc, #16]	; (80808b0 <_Z20meterParticlePublishv+0x20>)
 808089e:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80808a0:	4298      	cmp	r0, r3
 80808a2:	bf34      	ite	cc
 80808a4:	2000      	movcc	r0, #0
 80808a6:	2001      	movcs	r0, #1
 80808a8:	bd08      	pop	{r3, pc}
 80808aa:	bf00      	nop
 80808ac:	200001c0 	.word	0x200001c0
 80808b0:	2000000c 	.word	0x2000000c

080808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80808b4:	b508      	push	{r3, lr}
  t = Time.now();
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  waitUntil(meterParticlePublish);
  Particle.publish("Time",data,PRIVATE);
  lastPublish = millis();
  waitUntil(meterParticlePublish);
 80808b6:	f7ff ffeb 	bl	8080890 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80808ba:	b118      	cbz	r0, 80808c4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80808bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80808c0:	f7ff bfe6 	b.w	8080890 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80808c4:	f000 ffc2 	bl	808184c <spark_process>
 80808c8:	e7f5      	b.n	80808b6 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62+0x2>
	...

080808cc <_Z14fullModemResetv>:
{
  if(millis() - lastSample >= sampleFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 80808cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80808ce:	f000 ffcd 	bl	808186c <spark_cloud_flag_disconnect>
 80808d2:	f000 fe0f 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80808d6:	f643 2597 	movw	r5, #14999	; 0x3a97
 80808da:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80808dc:	f000 ffce 	bl	808187c <spark_cloud_flag_connected>
 80808e0:	b140      	cbz	r0, 80808f4 <_Z14fullModemResetv+0x28>
 80808e2:	f000 fe07 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
 80808e6:	1b00      	subs	r0, r0, r4
 80808e8:	42a8      	cmp	r0, r5
 80808ea:	d803      	bhi.n	80808f4 <_Z14fullModemResetv+0x28>
		delay(100);
 80808ec:	2064      	movs	r0, #100	; 0x64
 80808ee:	f001 f899 	bl	8081a24 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80808f2:	e7f3      	b.n	80808dc <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80808f4:	2100      	movs	r1, #0
 80808f6:	4b09      	ldr	r3, [pc, #36]	; (808091c <_Z14fullModemResetv+0x50>)
 80808f8:	f247 5230 	movw	r2, #30000	; 0x7530
 80808fc:	4608      	mov	r0, r1
 80808fe:	f000 fd91 	bl	8081424 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080906:	f001 f88d 	bl	8081a24 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808090a:	4b05      	ldr	r3, [pc, #20]	; (8080920 <_Z14fullModemResetv+0x54>)
 808090c:	220a      	movs	r2, #10
 808090e:	681b      	ldr	r3, [r3, #0]
 8080910:	2101      	movs	r1, #1
 8080912:	4668      	mov	r0, sp
 8080914:	f002 f85c 	bl	80829d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080918:	b003      	add	sp, #12
 808091a:	bd30      	pop	{r4, r5, pc}
 808091c:	08084f03 	.word	0x08084f03
 8080920:	200001c4 	.word	0x200001c4

08080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080924:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080926:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080928:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808092a:	b17c      	cbz	r4, 808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808092c:	6863      	ldr	r3, [r4, #4]
 808092e:	3b01      	subs	r3, #1
 8080930:	6063      	str	r3, [r4, #4]
 8080932:	b95b      	cbnz	r3, 808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080934:	6823      	ldr	r3, [r4, #0]
 8080936:	4620      	mov	r0, r4
 8080938:	689b      	ldr	r3, [r3, #8]
 808093a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808093c:	68a3      	ldr	r3, [r4, #8]
 808093e:	3b01      	subs	r3, #1
 8080940:	60a3      	str	r3, [r4, #8]
 8080942:	b91b      	cbnz	r3, 808094c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080944:	6823      	ldr	r3, [r4, #0]
 8080946:	4620      	mov	r0, r4
 8080948:	68db      	ldr	r3, [r3, #12]
 808094a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808094c:	4628      	mov	r0, r5
 808094e:	bd38      	pop	{r3, r4, r5, pc}

08080950 <_Z9ResetFRAMv>:
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080950:	b530      	push	{r4, r5, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080952:	2007      	movs	r0, #7
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080954:	b085      	sub	sp, #20
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080956:	f7ff fd25 	bl	80803a4 <_Z9FRAMread8j>
 808095a:	4b1f      	ldr	r3, [pc, #124]	; (80809d8 <_Z9ResetFRAMv+0x88>)
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 808095c:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808095e:	781b      	ldrb	r3, [r3, #0]
 8080960:	491e      	ldr	r1, [pc, #120]	; (80809dc <_Z9ResetFRAMv+0x8c>)
 8080962:	f88d 2000 	strb.w	r2, [sp]


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 8080966:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 8080968:	4a1d      	ldr	r2, [pc, #116]	; (80809e0 <_Z9ResetFRAMv+0x90>)
 808096a:	a802      	add	r0, sp, #8
 808096c:	f7ff fcc2 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080970:	a803      	add	r0, sp, #12
 8080972:	f7ff ffd7 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080976:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
 8080978:	2100      	movs	r1, #0
 808097a:	4620      	mov	r0, r4
 808097c:	f7ff fd18 	bl	80803b0 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080980:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8080984:	d103      	bne.n	808098e <_Z9ResetFRAMv+0x3e>
 8080986:	f002 f9f9 	bl	8082d7c <_Z16_fetch_usbserialv>
 808098a:	4916      	ldr	r1, [pc, #88]	; (80809e4 <_Z9ResetFRAMv+0x94>)
 808098c:	e014      	b.n	80809b8 <_Z9ResetFRAMv+0x68>
        if (i==16384) Serial.println(F("50% done"));
 808098e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8080992:	d103      	bne.n	808099c <_Z9ResetFRAMv+0x4c>
 8080994:	f002 f9f2 	bl	8082d7c <_Z16_fetch_usbserialv>
 8080998:	4913      	ldr	r1, [pc, #76]	; (80809e8 <_Z9ResetFRAMv+0x98>)
 808099a:	e00d      	b.n	80809b8 <_Z9ResetFRAMv+0x68>
        if (i==(24576)) Serial.println(F("75% done"));
 808099c:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 80809a0:	d103      	bne.n	80809aa <_Z9ResetFRAMv+0x5a>
 80809a2:	f002 f9eb 	bl	8082d7c <_Z16_fetch_usbserialv>
 80809a6:	4911      	ldr	r1, [pc, #68]	; (80809ec <_Z9ResetFRAMv+0x9c>)
 80809a8:	e006      	b.n	80809b8 <_Z9ResetFRAMv+0x68>
        if (i==32767) Serial.println(F("Done"));
 80809aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80809ae:	429c      	cmp	r4, r3
 80809b0:	d104      	bne.n	80809bc <_Z9ResetFRAMv+0x6c>
 80809b2:	f002 f9e3 	bl	8082d7c <_Z16_fetch_usbserialv>
 80809b6:	490e      	ldr	r1, [pc, #56]	; (80809f0 <_Z9ResetFRAMv+0xa0>)
 80809b8:	f001 fed5 	bl	8082766 <_ZN5Print7printlnEPKc>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 80809bc:	3401      	adds	r4, #1
 80809be:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80809c2:	d1d9      	bne.n	8080978 <_Z9ResetFRAMv+0x28>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 80809c4:	4629      	mov	r1, r5
 80809c6:	2007      	movs	r0, #7
 80809c8:	f7ff fcf2 	bl	80803b0 <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 80809cc:	2109      	movs	r1, #9
 80809ce:	2000      	movs	r0, #0
 80809d0:	f7ff fcee 	bl	80803b0 <_Z10FRAMwrite8jh>
}
 80809d4:	b005      	add	sp, #20
 80809d6:	bd30      	pop	{r4, r5, pc}
 80809d8:	2000010a 	.word	0x2000010a
 80809dc:	080850ed 	.word	0x080850ed
 80809e0:	08084f10 	.word	0x08084f10
 80809e4:	08084f26 	.word	0x08084f26
 80809e8:	08084f2f 	.word	0x08084f2f
 80809ec:	08084f38 	.word	0x08084f38
 80809f0:	08084f41 	.word	0x08084f41

080809f4 <_Z9resetFRAM6String>:
  else return 0;
}


int resetFRAM(String command)   // Will reset the local counts
{
 80809f4:	b508      	push	{r3, lr}
 80809f6:	4904      	ldr	r1, [pc, #16]	; (8080a08 <_Z9resetFRAM6String+0x14>)
 80809f8:	f001 ffb7 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80809fc:	b110      	cbz	r0, 8080a04 <_Z9resetFRAM6String+0x10>
  {
    ResetFRAM();
 80809fe:	f7ff ffa7 	bl	8080950 <_Z9ResetFRAMv>
    return 1;
 8080a02:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080a04:	bd08      	pop	{r3, pc}
 8080a06:	bf00      	nop
 8080a08:	0808517d 	.word	0x0808517d

08080a0c <_Z12resolveAlertv>:
}

void pumpTimerCallback() { pumpingEnabled = false; }

void resolveAlert()
{
 8080a0c:	b510      	push	{r4, lr}
 8080a0e:	b0a4      	sub	sp, #144	; 0x90
  char data[128] = "";
 8080a10:	2100      	movs	r1, #0
 8080a12:	227c      	movs	r2, #124	; 0x7c
 8080a14:	a805      	add	r0, sp, #20
 8080a16:	9104      	str	r1, [sp, #16]
 8080a18:	f003 fd8b 	bl	8084532 <memset>
  if (alertValue & 0b00000001) strcat(data,"Control Power - ");
 8080a1c:	4b18      	ldr	r3, [pc, #96]	; (8080a80 <_Z12resolveAlertv+0x74>)
 8080a1e:	781c      	ldrb	r4, [r3, #0]
 8080a20:	07e0      	lsls	r0, r4, #31
 8080a22:	d503      	bpl.n	8080a2c <_Z12resolveAlertv+0x20>
 8080a24:	4917      	ldr	r1, [pc, #92]	; (8080a84 <_Z12resolveAlertv+0x78>)
 8080a26:	a804      	add	r0, sp, #16
 8080a28:	f003 fdb4 	bl	8084594 <strcat>
  if (alertValue & 0b00000010) strcat(data,"Low Level - ");
 8080a2c:	07a1      	lsls	r1, r4, #30
 8080a2e:	d503      	bpl.n	8080a38 <_Z12resolveAlertv+0x2c>
 8080a30:	4915      	ldr	r1, [pc, #84]	; (8080a88 <_Z12resolveAlertv+0x7c>)
 8080a32:	a804      	add	r0, sp, #16
 8080a34:	f003 fdae 	bl	8084594 <strcat>
  if (alertValue & 0b00000100) strcat(data,"Pump On - ");
 8080a38:	0762      	lsls	r2, r4, #29
 8080a3a:	d503      	bpl.n	8080a44 <_Z12resolveAlertv+0x38>
 8080a3c:	4913      	ldr	r1, [pc, #76]	; (8080a8c <_Z12resolveAlertv+0x80>)
 8080a3e:	a804      	add	r0, sp, #16
 8080a40:	f003 fda8 	bl	8084594 <strcat>
  if (alertValue & 0b10000000) strcat(data,"Particle Power");
 8080a44:	0623      	lsls	r3, r4, #24
 8080a46:	d503      	bpl.n	8080a50 <_Z12resolveAlertv+0x44>
 8080a48:	4911      	ldr	r1, [pc, #68]	; (8080a90 <_Z12resolveAlertv+0x84>)
 8080a4a:	a804      	add	r0, sp, #16
 8080a4c:	f003 fda2 	bl	8084594 <strcat>
  waitUntil(meterParticlePublish);
 8080a50:	f7ff ff30 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
 8080a54:	4b0f      	ldr	r3, [pc, #60]	; (8080a94 <_Z12resolveAlertv+0x88>)
 8080a56:	781b      	ldrb	r3, [r3, #0]
 8080a58:	b163      	cbz	r3, 8080a74 <_Z12resolveAlertv+0x68>
 8080a5a:	4b0f      	ldr	r3, [pc, #60]	; (8080a98 <_Z12resolveAlertv+0x8c>)
 8080a5c:	2200      	movs	r2, #0
 8080a5e:	781b      	ldrb	r3, [r3, #0]
 8080a60:	a802      	add	r0, sp, #8
 8080a62:	f88d 2000 	strb.w	r2, [sp]
 8080a66:	490d      	ldr	r1, [pc, #52]	; (8080a9c <_Z12resolveAlertv+0x90>)
 8080a68:	aa04      	add	r2, sp, #16
 8080a6a:	f7ff fc43 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080a6e:	a803      	add	r0, sp, #12
 8080a70:	f7ff ff58 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a74:	f000 fd3e 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080a78:	4b09      	ldr	r3, [pc, #36]	; (8080aa0 <_Z12resolveAlertv+0x94>)
 8080a7a:	6018      	str	r0, [r3, #0]
}
 8080a7c:	b024      	add	sp, #144	; 0x90
 8080a7e:	bd10      	pop	{r4, pc}
 8080a80:	20000128 	.word	0x20000128
 8080a84:	08084f46 	.word	0x08084f46
 8080a88:	08084f57 	.word	0x08084f57
 8080a8c:	08084f64 	.word	0x08084f64
 8080a90:	08084f6f 	.word	0x08084f6f
 8080a94:	20000144 	.word	0x20000144
 8080a98:	2000010a 	.word	0x2000010a
 8080a9c:	08084f7e 	.word	0x08084f7e
 8080aa0:	200001c0 	.word	0x200001c0

08080aa4 <_Z9sendEventv>:

void sendEvent()
{
 8080aa4:	b500      	push	{lr}
  char data[256];                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080aa6:	4a15      	ldr	r2, [pc, #84]	; (8080afc <_Z9sendEventv+0x58>)
 8080aa8:	4b15      	ldr	r3, [pc, #84]	; (8080b00 <_Z9sendEventv+0x5c>)
 8080aaa:	6812      	ldr	r2, [r2, #0]
  if(verboseMode) Particle.publish("Alerts",data,PRIVATE);
  lastPublish = millis();
}

void sendEvent()
{
 8080aac:	b0c9      	sub	sp, #292	; 0x124
  char data[256];                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"alertValue\":%i, \"pumpAmps\":%i, \"pumpMins\":%i, \"battery\":%i, \"temp\":%i, \"resets\":%i}",alertValue, pumpAmps, dailyPumpingMins, stateOfCharge, temperatureF,resetCount);
 8080aae:	781b      	ldrb	r3, [r3, #0]
 8080ab0:	9204      	str	r2, [sp, #16]
 8080ab2:	4a14      	ldr	r2, [pc, #80]	; (8080b04 <_Z9sendEventv+0x60>)
 8080ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080ab8:	6812      	ldr	r2, [r2, #0]
 8080aba:	a808      	add	r0, sp, #32
 8080abc:	9203      	str	r2, [sp, #12]
 8080abe:	4a12      	ldr	r2, [pc, #72]	; (8080b08 <_Z9sendEventv+0x64>)
 8080ac0:	6812      	ldr	r2, [r2, #0]
 8080ac2:	9202      	str	r2, [sp, #8]
 8080ac4:	4a11      	ldr	r2, [pc, #68]	; (8080b0c <_Z9sendEventv+0x68>)
 8080ac6:	6812      	ldr	r2, [r2, #0]
 8080ac8:	9201      	str	r2, [sp, #4]
 8080aca:	4a11      	ldr	r2, [pc, #68]	; (8080b10 <_Z9sendEventv+0x6c>)
 8080acc:	6812      	ldr	r2, [r2, #0]
 8080ace:	9200      	str	r2, [sp, #0]
 8080ad0:	4a10      	ldr	r2, [pc, #64]	; (8080b14 <_Z9sendEventv+0x70>)
 8080ad2:	f000 ff83 	bl	80819dc <snprintf>
 8080ad6:	4b10      	ldr	r3, [pc, #64]	; (8080b18 <_Z9sendEventv+0x74>)
  Particle.publish("Monitoring_Event", data, PRIVATE);
 8080ad8:	2200      	movs	r2, #0
 8080ada:	781b      	ldrb	r3, [r3, #0]
 8080adc:	490f      	ldr	r1, [pc, #60]	; (8080b1c <_Z9sendEventv+0x78>)
 8080ade:	f88d 2000 	strb.w	r2, [sp]
 8080ae2:	a806      	add	r0, sp, #24
 8080ae4:	aa08      	add	r2, sp, #32
 8080ae6:	f7ff fc05 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080aea:	a807      	add	r0, sp, #28
 8080aec:	f7ff ff1a 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 8080af0:	4b0b      	ldr	r3, [pc, #44]	; (8080b20 <_Z9sendEventv+0x7c>)
 8080af2:	2201      	movs	r2, #1
 8080af4:	701a      	strb	r2, [r3, #0]
}
 8080af6:	b049      	add	sp, #292	; 0x124
 8080af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8080afc:	20000124 	.word	0x20000124
 8080b00:	20000128 	.word	0x20000128
 8080b04:	2000012c 	.word	0x2000012c
 8080b08:	20000120 	.word	0x20000120
 8080b0c:	2000011c 	.word	0x2000011c
 8080b10:	20000114 	.word	0x20000114
 8080b14:	08084f85 	.word	0x08084f85
 8080b18:	2000010a 	.word	0x2000010a
 8080b1c:	08084fdb 	.word	0x08084fdb
 8080b20:	200001bc 	.word	0x200001bc

08080b24 <loop>:
}



void loop()
{
 8080b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
 8080b26:	4c98      	ldr	r4, [pc, #608]	; (8080d88 <loop+0x264>)
 8080b28:	7823      	ldrb	r3, [r4, #0]
 8080b2a:	3b01      	subs	r3, #1
 8080b2c:	2b05      	cmp	r3, #5
 8080b2e:	f200 8128 	bhi.w	8080d82 <loop+0x25e>
 8080b32:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080b36:	00fc      	.short	0x00fc
 8080b38:	00370006 	.word	0x00370006
 8080b3c:	008f0070 	.word	0x008f0070
 8080b40:	00c9      	.short	0x00c9
 8080b42:	f000 fcd7 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  case IDLE_STATE:
    if (millis() - lastSample >= sampleFrequency) takeMeasurements();
 8080b46:	4b91      	ldr	r3, [pc, #580]	; (8080d8c <loop+0x268>)
 8080b48:	681b      	ldr	r3, [r3, #0]
 8080b4a:	1ac0      	subs	r0, r0, r3
 8080b4c:	4b90      	ldr	r3, [pc, #576]	; (8080d90 <loop+0x26c>)
 8080b4e:	681b      	ldr	r3, [r3, #0]
 8080b50:	4298      	cmp	r0, r3
 8080b52:	d301      	bcc.n	8080b58 <loop+0x34>
 8080b54:	f7ff fdda 	bl	808070c <_Z16takeMeasurementsv>
    if (Time.hour() != currentHourlyPeriod) {
 8080b58:	f002 f804 	bl	8082b64 <_ZN9TimeClass4hourEv>
 8080b5c:	4b8d      	ldr	r3, [pc, #564]	; (8080d94 <loop+0x270>)
 8080b5e:	781b      	ldrb	r3, [r3, #0]
 8080b60:	4298      	cmp	r0, r3
 8080b62:	d011      	beq.n	8080b88 <loop+0x64>
      state = REPORTING_STATE;                                    // We want to report on the hour
 8080b64:	2305      	movs	r3, #5
 8080b66:	7023      	strb	r3, [r4, #0]
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
 8080b68:	f001 fffc 	bl	8082b64 <_ZN9TimeClass4hourEv>
 8080b6c:	4605      	mov	r5, r0
 8080b6e:	b958      	cbnz	r0, 8080b88 <loop+0x64>
        dailyPumpingMins = 0;                                     // Reset each day.
 8080b70:	4b89      	ldr	r3, [pc, #548]	; (8080d98 <loop+0x274>)
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080b72:	4601      	mov	r1, r0
  case IDLE_STATE:
    if (millis() - lastSample >= sampleFrequency) takeMeasurements();
    if (Time.hour() != currentHourlyPeriod) {
      state = REPORTING_STATE;                                    // We want to report on the hour
      if (Time.hour() == 0) {                                     // Check to see if it is midnight
        dailyPumpingMins = 0;                                     // Reset each day.
 8080b74:	6018      	str	r0, [r3, #0]
        FRAMwrite16(DAILYPUMPMINUTES,0);                          // And zero the value in FRAM
 8080b76:	2014      	movs	r0, #20
 8080b78:	f7ff fc34 	bl	80803e4 <_Z11FRAMwrite16ji>
 8080b7c:	f000 fe7e 	bl	808187c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 8080b80:	b110      	cbz	r0, 8080b88 <loop+0x64>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 8080b82:	4628      	mov	r0, r5
 8080b84:	f000 fe9a 	bl	80818bc <spark_sync_time>
        Particle.syncTime();                                      // This is needed since these devices never disconnect
      }
    }
    if (pumpingEnabled) state = PUMPING_STATE;
 8080b88:	4b84      	ldr	r3, [pc, #528]	; (8080d9c <loop+0x278>)
 8080b8a:	781b      	ldrb	r3, [r3, #0]
 8080b8c:	b10b      	cbz	r3, 8080b92 <loop+0x6e>
 8080b8e:	2303      	movs	r3, #3
 8080b90:	7023      	strb	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;   // The battery is low - sleep
 8080b92:	4b83      	ldr	r3, [pc, #524]	; (8080da0 <loop+0x27c>)
 8080b94:	681a      	ldr	r2, [r3, #0]
 8080b96:	4b83      	ldr	r3, [pc, #524]	; (8080da4 <loop+0x280>)
 8080b98:	681b      	ldr	r3, [r3, #0]
 8080b9a:	429a      	cmp	r2, r3
 8080b9c:	f300 80f1 	bgt.w	8080d82 <loop+0x25e>
 8080ba0:	2304      	movs	r3, #4
 8080ba2:	e027      	b.n	8080bf4 <loop+0xd0>
    break;

  case PUMPING_STATE: {
    if (pumpingEnabled && !pinReadFast(pumpControlPin)) {       // First time to this state we will turn on the pump and report
 8080ba4:	4b7d      	ldr	r3, [pc, #500]	; (8080d9c <loop+0x278>)
 8080ba6:	781d      	ldrb	r5, [r3, #0]
 8080ba8:	b335      	cbz	r5, 8080bf8 <loop+0xd4>
 8080baa:	4b7f      	ldr	r3, [pc, #508]	; (8080da8 <loop+0x284>)
 8080bac:	681b      	ldr	r3, [r3, #0]
 8080bae:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8080bb2:	f8b3 318c 	ldrh.w	r3, [r3, #396]	; 0x18c
 8080bb6:	6915      	ldr	r5, [r2, #16]
 8080bb8:	401d      	ands	r5, r3
 8080bba:	f040 80e2 	bne.w	8080d82 <loop+0x25e>
      digitalWrite(pumpControlPin,HIGH);
 8080bbe:	2101      	movs	r1, #1
 8080bc0:	200e      	movs	r0, #14
    bool isValid() const { return handle!=nullptr; }
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
 8080bc2:	4e7a      	ldr	r6, [pc, #488]	; (8080dac <loop+0x288>)
 8080bc4:	f002 fa19 	bl	8082ffa <digitalWrite>
      digitalWrite(blueLED,HIGH);
 8080bc8:	2101      	movs	r1, #1
 8080bca:	2007      	movs	r0, #7
 8080bcc:	f002 fa15 	bl	8082ffa <digitalWrite>
      takeMeasurements();                                       // Take measurements since we have started pumping
 8080bd0:	f7ff fd9c 	bl	808070c <_Z16takeMeasurementsv>
 8080bd4:	4629      	mov	r1, r5
 8080bd6:	4630      	mov	r0, r6
 8080bd8:	f7ff fba7 	bl	808032a <_ZN5Timer4stopEj>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 8080bdc:	68b0      	ldr	r0, [r6, #8]
 8080bde:	b140      	cbz	r0, 8080bf2 <loop+0xce>
 8080be0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8080be4:	9300      	str	r3, [sp, #0]
 8080be6:	9501      	str	r5, [sp, #4]
 8080be8:	462b      	mov	r3, r5
 8080bea:	462a      	mov	r2, r5
 8080bec:	4629      	mov	r1, r5
 8080bee:	f000 fc49 	bl	8081484 <os_timer_change>
      pumpBackupTimer.start();
      state = REPORTING_STATE;                                  // Report the pumping event
 8080bf2:	2305      	movs	r3, #5
 8080bf4:	7023      	strb	r3, [r4, #0]
 8080bf6:	e0c4      	b.n	8080d82 <loop+0x25e>
    }
    else if (!pumpingEnabled) {
      digitalWrite(pumpControlPin,LOW);
 8080bf8:	4629      	mov	r1, r5
 8080bfa:	200e      	movs	r0, #14
 8080bfc:	f002 f9fd 	bl	8082ffa <digitalWrite>
      digitalWrite(blueLED,LOW);
 8080c00:	4629      	mov	r1, r5
 8080c02:	2007      	movs	r0, #7
 8080c04:	f002 f9f9 	bl	8082ffa <digitalWrite>
      pumpBackupTimer.stop();
 8080c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8080c0c:	4867      	ldr	r0, [pc, #412]	; (8080dac <loop+0x288>)
 8080c0e:	f7ff fb8c 	bl	808032a <_ZN5Timer4stopEj>
      state = IDLE_STATE;                                       // Go back to IDLE.  Since pumping stopped - a report will be sent automatically
 8080c12:	2302      	movs	r3, #2
 8080c14:	e7ee      	b.n	8080bf4 <loop+0xd0>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080c16:	f000 fe31 	bl	808187c <spark_cloud_flag_connected>
    }
  } break;


  case LOW_BATTERY_STATE: {
      if (Particle.connected()) {
 8080c1a:	b108      	cbz	r0, 8080c20 <loop+0xfc>
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
 8080c1c:	f7ff fd38 	bl	8080690 <_Z22disconnectFromParticlev>
      }
      ledState = false;
 8080c20:	4b63      	ldr	r3, [pc, #396]	; (8080db0 <loop+0x28c>)
 8080c22:	2400      	movs	r4, #0
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080c24:	4621      	mov	r1, r4
 8080c26:	2007      	movs	r0, #7

  case LOW_BATTERY_STATE: {
      if (Particle.connected()) {
        disconnectFromParticle();                               // If connected, we need to disconned and power down the modem
      }
      ledState = false;
 8080c28:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                // Turn off the LED
 8080c2a:	f002 f9e6 	bl	8082ffa <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                          // Turns off the temp sensor
 8080c2e:	4621      	mov	r1, r4
 8080c30:	201d      	movs	r0, #29
 8080c32:	f002 f9e2 	bl	8082ffa <digitalWrite>
      watchdogISR();                                            // Pet the watchdog
 8080c36:	f7ff fb23 	bl	8080280 <_Z11watchdogISRv>
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
 8080c3a:	f001 ff9d 	bl	8082b78 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
 8080c3e:	4b5d      	ldr	r3, [pc, #372]	; (8080db4 <loop+0x290>)
 8080c40:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080c44:	223c      	movs	r2, #60	; 0x3c
 8080c46:	4342      	muls	r2, r0
 8080c48:	681b      	ldr	r3, [r3, #0]
 8080c4a:	2101      	movs	r1, #1
 8080c4c:	a802      	add	r0, sp, #8
 8080c4e:	f001 febf 	bl	80829d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080c52:	e096      	b.n	8080d82 <loop+0x25e>

  case REPORTING_STATE: {
    watchdogISR();                                    // Pet the watchdog once an hour
    pettingEnabled = false;                           // see this reporint cycle through
 8080c54:	4d58      	ldr	r5, [pc, #352]	; (8080db8 <loop+0x294>)
      int secondsToHour = (60*(60 - Time.minute()));            // Time till the top of the hour
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);              // Very deep sleep till the next hour - then resets
    } break;

  case REPORTING_STATE: {
    watchdogISR();                                    // Pet the watchdog once an hour
 8080c56:	f7ff fb13 	bl	8080280 <_Z11watchdogISRv>
    pettingEnabled = false;                           // see this reporint cycle through
 8080c5a:	2300      	movs	r3, #0
 8080c5c:	702b      	strb	r3, [r5, #0]
 8080c5e:	f000 fe0d 	bl	808187c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 8080c62:	b940      	cbnz	r0, 8080c76 <loop+0x152>
      if (!connectToParticle()) {
 8080c64:	f7ff fca4 	bl	80805b0 <_Z17connectToParticlev>
 8080c68:	b928      	cbnz	r0, 8080c76 <loop+0x152>
 8080c6a:	f000 fc43 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 8080c6e:	4b53      	ldr	r3, [pc, #332]	; (8080dbc <loop+0x298>)
 8080c70:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
 8080c72:	2301      	movs	r3, #1
 8080c74:	e7be      	b.n	8080bf4 <loop+0xd0>
        break;
      }
    }
    if (alertValue != 0) resolveAlert();
 8080c76:	4b52      	ldr	r3, [pc, #328]	; (8080dc0 <loop+0x29c>)
 8080c78:	781b      	ldrb	r3, [r3, #0]
 8080c7a:	b10b      	cbz	r3, 8080c80 <loop+0x15c>
 8080c7c:	f7ff fec6 	bl	8080a0c <_Z12resolveAlertv>
    sendEvent();
 8080c80:	f7ff ff10 	bl	8080aa4 <_Z9sendEventv>
 8080c84:	f000 fc36 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    webhookTimeStamp = millis();
 8080c88:	4b4e      	ldr	r3, [pc, #312]	; (8080dc4 <loop+0x2a0>)
 8080c8a:	6018      	str	r0, [r3, #0]
    currentHourlyPeriod = Time.hour();                                // Change the time period since we have reported for this one
 8080c8c:	f001 ff6a 	bl	8082b64 <_ZN9TimeClass4hourEv>
 8080c90:	4b40      	ldr	r3, [pc, #256]	; (8080d94 <loop+0x270>)
 8080c92:	7018      	strb	r0, [r3, #0]
    waitUntil(meterParticlePublish);
 8080c94:	f7ff fe0e 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
    pettingEnabled = true;
 8080c98:	2301      	movs	r3, #1
 8080c9a:	702b      	strb	r3, [r5, #0]
    if (verboseMode) Particle.publish("State","Waiting for Response",PRIVATE);
 8080c9c:	4b4a      	ldr	r3, [pc, #296]	; (8080dc8 <loop+0x2a4>)
 8080c9e:	781b      	ldrb	r3, [r3, #0]
 8080ca0:	b163      	cbz	r3, 8080cbc <loop+0x198>
 8080ca2:	4b4a      	ldr	r3, [pc, #296]	; (8080dcc <loop+0x2a8>)
 8080ca4:	2200      	movs	r2, #0
 8080ca6:	781b      	ldrb	r3, [r3, #0]
 8080ca8:	a802      	add	r0, sp, #8
 8080caa:	f88d 2000 	strb.w	r2, [sp]
 8080cae:	4948      	ldr	r1, [pc, #288]	; (8080dd0 <loop+0x2ac>)
 8080cb0:	4a48      	ldr	r2, [pc, #288]	; (8080dd4 <loop+0x2b0>)
 8080cb2:	f7ff fb1f 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080cb6:	a803      	add	r0, sp, #12
 8080cb8:	f7ff fe34 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cbc:	f000 fc1a 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080cc0:	4b45      	ldr	r3, [pc, #276]	; (8080dd8 <loop+0x2b4>)
 8080cc2:	6018      	str	r0, [r3, #0]
    state = RESP_WAIT_STATE;                                          // Wait for Response
 8080cc4:	2306      	movs	r3, #6
 8080cc6:	e795      	b.n	8080bf4 <loop+0xd0>
    } break;

  case RESP_WAIT_STATE:
    if (!dataInFlight)                                                // Response received
 8080cc8:	4b44      	ldr	r3, [pc, #272]	; (8080ddc <loop+0x2b8>)
 8080cca:	781d      	ldrb	r5, [r3, #0]
 8080ccc:	b9bd      	cbnz	r5, 8080cfe <loop+0x1da>
    {
      state = IDLE_STATE;
 8080cce:	2302      	movs	r3, #2
 8080cd0:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
 8080cd2:	f7ff fdef 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
      if (verboseMode) Particle.publish("State","Idle",PRIVATE);
 8080cd6:	4b3c      	ldr	r3, [pc, #240]	; (8080dc8 <loop+0x2a4>)
 8080cd8:	781b      	ldrb	r3, [r3, #0]
 8080cda:	b15b      	cbz	r3, 8080cf4 <loop+0x1d0>
 8080cdc:	4b3b      	ldr	r3, [pc, #236]	; (8080dcc <loop+0x2a8>)
 8080cde:	4a40      	ldr	r2, [pc, #256]	; (8080de0 <loop+0x2bc>)
 8080ce0:	781b      	ldrb	r3, [r3, #0]
 8080ce2:	f88d 5000 	strb.w	r5, [sp]
 8080ce6:	a802      	add	r0, sp, #8
 8080ce8:	4939      	ldr	r1, [pc, #228]	; (8080dd0 <loop+0x2ac>)
 8080cea:	f7ff fb03 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080cee:	a803      	add	r0, sp, #12
 8080cf0:	f7ff fe18 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cf4:	f000 fbfe 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 8080cf8:	4b37      	ldr	r3, [pc, #220]	; (8080dd8 <loop+0x2b4>)
 8080cfa:	6018      	str	r0, [r3, #0]
 8080cfc:	e041      	b.n	8080d82 <loop+0x25e>
 8080cfe:	f000 fbf9 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp >= webhookWait) {            // If it takes too long - will need to reset
 8080d02:	4b30      	ldr	r3, [pc, #192]	; (8080dc4 <loop+0x2a0>)
 8080d04:	681b      	ldr	r3, [r3, #0]
 8080d06:	1ac0      	subs	r0, r0, r3
 8080d08:	4b36      	ldr	r3, [pc, #216]	; (8080de4 <loop+0x2c0>)
 8080d0a:	681b      	ldr	r3, [r3, #0]
 8080d0c:	4298      	cmp	r0, r3
 8080d0e:	d338      	bcc.n	8080d82 <loop+0x25e>
 8080d10:	f000 fbf0 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080d14:	4b29      	ldr	r3, [pc, #164]	; (8080dbc <loop+0x298>)
 8080d16:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 8080d18:	2301      	movs	r3, #1
 8080d1a:	7023      	strb	r3, [r4, #0]
      waitUntil(meterParticlePublish);
 8080d1c:	f7ff fdca 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
 8080d20:	4b2a      	ldr	r3, [pc, #168]	; (8080dcc <loop+0x2a8>)
      Particle.publish("State","Response Timeout Error",PRIVATE);
 8080d22:	2200      	movs	r2, #0
 8080d24:	781b      	ldrb	r3, [r3, #0]
 8080d26:	f88d 2000 	strb.w	r2, [sp]
 8080d2a:	4a2f      	ldr	r2, [pc, #188]	; (8080de8 <loop+0x2c4>)
 8080d2c:	e7db      	b.n	8080ce6 <loop+0x1c2>
 8080d2e:	f000 fbe1 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
    }
    break;

    case ERROR_STATE:                                          // To be enhanced - where we deal with errors
      if (millis() - resetTimeStamp >= resetWait)
 8080d32:	4b22      	ldr	r3, [pc, #136]	; (8080dbc <loop+0x298>)
 8080d34:	681b      	ldr	r3, [r3, #0]
 8080d36:	1ac0      	subs	r0, r0, r3
 8080d38:	4b2c      	ldr	r3, [pc, #176]	; (8080dec <loop+0x2c8>)
 8080d3a:	681b      	ldr	r3, [r3, #0]
 8080d3c:	4298      	cmp	r0, r3
 8080d3e:	d320      	bcc.n	8080d82 <loop+0x25e>
      {
        if(verboseMode) Particle.publish("State","ERROR_STATE - Resetting",PRIVATE);
 8080d40:	4b21      	ldr	r3, [pc, #132]	; (8080dc8 <loop+0x2a4>)
 8080d42:	781b      	ldrb	r3, [r3, #0]
 8080d44:	b163      	cbz	r3, 8080d60 <loop+0x23c>
 8080d46:	4b21      	ldr	r3, [pc, #132]	; (8080dcc <loop+0x2a8>)
 8080d48:	2200      	movs	r2, #0
 8080d4a:	781b      	ldrb	r3, [r3, #0]
 8080d4c:	a802      	add	r0, sp, #8
 8080d4e:	f88d 2000 	strb.w	r2, [sp]
 8080d52:	491f      	ldr	r1, [pc, #124]	; (8080dd0 <loop+0x2ac>)
 8080d54:	4a26      	ldr	r2, [pc, #152]	; (8080df0 <loop+0x2cc>)
 8080d56:	f7ff facd 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080d5a:	a803      	add	r0, sp, #12
 8080d5c:	f7ff fde2 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080d60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d64:	f000 fe5e 	bl	8081a24 <delay>
        if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8080d68:	4b22      	ldr	r3, [pc, #136]	; (8080df4 <loop+0x2d0>)
 8080d6a:	681b      	ldr	r3, [r3, #0]
 8080d6c:	2b03      	cmp	r3, #3
 8080d6e:	dc02      	bgt.n	8080d76 <loop+0x252>
 8080d70:	f001 fe2a 	bl	80829c8 <_ZN11SystemClass5resetEv>
 8080d74:	e005      	b.n	8080d82 <loop+0x25e>
        else {
          FRAMwrite8(RESETCOUNT,0);                           // If so, store incremented number - watchdog must have done This
 8080d76:	2100      	movs	r1, #0
 8080d78:	2002      	movs	r0, #2
 8080d7a:	f7ff fb19 	bl	80803b0 <_Z10FRAMwrite8jh>
          fullModemReset();                                   // Full Modem reset and reboot
 8080d7e:	f7ff fda5 	bl	80808cc <_Z14fullModemResetv>
        }
      }
      break;
  }
}
 8080d82:	b004      	add	sp, #16
 8080d84:	bd70      	pop	{r4, r5, r6, pc}
 8080d86:	bf00      	nop
 8080d88:	20000118 	.word	0x20000118
 8080d8c:	2000014c 	.word	0x2000014c
 8080d90:	20000010 	.word	0x20000010
 8080d94:	20000130 	.word	0x20000130
 8080d98:	2000011c 	.word	0x2000011c
 8080d9c:	20000110 	.word	0x20000110
 8080da0:	20000120 	.word	0x20000120
 8080da4:	20000014 	.word	0x20000014
 8080da8:	20000140 	.word	0x20000140
 8080dac:	20000150 	.word	0x20000150
 8080db0:	20000111 	.word	0x20000111
 8080db4:	200001c4 	.word	0x200001c4
 8080db8:	20000008 	.word	0x20000008
 8080dbc:	200001b4 	.word	0x200001b4
 8080dc0:	20000128 	.word	0x20000128
 8080dc4:	20000104 	.word	0x20000104
 8080dc8:	20000144 	.word	0x20000144
 8080dcc:	2000010a 	.word	0x2000010a
 8080dd0:	08085001 	.word	0x08085001
 8080dd4:	08084fec 	.word	0x08084fec
 8080dd8:	200001c0 	.word	0x200001c0
 8080ddc:	200001bc 	.word	0x200001bc
 8080de0:	08085007 	.word	0x08085007
 8080de4:	20000018 	.word	0x20000018
 8080de8:	0808500c 	.word	0x0808500c
 8080dec:	20000000 	.word	0x20000000
 8080df0:	08085023 	.word	0x08085023
 8080df4:	20000124 	.word	0x20000124

08080df8 <_Z14UbidotsHandlerPKcS0_>:
  Particle.publish("Monitoring_Event", data, PRIVATE);
  dataInFlight = true; // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                            // First check to see if there is any data
 8080dfa:	460c      	mov	r4, r1
 8080dfc:	b991      	cbnz	r1, 8080e24 <_Z14UbidotsHandlerPKcS0_+0x2c>
    waitUntil(meterParticlePublish);
 8080dfe:	f7ff fd59 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
 8080e02:	4b20      	ldr	r3, [pc, #128]	; (8080e84 <_Z14UbidotsHandlerPKcS0_+0x8c>)
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8080e04:	4a20      	ldr	r2, [pc, #128]	; (8080e88 <_Z14UbidotsHandlerPKcS0_+0x90>)
 8080e06:	781b      	ldrb	r3, [r3, #0]
 8080e08:	4920      	ldr	r1, [pc, #128]	; (8080e8c <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080e0a:	a802      	add	r0, sp, #8
 8080e0c:	f88d 4000 	strb.w	r4, [sp]
 8080e10:	f7ff fa70 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080e14:	a803      	add	r0, sp, #12
 8080e16:	f7ff fd85 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e1a:	f000 fb6b 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080e1e:	4b1c      	ldr	r3, [pc, #112]	; (8080e90 <_Z14UbidotsHandlerPKcS0_+0x98>)
 8080e20:	6018      	str	r0, [r3, #0]
    return;
 8080e22:	e02c      	b.n	8080e7e <_Z14UbidotsHandlerPKcS0_+0x86>
  }
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080e24:	4608      	mov	r0, r1
 8080e26:	f003 fa69 	bl	80842fc <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080e2a:	38c8      	subs	r0, #200	; 0xc8
 8080e2c:	2801      	cmp	r0, #1
 8080e2e:	d819      	bhi.n	8080e64 <_Z14UbidotsHandlerPKcS0_+0x6c>
  {
    waitUntil(meterParticlePublish);
 8080e30:	f7ff fd40 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 8080e34:	4b17      	ldr	r3, [pc, #92]	; (8080e94 <_Z14UbidotsHandlerPKcS0_+0x9c>)
 8080e36:	781b      	ldrb	r3, [r3, #0]
 8080e38:	b163      	cbz	r3, 8080e54 <_Z14UbidotsHandlerPKcS0_+0x5c>
 8080e3a:	4b12      	ldr	r3, [pc, #72]	; (8080e84 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8080e3c:	2200      	movs	r2, #0
 8080e3e:	781b      	ldrb	r3, [r3, #0]
 8080e40:	a802      	add	r0, sp, #8
 8080e42:	f88d 2000 	strb.w	r2, [sp]
 8080e46:	4914      	ldr	r1, [pc, #80]	; (8080e98 <_Z14UbidotsHandlerPKcS0_+0xa0>)
 8080e48:	4a14      	ldr	r2, [pc, #80]	; (8080e9c <_Z14UbidotsHandlerPKcS0_+0xa4>)
 8080e4a:	f7ff fa53 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080e4e:	a803      	add	r0, sp, #12
 8080e50:	f7ff fd68 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e54:	f000 fb4e 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080e58:	4b0d      	ldr	r3, [pc, #52]	; (8080e90 <_Z14UbidotsHandlerPKcS0_+0x98>)
    dataInFlight = false;                                 // Data has been received
 8080e5a:	2200      	movs	r2, #0
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
  {
    waitUntil(meterParticlePublish);
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
    lastPublish = millis();
 8080e5c:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 8080e5e:	4b10      	ldr	r3, [pc, #64]	; (8080ea0 <_Z14UbidotsHandlerPKcS0_+0xa8>)
 8080e60:	701a      	strb	r2, [r3, #0]
 8080e62:	e00c      	b.n	8080e7e <_Z14UbidotsHandlerPKcS0_+0x86>
 8080e64:	4b07      	ldr	r3, [pc, #28]	; (8080e84 <_Z14UbidotsHandlerPKcS0_+0x8c>)
  }
  else Particle.publish("Ubidots Hook", data, PRIVATE);             // Publish the response code
 8080e66:	2200      	movs	r2, #0
 8080e68:	781b      	ldrb	r3, [r3, #0]
 8080e6a:	a802      	add	r0, sp, #8
 8080e6c:	f88d 2000 	strb.w	r2, [sp]
 8080e70:	4906      	ldr	r1, [pc, #24]	; (8080e8c <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080e72:	4622      	mov	r2, r4
 8080e74:	f7ff fa3e 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080e78:	a803      	add	r0, sp, #12
 8080e7a:	f7ff fd53 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8080e7e:	b004      	add	sp, #16
 8080e80:	bd10      	pop	{r4, pc}
 8080e82:	bf00      	nop
 8080e84:	2000010a 	.word	0x2000010a
 8080e88:	0808503b 	.word	0x0808503b
 8080e8c:	08085043 	.word	0x08085043
 8080e90:	200001c0 	.word	0x200001c0
 8080e94:	20000144 	.word	0x20000144
 8080e98:	08085001 	.word	0x08085001
 8080e9c:	08085050 	.word	0x08085050
 8080ea0:	200001bc 	.word	0x200001bc

08080ea4 <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8080ea4:	b530      	push	{r4, r5, lr}
 8080ea6:	4922      	ldr	r1, [pc, #136]	; (8080f30 <_Z14setVerboseMode6String+0x8c>)
 8080ea8:	b085      	sub	sp, #20
 8080eaa:	4605      	mov	r5, r0
 8080eac:	f001 fd5d 	bl	808296a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080eb0:	4604      	mov	r4, r0
 8080eb2:	b1b0      	cbz	r0, 8080ee2 <_Z14setVerboseMode6String+0x3e>
  {
    verboseMode = true;
 8080eb4:	4b1f      	ldr	r3, [pc, #124]	; (8080f34 <_Z14setVerboseMode6String+0x90>)
 8080eb6:	2401      	movs	r4, #1
    FRAMread8(CONTROLREGISTER);
 8080eb8:	2007      	movs	r0, #7

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 8080eba:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080ebc:	f7ff fa72 	bl	80803a4 <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080ec0:	4b1d      	ldr	r3, [pc, #116]	; (8080f38 <_Z14setVerboseMode6String+0x94>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080ec2:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    verboseMode = true;
    FRAMread8(CONTROLREGISTER);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080ec4:	7819      	ldrb	r1, [r3, #0]
 8080ec6:	f041 0108 	orr.w	r1, r1, #8
 8080eca:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080ecc:	f7ff fa70 	bl	80803b0 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
 8080ed0:	f7ff fcf0 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
 8080ed4:	4b19      	ldr	r3, [pc, #100]	; (8080f3c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080ed6:	2200      	movs	r2, #0
 8080ed8:	781b      	ldrb	r3, [r3, #0]
 8080eda:	f88d 2000 	strb.w	r2, [sp]
 8080ede:	4a18      	ldr	r2, [pc, #96]	; (8080f40 <_Z14setVerboseMode6String+0x9c>)
 8080ee0:	e018      	b.n	8080f14 <_Z14setVerboseMode6String+0x70>
 8080ee2:	4918      	ldr	r1, [pc, #96]	; (8080f44 <_Z14setVerboseMode6String+0xa0>)
 8080ee4:	4628      	mov	r0, r5
 8080ee6:	f001 fd40 	bl	808296a <_ZNK6String6equalsEPKc>
    lastPublish = millis();
    return 1;
  }
  else if (command == "0")
 8080eea:	b1f8      	cbz	r0, 8080f2c <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 8080eec:	4b11      	ldr	r3, [pc, #68]	; (8080f34 <_Z14setVerboseMode6String+0x90>)
    FRAMread8(CONTROLREGISTER);
 8080eee:	2007      	movs	r0, #7
    lastPublish = millis();
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080ef0:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080ef2:	f7ff fa57 	bl	80803a4 <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080ef6:	4b10      	ldr	r3, [pc, #64]	; (8080f38 <_Z14setVerboseMode6String+0x94>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080ef8:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    verboseMode = false;
    FRAMread8(CONTROLREGISTER);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080efa:	7819      	ldrb	r1, [r3, #0]
 8080efc:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8080f00:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080f02:	f7ff fa55 	bl	80803b0 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
 8080f06:	f7ff fcd5 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
 8080f0a:	4b0c      	ldr	r3, [pc, #48]	; (8080f3c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080f0c:	4a0e      	ldr	r2, [pc, #56]	; (8080f48 <_Z14setVerboseMode6String+0xa4>)
 8080f0e:	781b      	ldrb	r3, [r3, #0]
 8080f10:	f88d 4000 	strb.w	r4, [sp]
 8080f14:	490d      	ldr	r1, [pc, #52]	; (8080f4c <_Z14setVerboseMode6String+0xa8>)
 8080f16:	a802      	add	r0, sp, #8
 8080f18:	f7ff f9ec 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080f1c:	a803      	add	r0, sp, #12
 8080f1e:	f7ff fd01 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f22:	f000 fae7 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 8080f26:	4b0a      	ldr	r3, [pc, #40]	; (8080f50 <_Z14setVerboseMode6String+0xac>)
 8080f28:	6018      	str	r0, [r3, #0]
    return 1;
 8080f2a:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080f2c:	b005      	add	sp, #20
 8080f2e:	bd30      	pop	{r4, r5, pc}
 8080f30:	0808517d 	.word	0x0808517d
 8080f34:	20000144 	.word	0x20000144
 8080f38:	200001bd 	.word	0x200001bd
 8080f3c:	2000010a 	.word	0x2000010a
 8080f40:	08085062 	.word	0x08085062
 8080f44:	08084ee8 	.word	0x08084ee8
 8080f48:	08085073 	.word	0x08085073
 8080f4c:	08085083 	.word	0x08085083
 8080f50:	200001c0 	.word	0x200001c0

08080f54 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8080f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080f56:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080f58:	220a      	movs	r2, #10
 8080f5a:	a905      	add	r1, sp, #20
 8080f5c:	6800      	ldr	r0, [r0, #0]
 8080f5e:	f003 fc0d 	bl	808477c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080f62:	b2c5      	uxtb	r5, r0
 8080f64:	f105 030c 	add.w	r3, r5, #12
 8080f68:	b2db      	uxtb	r3, r3
 8080f6a:	2b18      	cmp	r3, #24
 8080f6c:	d842      	bhi.n	8080ff4 <_Z11setTimeZone6String+0xa0>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080f6e:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8080f70:	4620      	mov	r0, r4
 8080f72:	f002 ff47 	bl	8083e04 <__aeabi_i2f>
 8080f76:	f001 fd8f 	bl	8082a98 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080f7a:	4629      	mov	r1, r5
 8080f7c:	2004      	movs	r0, #4
 8080f7e:	f7ff fa17 	bl	80803b0 <_Z10FRAMwrite8jh>
  t = Time.now();
 8080f82:	f001 fde8 	bl	8082b56 <_ZN9TimeClass3nowEv>
 8080f86:	4f1d      	ldr	r7, [pc, #116]	; (8080ffc <_Z11setTimeZone6String+0xa8>)
 8080f88:	4e1d      	ldr	r6, [pc, #116]	; (8081000 <_Z11setTimeZone6String+0xac>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080f8a:	4623      	mov	r3, r4
 8080f8c:	4a1d      	ldr	r2, [pc, #116]	; (8081004 <_Z11setTimeZone6String+0xb0>)
 8080f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8080f92:	6038      	str	r0, [r7, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080f94:	2500      	movs	r5, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080f96:	a80c      	add	r0, sp, #48	; 0x30
 8080f98:	f000 fd20 	bl	80819dc <snprintf>
  waitUntil(meterParticlePublish);
 8080f9c:	f7ff fc8a 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080fa0:	7833      	ldrb	r3, [r6, #0]
  Particle.publish("Time",data,PRIVATE);
 8080fa2:	aa0c      	add	r2, sp, #48	; 0x30
 8080fa4:	4918      	ldr	r1, [pc, #96]	; (8081008 <_Z11setTimeZone6String+0xb4>)
 8080fa6:	a808      	add	r0, sp, #32
 8080fa8:	f88d 5000 	strb.w	r5, [sp]
 8080fac:	f7ff f9a2 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080fb0:	a809      	add	r0, sp, #36	; 0x24
 8080fb2:	f7ff fcb7 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fb6:	f000 fa9d 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080fba:	4c14      	ldr	r4, [pc, #80]	; (808100c <_Z11setTimeZone6String+0xb8>)
 8080fbc:	6020      	str	r0, [r4, #0]
  waitUntil(meterParticlePublish);
 8080fbe:	f7ff fc79 	bl	80808b4 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.62>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 8080fc2:	6839      	ldr	r1, [r7, #0]
 8080fc4:	a808      	add	r0, sp, #32
 8080fc6:	f001 fd83 	bl	8082ad0 <_ZN9TimeClass7timeStrEl>
 8080fca:	9b08      	ldr	r3, [sp, #32]
 8080fcc:	490e      	ldr	r1, [pc, #56]	; (8081008 <_Z11setTimeZone6String+0xb4>)
 8080fce:	9303      	str	r3, [sp, #12]
 8080fd0:	9a03      	ldr	r2, [sp, #12]
 8080fd2:	7833      	ldrb	r3, [r6, #0]
 8080fd4:	a806      	add	r0, sp, #24
 8080fd6:	f88d 5000 	strb.w	r5, [sp]
 8080fda:	f7ff f98b 	bl	80802f4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.67.constprop.76>
 8080fde:	a807      	add	r0, sp, #28
 8080fe0:	f7ff fca0 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fe4:	a808      	add	r0, sp, #32
 8080fe6:	f001 fc4c 	bl	8082882 <_ZN6StringD1Ev>
 8080fea:	f000 fa83 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080fee:	6020      	str	r0, [r4, #0]
  return 1;
 8080ff0:	2001      	movs	r0, #1
 8080ff2:	e000      	b.n	8080ff6 <_Z11setTimeZone6String+0xa2>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080ff4:	2000      	movs	r0, #0
  lastPublish = millis();
  waitUntil(meterParticlePublish);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  lastPublish = millis();
  return 1;
}
 8080ff6:	b04d      	add	sp, #308	; 0x134
 8080ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080ffa:	bf00      	nop
 8080ffc:	2000010c 	.word	0x2000010c
 8081000:	2000010a 	.word	0x2000010a
 8081004:	08085088 	.word	0x08085088
 8081008:	0808509c 	.word	0x0808509c
 808100c:	200001c0 	.word	0x200001c0

08081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081010:	2300      	movs	r3, #0
 8081012:	2202      	movs	r2, #2
 8081014:	f000 bc0a 	b.w	808182c <spark_variable>

08081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081018:	4602      	mov	r2, r0
 808101a:	4801      	ldr	r0, [pc, #4]	; (8081020 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 808101c:	f000 be9e 	b.w	8081d5c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081020:	08081d31 	.word	0x08081d31

08081024 <setup>:
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);          // This sets a limit on how long we can pump

void setup()                                                   // Note: Disconnected Setup()
{
 8081024:	b530      	push	{r4, r5, lr}
  pinMode(pumpControlPin,OUTPUT);                               // Turns on the pump
 8081026:	2101      	movs	r1, #1
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);          // This sets a limit on how long we can pump

void setup()                                                   // Note: Disconnected Setup()
{
 8081028:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(pumpControlPin,OUTPUT);                               // Turns on the pump
 808102a:	200e      	movs	r0, #14
 808102c:	f001 ffd4 	bl	8082fd8 <pinMode>
  pinMode(pumpCurrentPin,INPUT);                                // Senses the pump current
 8081030:	2100      	movs	r1, #0
 8081032:	200c      	movs	r0, #12
 8081034:	f001 ffd0 	bl	8082fd8 <pinMode>
  pinMode(controlPowerPin,INPUT);                               // Voltage Sensor Interrupt pin
 8081038:	2100      	movs	r1, #0
 808103a:	2019      	movs	r0, #25
 808103c:	f001 ffcc 	bl	8082fd8 <pinMode>
  pinMode(pumpOnPin,INPUT);                                     // Voltage Sensor Interrupt pin
 8081040:	2100      	movs	r1, #0
 8081042:	201a      	movs	r0, #26
 8081044:	f001 ffc8 	bl	8082fd8 <pinMode>
  pinMode(lowLevelPin,INPUT);                                   // Voltage Sensor Interrupt pin
 8081048:	2100      	movs	r1, #0
 808104a:	201b      	movs	r0, #27
 808104c:	f001 ffc4 	bl	8082fd8 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8081050:	2100      	movs	r1, #0
 8081052:	2011      	movs	r0, #17
 8081054:	f001 ffc0 	bl	8082fd8 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8081058:	2100      	movs	r1, #0
 808105a:	2005      	movs	r0, #5
 808105c:	f001 ffbc 	bl	8082fd8 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8081060:	2101      	movs	r1, #1
 8081062:	2007      	movs	r0, #7
 8081064:	f001 ffb8 	bl	8082fd8 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8081068:	2101      	movs	r1, #1
 808106a:	201d      	movs	r0, #29
 808106c:	f001 ffb4 	bl	8082fd8 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 8081070:	2101      	movs	r1, #1
 8081072:	201d      	movs	r0, #29
 8081074:	f001 ffc1 	bl	8082ffa <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8081078:	2101      	movs	r1, #1
 808107a:	2006      	movs	r0, #6
 808107c:	f001 ffac 	bl	8082fd8 <pinMode>
  watchdogISR();                                                  // Pet the watchdog
 8081080:	f7ff f8fe 	bl	8080280 <_Z11watchdogISRv>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8081084:	2101      	movs	r1, #1
 8081086:	2004      	movs	r0, #4
 8081088:	f001 ffa6 	bl	8082fd8 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 808108c:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 808108e:	2400      	movs	r4, #0
 8081090:	f000 fbfc 	bl	808188c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8081094:	2300      	movs	r3, #0
 8081096:	227d      	movs	r2, #125	; 0x7d
 8081098:	a908      	add	r1, sp, #32
 808109a:	a804      	add	r0, sp, #16
 808109c:	f001 fc77 	bl	808298e <_ZNK6String8getBytesEPhjj>
 80810a0:	4623      	mov	r3, r4
 80810a2:	4622      	mov	r2, r4
 80810a4:	4966      	ldr	r1, [pc, #408]	; (8081240 <setup+0x21c>)
 80810a6:	9401      	str	r4, [sp, #4]
 80810a8:	9400      	str	r4, [sp, #0]
 80810aa:	a808      	add	r0, sp, #32
 80810ac:	f000 fbfe 	bl	80818ac <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("Alerts", alertValueInt);
 80810b0:	4964      	ldr	r1, [pc, #400]	; (8081244 <setup+0x220>)
 80810b2:	4865      	ldr	r0, [pc, #404]	; (8081248 <setup+0x224>)
 80810b4:	f7ff ffac 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80810b8:	4623      	mov	r3, r4
 80810ba:	2204      	movs	r2, #4
 80810bc:	4963      	ldr	r1, [pc, #396]	; (808124c <setup+0x228>)
 80810be:	4864      	ldr	r0, [pc, #400]	; (8081250 <setup+0x22c>)
 80810c0:	f000 fbb4 	bl	808182c <spark_variable>
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", resetCount);
 80810c4:	4963      	ldr	r1, [pc, #396]	; (8081254 <setup+0x230>)
 80810c6:	4864      	ldr	r0, [pc, #400]	; (8081258 <setup+0x234>)
 80810c8:	f7ff ffa2 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("Temperature",temperatureF);
 80810cc:	4963      	ldr	r1, [pc, #396]	; (808125c <setup+0x238>)
 80810ce:	4864      	ldr	r0, [pc, #400]	; (8081260 <setup+0x23c>)
 80810d0:	f7ff ff9e 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
 80810d4:	4963      	ldr	r1, [pc, #396]	; (8081264 <setup+0x240>)
 80810d6:	4623      	mov	r3, r4
 80810d8:	2204      	movs	r2, #4
 80810da:	6809      	ldr	r1, [r1, #0]
 80810dc:	4862      	ldr	r0, [pc, #392]	; (8081268 <setup+0x244>)
 80810de:	f000 fba5 	bl	808182c <spark_variable>
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", stateOfCharge);
 80810e2:	4962      	ldr	r1, [pc, #392]	; (808126c <setup+0x248>)
 80810e4:	4862      	ldr	r0, [pc, #392]	; (8081270 <setup+0x24c>)
 80810e6:	f7ff ff93 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("pumpAmps",pumpAmps);
 80810ea:	4962      	ldr	r1, [pc, #392]	; (8081274 <setup+0x250>)
 80810ec:	4862      	ldr	r0, [pc, #392]	; (8081278 <setup+0x254>)
 80810ee:	f7ff ff8f 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>
  Particle.variable("pumpMinutes",dailyPumpingMins);
 80810f2:	4962      	ldr	r1, [pc, #392]	; (808127c <setup+0x258>)
 80810f4:	4862      	ldr	r0, [pc, #392]	; (8081280 <setup+0x25c>)
 80810f6:	f7ff ff8b 	bl	8081010 <_ZN10CloudClass8variableIA9_cIiEEEbRKT_DpRKT0_>

  Particle.function("Reset-FRAM", resetFRAM);
 80810fa:	4962      	ldr	r1, [pc, #392]	; (8081284 <setup+0x260>)
 80810fc:	4862      	ldr	r0, [pc, #392]	; (8081288 <setup+0x264>)
 80810fe:	f7ff ff8b 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("PumpControl",pumpControl);
 8081102:	4962      	ldr	r1, [pc, #392]	; (808128c <setup+0x268>)
 8081104:	4862      	ldr	r0, [pc, #392]	; (8081290 <setup+0x26c>)
 8081106:	f7ff ff87 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Reset-Counts",resetCounts);
 808110a:	4962      	ldr	r1, [pc, #392]	; (8081294 <setup+0x270>)
 808110c:	4862      	ldr	r0, [pc, #392]	; (8081298 <setup+0x274>)
 808110e:	f7ff ff83 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Hard-Reset",hardResetNow);
 8081112:	4962      	ldr	r1, [pc, #392]	; (808129c <setup+0x278>)
 8081114:	4862      	ldr	r0, [pc, #392]	; (80812a0 <setup+0x27c>)
 8081116:	f7ff ff7f 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Now",sendNow);
 808111a:	4962      	ldr	r1, [pc, #392]	; (80812a4 <setup+0x280>)
 808111c:	4862      	ldr	r0, [pc, #392]	; (80812a8 <setup+0x284>)
 808111e:	f7ff ff7b 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8081122:	4962      	ldr	r1, [pc, #392]	; (80812ac <setup+0x288>)
 8081124:	4862      	ldr	r0, [pc, #392]	; (80812b0 <setup+0x28c>)
 8081126:	f7ff ff77 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 808112a:	4962      	ldr	r1, [pc, #392]	; (80812b4 <setup+0x290>)
 808112c:	4862      	ldr	r0, [pc, #392]	; (80812b8 <setup+0x294>)
 808112e:	f7ff ff73 	bl	8081018 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>

  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 8081132:	2150      	movs	r1, #80	; 0x50
 8081134:	4861      	ldr	r0, [pc, #388]	; (80812bc <setup+0x298>)
 8081136:	f7ff f83f 	bl	80801b8 <_ZN17Adafruit_FRAM_I2C5beginEh>
 808113a:	4d61      	ldr	r5, [pc, #388]	; (80812c0 <setup+0x29c>)
 808113c:	b158      	cbz	r0, 8081156 <setup+0x132>
    resetTimeStamp = millis();
    state = ERROR_STATE;
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 808113e:	4620      	mov	r0, r4
 8081140:	f7ff f930 	bl	80803a4 <_Z9FRAMread8j>
 8081144:	2809      	cmp	r0, #9
 8081146:	d011      	beq.n	808116c <setup+0x148>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 8081148:	f7ff fc02 	bl	8080950 <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 808114c:	4620      	mov	r0, r4
 808114e:	f7ff f929 	bl	80803a4 <_Z9FRAMread8j>
 8081152:	2809      	cmp	r0, #9
 8081154:	d006      	beq.n	8081164 <setup+0x140>
 8081156:	f000 f9cd 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 808115a:	4b5a      	ldr	r3, [pc, #360]	; (80812c4 <setup+0x2a0>)
 808115c:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 808115e:	2301      	movs	r3, #1
 8081160:	702b      	strb	r3, [r5, #0]
 8081162:	e003      	b.n	808116c <setup+0x148>
    }
    else {
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 8081164:	4621      	mov	r1, r4
 8081166:	2007      	movs	r0, #7
 8081168:	f7ff f922 	bl	80803b0 <_Z10FRAMwrite8jh>
    }
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 808116c:	2002      	movs	r0, #2
 808116e:	f7ff f919 	bl	80803a4 <_Z9FRAMread8j>
 8081172:	4c38      	ldr	r4, [pc, #224]	; (8081254 <setup+0x230>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081174:	2200      	movs	r2, #0
 8081176:	6020      	str	r0, [r4, #0]
 8081178:	a828      	add	r0, sp, #160	; 0xa0
 808117a:	f840 2d94 	str.w	r2, [r0, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 808117e:	4611      	mov	r1, r2
 8081180:	f000 f9a8 	bl	80814d4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081184:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8081186:	2b14      	cmp	r3, #20
 8081188:	d106      	bne.n	8081198 <setup+0x174>
  {
    resetCount++;
 808118a:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 808118c:	2002      	movs	r0, #2
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
 808118e:	3101      	adds	r1, #1
 8081190:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8081192:	b2c9      	uxtb	r1, r1
 8081194:	f7ff f90c 	bl	80803b0 <_Z10FRAMwrite8jh>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8081198:	6823      	ldr	r3, [r4, #0]
 808119a:	2b05      	cmp	r3, #5
 808119c:	dd05      	ble.n	80811aa <setup+0x186>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 808119e:	2104      	movs	r1, #4
 80811a0:	2002      	movs	r0, #2
 80811a2:	f7ff f905 	bl	80803b0 <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 80811a6:	f7ff fb91 	bl	80808cc <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
 80811aa:	2004      	movs	r0, #4
 80811ac:	f7ff f8fa 	bl	80803a4 <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 80811b0:	f100 030b 	add.w	r3, r0, #11
 80811b4:	b2db      	uxtb	r3, r3
 80811b6:	2b16      	cmp	r3, #22
 80811b8:	d803      	bhi.n	80811c2 <setup+0x19e>
 80811ba:	b240      	sxtb	r0, r0
 80811bc:	f002 fe22 	bl	8083e04 <__aeabi_i2f>
 80811c0:	e000      	b.n	80811c4 <setup+0x1a0>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 80811c2:	4841      	ldr	r0, [pc, #260]	; (80812c8 <setup+0x2a4>)
 80811c4:	f001 fc68 	bl	8082a98 <_ZN9TimeClass4zoneEf>

  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 80811c8:	2007      	movs	r0, #7
 80811ca:	f7ff f8eb 	bl	80803a4 <_Z9FRAMread8j>
 80811ce:	4c3f      	ldr	r4, [pc, #252]	; (80812cc <setup+0x2a8>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 80811d0:	4b3f      	ldr	r3, [pc, #252]	; (80812d0 <setup+0x2ac>)

  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM

  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 80811d2:	7020      	strb	r0, [r4, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 80811d4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80811d8:	7018      	strb	r0, [r3, #0]
  dailyPumpingMins = FRAMread16(DAILYPUMPMINUTES);                      // Reload so we don't loose track
 80811da:	2014      	movs	r0, #20
 80811dc:	f7ff f8f0 	bl	80803c0 <_Z10FRAMread16j>
 80811e0:	4b26      	ldr	r3, [pc, #152]	; (808127c <setup+0x258>)
 80811e2:	6018      	str	r0, [r3, #0]
  if (controlRegister & 0b00000010) {                                   // This means we reset while pumpting
 80811e4:	7823      	ldrb	r3, [r4, #0]
 80811e6:	079b      	lsls	r3, r3, #30
 80811e8:	d504      	bpl.n	80811f4 <setup+0x1d0>
    pumpingStart = FRAMread32(CURRENTCOUNTSTIME);                       // Reload the pumping start time
 80811ea:	200e      	movs	r0, #14
 80811ec:	f7ff f92c 	bl	8080448 <_Z10FRAMread32m>
 80811f0:	4b38      	ldr	r3, [pc, #224]	; (80812d4 <setup+0x2b0>)
 80811f2:	6018      	str	r0, [r3, #0]
  }

  stateOfCharge = int(batteryMonitor.getSoC());                         // Percentage of full charge
 80811f4:	4838      	ldr	r0, [pc, #224]	; (80812d8 <setup+0x2b4>)
 80811f6:	f001 f8a7 	bl	8082348 <_ZN9FuelGauge6getSoCEv>
 80811fa:	f003 f81d 	bl	8084238 <__aeabi_f2iz>
 80811fe:	4b1b      	ldr	r3, [pc, #108]	; (808126c <setup+0x248>)
 8081200:	6018      	str	r0, [r3, #0]
  if (stateOfCharge > lowBattLimit) connectToParticle();                // If not low battery, we can connect
 8081202:	4b36      	ldr	r3, [pc, #216]	; (80812dc <setup+0x2b8>)
 8081204:	681b      	ldr	r3, [r3, #0]
 8081206:	4298      	cmp	r0, r3
 8081208:	dd01      	ble.n	808120e <setup+0x1ea>
 808120a:	f7ff f9d1 	bl	80805b0 <_Z17connectToParticlev>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond
 808120e:	2300      	movs	r3, #0
 8081210:	2201      	movs	r2, #1
 8081212:	9300      	str	r3, [sp, #0]
 8081214:	4932      	ldr	r1, [pc, #200]	; (80812e0 <setup+0x2bc>)
 8081216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808121a:	2011      	movs	r0, #17
 808121c:	f001 f938 	bl	8082490 <_Z15attachInterrupttPFvvE13InterruptModeah>


  pumpBackupTimer.stop();
 8081220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8081224:	482f      	ldr	r0, [pc, #188]	; (80812e4 <setup+0x2c0>)
 8081226:	f7ff f880 	bl	808032a <_ZN5Timer4stopEj>

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 808122a:	782b      	ldrb	r3, [r5, #0]
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  watchdogISR();                                                  // Pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 808122c:	a804      	add	r0, sp, #16
  attachInterrupt(wakeUpPin, watchdogISR, RISING);   // The watchdog timer will signal us and we have to respond


  pumpBackupTimer.stop();

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 808122e:	2b01      	cmp	r3, #1
 8081230:	bf1e      	ittt	ne
 8081232:	4b23      	ldrne	r3, [pc, #140]	; (80812c0 <setup+0x29c>)
 8081234:	2202      	movne	r2, #2
 8081236:	701a      	strbne	r2, [r3, #0]
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  watchdogISR();                                                  // Pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 8081238:	f001 fb23 	bl	8082882 <_ZN6StringD1Ev>


  pumpBackupTimer.stop();

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}
 808123c:	b029      	add	sp, #164	; 0xa4
 808123e:	bd30      	pop	{r4, r5, pc}
 8081240:	08080df9 	.word	0x08080df9
 8081244:	20000134 	.word	0x20000134
 8081248:	08084f7e 	.word	0x08084f7e
 808124c:	2000016c 	.word	0x2000016c
 8081250:	080850a1 	.word	0x080850a1
 8081254:	20000124 	.word	0x20000124
 8081258:	080850a8 	.word	0x080850a8
 808125c:	2000012c 	.word	0x2000012c
 8081260:	080850b3 	.word	0x080850b3
 8081264:	20000004 	.word	0x20000004
 8081268:	080850bf 	.word	0x080850bf
 808126c:	20000120 	.word	0x20000120
 8081270:	080850c7 	.word	0x080850c7
 8081274:	20000114 	.word	0x20000114
 8081278:	080850d2 	.word	0x080850d2
 808127c:	2000011c 	.word	0x2000011c
 8081280:	080850db 	.word	0x080850db
 8081284:	080809f5 	.word	0x080809f5
 8081288:	080850e7 	.word	0x080850e7
 808128c:	080802a5 	.word	0x080802a5
 8081290:	080850f2 	.word	0x080850f2
 8081294:	0808040d 	.word	0x0808040d
 8081298:	080850fe 	.word	0x080850fe
 808129c:	080802d9 	.word	0x080802d9
 80812a0:	0808510b 	.word	0x0808510b
 80812a4:	0808021d 	.word	0x0808021d
 80812a8:	08085116 	.word	0x08085116
 80812ac:	08080ea5 	.word	0x08080ea5
 80812b0:	0808511f 	.word	0x0808511f
 80812b4:	08080f55 	.word	0x08080f55
 80812b8:	0808512c 	.word	0x0808512c
 80812bc:	20000108 	.word	0x20000108
 80812c0:	20000118 	.word	0x20000118
 80812c4:	200001b4 	.word	0x200001b4
 80812c8:	c0a00000 	.word	0xc0a00000
 80812cc:	200001bd 	.word	0x200001bd
 80812d0:	20000144 	.word	0x20000144
 80812d4:	20000148 	.word	0x20000148
 80812d8:	200001ac 	.word	0x200001ac
 80812dc:	20000014 	.word	0x20000014
 80812e0:	08080281 	.word	0x08080281
 80812e4:	20000150 	.word	0x20000150

080812e8 <_GLOBAL__sub_I_fram>:
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 80812e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80812ec:	4b33      	ldr	r3, [pc, #204]	; (80813bc <_GLOBAL__sub_I_fram+0xd4>)
 80812ee:	2500      	movs	r5, #0
 80812f0:	601d      	str	r5, [r3, #0]
 80812f2:	4b33      	ldr	r3, [pc, #204]	; (80813c0 <_GLOBAL__sub_I_fram+0xd8>)
 80812f4:	b088      	sub	sp, #32
 80812f6:	2701      	movs	r7, #1
 80812f8:	701f      	strb	r7, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80812fa:	f000 f91b 	bl	8081534 <HAL_Pin_Map>
 80812fe:	4b31      	ldr	r3, [pc, #196]	; (80813c4 <_GLOBAL__sub_I_fram+0xdc>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 8081300:	4c31      	ldr	r4, [pc, #196]	; (80813c8 <_GLOBAL__sub_I_fram+0xe0>)
 8081302:	6018      	str	r0, [r3, #0]
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8081304:	4831      	ldr	r0, [pc, #196]	; (80813cc <_GLOBAL__sub_I_fram+0xe4>)
 8081306:	f7fe feda 	bl	80800be <_ZN17Adafruit_FRAM_I2CC1Ev>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808130a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808130e:	4b30      	ldr	r3, [pc, #192]	; (80813d0 <_GLOBAL__sub_I_fram+0xe8>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081310:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081312:	701d      	strb	r5, [r3, #0]
 8081314:	805d      	strh	r5, [r3, #2]
 8081316:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081318:	f000 fa3c 	bl	8081794 <set_system_mode>
#include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
#include "electrondoc.h"                                 // Documents pinout

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808131c:	4629      	mov	r1, r5
 808131e:	4638      	mov	r0, r7
 8081320:	f000 fa50 	bl	80817c4 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081324:	4639      	mov	r1, r7
 8081326:	2004      	movs	r0, #4
 8081328:	f000 f8c4 	bl	80814b4 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808132c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8081400 <_GLOBAL__sub_I_fram+0x118>
 8081330:	4629      	mov	r1, r5
 8081332:	4620      	mov	r0, r4
 8081334:	f000 ffc8 	bl	80822c8 <_ZN9FuelGaugeC1Eb>
 8081338:	4620      	mov	r0, r4
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 808133a:	4c26      	ldr	r4, [pc, #152]	; (80813d4 <_GLOBAL__sub_I_fram+0xec>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;       // Prototype for the fuel gauge (included in Particle core library)
 808133c:	4642      	mov	r2, r8
 808133e:	4926      	ldr	r1, [pc, #152]	; (80813d8 <_GLOBAL__sub_I_fram+0xf0>)
 8081340:	f001 ff12 	bl	8083168 <__aeabi_atexit>
PMIC power;                      //Initalize the PMIC class so you can call the Power Management functions below.
 8081344:	4629      	mov	r1, r5
 8081346:	4620      	mov	r0, r4
 8081348:	f001 f98d 	bl	8082666 <_ZN4PMICC1Eb>
 808134c:	4642      	mov	r2, r8
 808134e:	4923      	ldr	r1, [pc, #140]	; (80813dc <_GLOBAL__sub_I_fram+0xf4>)
 8081350:	4620      	mov	r0, r4
 8081352:	f001 ff09 	bl	8083168 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081356:	4b22      	ldr	r3, [pc, #136]	; (80813e0 <_GLOBAL__sub_I_fram+0xf8>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081358:	aa02      	add	r2, sp, #8
 808135a:	9304      	str	r3, [sp, #16]
 808135c:	ae04      	add	r6, sp, #16
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 808135e:	4c21      	ldr	r4, [pc, #132]	; (80813e4 <_GLOBAL__sub_I_fram+0xfc>)
 8081360:	e896 0003 	ldmia.w	r6, {r0, r1}
 8081364:	4b20      	ldr	r3, [pc, #128]	; (80813e8 <_GLOBAL__sub_I_fram+0x100>)
 8081366:	e882 0003 	stmia.w	r2, {r0, r1}
 808136a:	6023      	str	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 808136c:	f104 030c 	add.w	r3, r4, #12
 8081370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081374:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081378:	e892 0003 	ldmia.w	r2, {r0, r1}
 808137c:	e883 0003 	stmia.w	r3, {r0, r1}
 8081380:	4b1a      	ldr	r3, [pc, #104]	; (80813ec <_GLOBAL__sub_I_fram+0x104>)
 8081382:	7125      	strb	r5, [r4, #4]
 8081384:	6163      	str	r3, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081386:	69a3      	ldr	r3, [r4, #24]
 8081388:	60a5      	str	r5, [r4, #8]
 808138a:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 808138c:	4b18      	ldr	r3, [pc, #96]	; (80813f0 <_GLOBAL__sub_I_fram+0x108>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808138e:	4a19      	ldr	r2, [pc, #100]	; (80813f4 <_GLOBAL__sub_I_fram+0x10c>)
 8081390:	61a3      	str	r3, [r4, #24]
 8081392:	4919      	ldr	r1, [pc, #100]	; (80813f8 <_GLOBAL__sub_I_fram+0x110>)
 8081394:	4623      	mov	r3, r4
 8081396:	9501      	str	r5, [sp, #4]
 8081398:	9700      	str	r7, [sp, #0]
 808139a:	f104 0008 	add.w	r0, r4, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808139e:	9506      	str	r5, [sp, #24]
 80813a0:	f000 f858 	bl	8081454 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80813a4:	4630      	mov	r0, r6
 80813a6:	f7fe ffb7 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
int pumpCurrentRaw = 0;
time_t pumpingStart = 0;
int dailyPumpingMins = 0;
bool pumpingEnabled = false;

Timer pumpBackupTimer(3600000, pumpTimerCallback, true);          // This sets a limit on how long we can pump
 80813aa:	4642      	mov	r2, r8
 80813ac:	4913      	ldr	r1, [pc, #76]	; (80813fc <_GLOBAL__sub_I_fram+0x114>)
 80813ae:	4620      	mov	r0, r4
 80813b0:	f001 feda 	bl	8083168 <__aeabi_atexit>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 80813b4:	b008      	add	sp, #32
 80813b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80813ba:	bf00      	nop
 80813bc:	200001c4 	.word	0x200001c4
 80813c0:	2000010a 	.word	0x2000010a
 80813c4:	20000140 	.word	0x20000140
 80813c8:	200001ac 	.word	0x200001ac
 80813cc:	20000108 	.word	0x20000108
 80813d0:	20000138 	.word	0x20000138
 80813d4:	20000100 	.word	0x20000100
 80813d8:	080822e7 	.word	0x080822e7
 80813dc:	08082685 	.word	0x08082685
 80813e0:	080801f5 	.word	0x080801f5
 80813e4:	20000150 	.word	0x20000150
 80813e8:	08084edc 	.word	0x08084edc
 80813ec:	08080205 	.word	0x08080205
 80813f0:	08080201 	.word	0x08080201
 80813f4:	08080245 	.word	0x08080245
 80813f8:	0036ee80 	.word	0x0036ee80
 80813fc:	0808034d 	.word	0x0808034d
 8081400:	200000fc 	.word	0x200000fc

08081404 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081404:	b508      	push	{r3, lr}
 8081406:	4b02      	ldr	r3, [pc, #8]	; (8081410 <inet_gethostbyname+0xc>)
 8081408:	681b      	ldr	r3, [r3, #0]
 808140a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808140c:	9301      	str	r3, [sp, #4]
 808140e:	bd08      	pop	{r3, pc}
 8081410:	08060020 	.word	0x08060020

08081414 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081414:	b508      	push	{r3, lr}
 8081416:	4b02      	ldr	r3, [pc, #8]	; (8081420 <cellular_signal+0xc>)
 8081418:	681b      	ldr	r3, [r3, #0]
 808141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808141c:	9301      	str	r3, [sp, #4]
 808141e:	bd08      	pop	{r3, pc}
 8081420:	08060020 	.word	0x08060020

08081424 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081424:	b508      	push	{r3, lr}
 8081426:	4b02      	ldr	r3, [pc, #8]	; (8081430 <cellular_command+0xc>)
 8081428:	681b      	ldr	r3, [r3, #0]
 808142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808142c:	9301      	str	r3, [sp, #4]
 808142e:	bd08      	pop	{r3, pc}
 8081430:	08060020 	.word	0x08060020

08081434 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081434:	b508      	push	{r3, lr}
 8081436:	4b02      	ldr	r3, [pc, #8]	; (8081440 <os_thread_yield+0xc>)
 8081438:	681b      	ldr	r3, [r3, #0]
 808143a:	68db      	ldr	r3, [r3, #12]
 808143c:	9301      	str	r3, [sp, #4]
 808143e:	bd08      	pop	{r3, pc}
 8081440:	080401d0 	.word	0x080401d0

08081444 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8081444:	b508      	push	{r3, lr}
 8081446:	4b02      	ldr	r3, [pc, #8]	; (8081450 <os_thread_scheduling+0xc>)
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	69db      	ldr	r3, [r3, #28]
 808144c:	9301      	str	r3, [sp, #4]
 808144e:	bd08      	pop	{r3, pc}
 8081450:	080401d0 	.word	0x080401d0

08081454 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8081454:	b508      	push	{r3, lr}
 8081456:	4b02      	ldr	r3, [pc, #8]	; (8081460 <os_timer_create+0xc>)
 8081458:	681b      	ldr	r3, [r3, #0]
 808145a:	6a1b      	ldr	r3, [r3, #32]
 808145c:	9301      	str	r3, [sp, #4]
 808145e:	bd08      	pop	{r3, pc}
 8081460:	080401d0 	.word	0x080401d0

08081464 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8081464:	b508      	push	{r3, lr}
 8081466:	4b02      	ldr	r3, [pc, #8]	; (8081470 <os_timer_destroy+0xc>)
 8081468:	681b      	ldr	r3, [r3, #0]
 808146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808146c:	9301      	str	r3, [sp, #4]
 808146e:	bd08      	pop	{r3, pc}
 8081470:	080401d0 	.word	0x080401d0

08081474 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8081474:	b508      	push	{r3, lr}
 8081476:	4b02      	ldr	r3, [pc, #8]	; (8081480 <os_timer_get_id+0xc>)
 8081478:	681b      	ldr	r3, [r3, #0]
 808147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808147c:	9301      	str	r3, [sp, #4]
 808147e:	bd08      	pop	{r3, pc}
 8081480:	080401d0 	.word	0x080401d0

08081484 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8081484:	b508      	push	{r3, lr}
 8081486:	4b02      	ldr	r3, [pc, #8]	; (8081490 <os_timer_change+0xc>)
 8081488:	681b      	ldr	r3, [r3, #0]
 808148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808148c:	9301      	str	r3, [sp, #4]
 808148e:	bd08      	pop	{r3, pc}
 8081490:	080401d0 	.word	0x080401d0

08081494 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081494:	b508      	push	{r3, lr}
 8081496:	4b02      	ldr	r3, [pc, #8]	; (80814a0 <os_mutex_create+0xc>)
 8081498:	681b      	ldr	r3, [r3, #0]
 808149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808149c:	9301      	str	r3, [sp, #4]
 808149e:	bd08      	pop	{r3, pc}
 80814a0:	080401d0 	.word	0x080401d0

080814a4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80814a4:	b508      	push	{r3, lr}
 80814a6:	4b02      	ldr	r3, [pc, #8]	; (80814b0 <os_timer_set_id+0xc>)
 80814a8:	681b      	ldr	r3, [r3, #0]
 80814aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80814ac:	9301      	str	r3, [sp, #4]
 80814ae:	bd08      	pop	{r3, pc}
 80814b0:	080401d0 	.word	0x080401d0

080814b4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80814b4:	b508      	push	{r3, lr}
 80814b6:	4b02      	ldr	r3, [pc, #8]	; (80814c0 <HAL_Feature_Set+0xc>)
 80814b8:	681b      	ldr	r3, [r3, #0]
 80814ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80814bc:	9301      	str	r3, [sp, #4]
 80814be:	bd08      	pop	{r3, pc}
 80814c0:	080401b8 	.word	0x080401b8

080814c4 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80814c4:	b508      	push	{r3, lr}
 80814c6:	4b02      	ldr	r3, [pc, #8]	; (80814d0 <HAL_Core_System_Reset_Ex+0xc>)
 80814c8:	681b      	ldr	r3, [r3, #0]
 80814ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80814cc:	9301      	str	r3, [sp, #4]
 80814ce:	bd08      	pop	{r3, pc}
 80814d0:	080401b8 	.word	0x080401b8

080814d4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80814d4:	b508      	push	{r3, lr}
 80814d6:	4b02      	ldr	r3, [pc, #8]	; (80814e0 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80814d8:	681b      	ldr	r3, [r3, #0]
 80814da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80814dc:	9301      	str	r3, [sp, #4]
 80814de:	bd08      	pop	{r3, pc}
 80814e0:	080401b8 	.word	0x080401b8

080814e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80814e4:	b508      	push	{r3, lr}
 80814e6:	4b02      	ldr	r3, [pc, #8]	; (80814f0 <HAL_RNG_GetRandomNumber+0xc>)
 80814e8:	681b      	ldr	r3, [r3, #0]
 80814ea:	685b      	ldr	r3, [r3, #4]
 80814ec:	9301      	str	r3, [sp, #4]
 80814ee:	bd08      	pop	{r3, pc}
 80814f0:	0804019c 	.word	0x0804019c

080814f4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80814f4:	b508      	push	{r3, lr}
 80814f6:	4b02      	ldr	r3, [pc, #8]	; (8081500 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80814f8:	681b      	ldr	r3, [r3, #0]
 80814fa:	695b      	ldr	r3, [r3, #20]
 80814fc:	9301      	str	r3, [sp, #4]
 80814fe:	bd08      	pop	{r3, pc}
 8081500:	0804019c 	.word	0x0804019c

08081504 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081504:	b508      	push	{r3, lr}
 8081506:	4b02      	ldr	r3, [pc, #8]	; (8081510 <HAL_RTC_Get_UnixTime+0xc>)
 8081508:	681b      	ldr	r3, [r3, #0]
 808150a:	69db      	ldr	r3, [r3, #28]
 808150c:	9301      	str	r3, [sp, #4]
 808150e:	bd08      	pop	{r3, pc}
 8081510:	0804019c 	.word	0x0804019c

08081514 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081514:	b508      	push	{r3, lr}
 8081516:	4b02      	ldr	r3, [pc, #8]	; (8081520 <HAL_RTC_Time_Is_Valid+0xc>)
 8081518:	681b      	ldr	r3, [r3, #0]
 808151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808151c:	9301      	str	r3, [sp, #4]
 808151e:	bd08      	pop	{r3, pc}
 8081520:	0804019c 	.word	0x0804019c

08081524 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081524:	b508      	push	{r3, lr}
 8081526:	4b02      	ldr	r3, [pc, #8]	; (8081530 <hal_timer_millis+0xc>)
 8081528:	681b      	ldr	r3, [r3, #0]
 808152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808152c:	9301      	str	r3, [sp, #4]
 808152e:	bd08      	pop	{r3, pc}
 8081530:	0804019c 	.word	0x0804019c

08081534 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081534:	b508      	push	{r3, lr}
 8081536:	4b02      	ldr	r3, [pc, #8]	; (8081540 <HAL_Pin_Map+0xc>)
 8081538:	681b      	ldr	r3, [r3, #0]
 808153a:	681b      	ldr	r3, [r3, #0]
 808153c:	9301      	str	r3, [sp, #4]
 808153e:	bd08      	pop	{r3, pc}
 8081540:	080401b0 	.word	0x080401b0

08081544 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081544:	b508      	push	{r3, lr}
 8081546:	4b02      	ldr	r3, [pc, #8]	; (8081550 <HAL_Validate_Pin_Function+0xc>)
 8081548:	681b      	ldr	r3, [r3, #0]
 808154a:	685b      	ldr	r3, [r3, #4]
 808154c:	9301      	str	r3, [sp, #4]
 808154e:	bd08      	pop	{r3, pc}
 8081550:	080401b0 	.word	0x080401b0

08081554 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081554:	b508      	push	{r3, lr}
 8081556:	4b02      	ldr	r3, [pc, #8]	; (8081560 <HAL_Pin_Mode+0xc>)
 8081558:	681b      	ldr	r3, [r3, #0]
 808155a:	689b      	ldr	r3, [r3, #8]
 808155c:	9301      	str	r3, [sp, #4]
 808155e:	bd08      	pop	{r3, pc}
 8081560:	080401b0 	.word	0x080401b0

08081564 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081564:	b508      	push	{r3, lr}
 8081566:	4b02      	ldr	r3, [pc, #8]	; (8081570 <HAL_Get_Pin_Mode+0xc>)
 8081568:	681b      	ldr	r3, [r3, #0]
 808156a:	68db      	ldr	r3, [r3, #12]
 808156c:	9301      	str	r3, [sp, #4]
 808156e:	bd08      	pop	{r3, pc}
 8081570:	080401b0 	.word	0x080401b0

08081574 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081574:	b508      	push	{r3, lr}
 8081576:	4b02      	ldr	r3, [pc, #8]	; (8081580 <HAL_GPIO_Write+0xc>)
 8081578:	681b      	ldr	r3, [r3, #0]
 808157a:	691b      	ldr	r3, [r3, #16]
 808157c:	9301      	str	r3, [sp, #4]
 808157e:	bd08      	pop	{r3, pc}
 8081580:	080401b0 	.word	0x080401b0

08081584 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081584:	b508      	push	{r3, lr}
 8081586:	4b02      	ldr	r3, [pc, #8]	; (8081590 <HAL_Interrupts_Attach+0xc>)
 8081588:	681b      	ldr	r3, [r3, #0]
 808158a:	699b      	ldr	r3, [r3, #24]
 808158c:	9301      	str	r3, [sp, #4]
 808158e:	bd08      	pop	{r3, pc}
 8081590:	080401b0 	.word	0x080401b0

08081594 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081594:	b508      	push	{r3, lr}
 8081596:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <HAL_Interrupts_Detach+0xc>)
 8081598:	681b      	ldr	r3, [r3, #0]
 808159a:	69db      	ldr	r3, [r3, #28]
 808159c:	9301      	str	r3, [sp, #4]
 808159e:	bd08      	pop	{r3, pc}
 80815a0:	080401b0 	.word	0x080401b0

080815a4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80815a4:	b508      	push	{r3, lr}
 80815a6:	4b02      	ldr	r3, [pc, #8]	; (80815b0 <HAL_ADC_Read+0xc>)
 80815a8:	681b      	ldr	r3, [r3, #0]
 80815aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815ac:	9301      	str	r3, [sp, #4]
 80815ae:	bd08      	pop	{r3, pc}
 80815b0:	080401b0 	.word	0x080401b0

080815b4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80815b4:	b508      	push	{r3, lr}
 80815b6:	4b02      	ldr	r3, [pc, #8]	; (80815c0 <HAL_I2C_Begin+0xc>)
 80815b8:	681b      	ldr	r3, [r3, #0]
 80815ba:	68db      	ldr	r3, [r3, #12]
 80815bc:	9301      	str	r3, [sp, #4]
 80815be:	bd08      	pop	{r3, pc}
 80815c0:	080401ac 	.word	0x080401ac

080815c4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80815c4:	b508      	push	{r3, lr}
 80815c6:	4b02      	ldr	r3, [pc, #8]	; (80815d0 <HAL_I2C_Request_Data+0xc>)
 80815c8:	681b      	ldr	r3, [r3, #0]
 80815ca:	695b      	ldr	r3, [r3, #20]
 80815cc:	9301      	str	r3, [sp, #4]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	080401ac 	.word	0x080401ac

080815d4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80815d4:	b508      	push	{r3, lr}
 80815d6:	4b02      	ldr	r3, [pc, #8]	; (80815e0 <HAL_I2C_Begin_Transmission+0xc>)
 80815d8:	681b      	ldr	r3, [r3, #0]
 80815da:	699b      	ldr	r3, [r3, #24]
 80815dc:	9301      	str	r3, [sp, #4]
 80815de:	bd08      	pop	{r3, pc}
 80815e0:	080401ac 	.word	0x080401ac

080815e4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80815e4:	b508      	push	{r3, lr}
 80815e6:	4b02      	ldr	r3, [pc, #8]	; (80815f0 <HAL_I2C_End_Transmission+0xc>)
 80815e8:	681b      	ldr	r3, [r3, #0]
 80815ea:	69db      	ldr	r3, [r3, #28]
 80815ec:	9301      	str	r3, [sp, #4]
 80815ee:	bd08      	pop	{r3, pc}
 80815f0:	080401ac 	.word	0x080401ac

080815f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80815f4:	b508      	push	{r3, lr}
 80815f6:	4b02      	ldr	r3, [pc, #8]	; (8081600 <HAL_I2C_Write_Data+0xc>)
 80815f8:	681b      	ldr	r3, [r3, #0]
 80815fa:	6a1b      	ldr	r3, [r3, #32]
 80815fc:	9301      	str	r3, [sp, #4]
 80815fe:	bd08      	pop	{r3, pc}
 8081600:	080401ac 	.word	0x080401ac

08081604 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081604:	b508      	push	{r3, lr}
 8081606:	4b02      	ldr	r3, [pc, #8]	; (8081610 <HAL_I2C_Available_Data+0xc>)
 8081608:	681b      	ldr	r3, [r3, #0]
 808160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808160c:	9301      	str	r3, [sp, #4]
 808160e:	bd08      	pop	{r3, pc}
 8081610:	080401ac 	.word	0x080401ac

08081614 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081614:	b508      	push	{r3, lr}
 8081616:	4b02      	ldr	r3, [pc, #8]	; (8081620 <HAL_I2C_Read_Data+0xc>)
 8081618:	681b      	ldr	r3, [r3, #0]
 808161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808161c:	9301      	str	r3, [sp, #4]
 808161e:	bd08      	pop	{r3, pc}
 8081620:	080401ac 	.word	0x080401ac

08081624 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081624:	b508      	push	{r3, lr}
 8081626:	4b02      	ldr	r3, [pc, #8]	; (8081630 <HAL_I2C_Peek_Data+0xc>)
 8081628:	681b      	ldr	r3, [r3, #0]
 808162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808162c:	9301      	str	r3, [sp, #4]
 808162e:	bd08      	pop	{r3, pc}
 8081630:	080401ac 	.word	0x080401ac

08081634 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081634:	b508      	push	{r3, lr}
 8081636:	4b02      	ldr	r3, [pc, #8]	; (8081640 <HAL_I2C_Flush_Data+0xc>)
 8081638:	681b      	ldr	r3, [r3, #0]
 808163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808163c:	9301      	str	r3, [sp, #4]
 808163e:	bd08      	pop	{r3, pc}
 8081640:	080401ac 	.word	0x080401ac

08081644 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081644:	b508      	push	{r3, lr}
 8081646:	4b02      	ldr	r3, [pc, #8]	; (8081650 <HAL_I2C_Is_Enabled+0xc>)
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808164c:	9301      	str	r3, [sp, #4]
 808164e:	bd08      	pop	{r3, pc}
 8081650:	080401ac 	.word	0x080401ac

08081654 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081654:	b508      	push	{r3, lr}
 8081656:	4b02      	ldr	r3, [pc, #8]	; (8081660 <HAL_I2C_Init+0xc>)
 8081658:	681b      	ldr	r3, [r3, #0]
 808165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808165c:	9301      	str	r3, [sp, #4]
 808165e:	bd08      	pop	{r3, pc}
 8081660:	080401ac 	.word	0x080401ac

08081664 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081664:	b508      	push	{r3, lr}
 8081666:	4b02      	ldr	r3, [pc, #8]	; (8081670 <HAL_I2C_Acquire+0xc>)
 8081668:	681b      	ldr	r3, [r3, #0]
 808166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808166c:	9301      	str	r3, [sp, #4]
 808166e:	bd08      	pop	{r3, pc}
 8081670:	080401ac 	.word	0x080401ac

08081674 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081674:	b508      	push	{r3, lr}
 8081676:	4b02      	ldr	r3, [pc, #8]	; (8081680 <HAL_I2C_Release+0xc>)
 8081678:	681b      	ldr	r3, [r3, #0]
 808167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808167c:	9301      	str	r3, [sp, #4]
 808167e:	bd08      	pop	{r3, pc}
 8081680:	080401ac 	.word	0x080401ac

08081684 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081684:	b508      	push	{r3, lr}
 8081686:	4b02      	ldr	r3, [pc, #8]	; (8081690 <HAL_SPI_Init+0xc>)
 8081688:	681b      	ldr	r3, [r3, #0]
 808168a:	69db      	ldr	r3, [r3, #28]
 808168c:	9301      	str	r3, [sp, #4]
 808168e:	bd08      	pop	{r3, pc}
 8081690:	080401b4 	.word	0x080401b4

08081694 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081694:	b508      	push	{r3, lr}
 8081696:	4b02      	ldr	r3, [pc, #8]	; (80816a0 <HAL_SPI_Is_Enabled+0xc>)
 8081698:	681b      	ldr	r3, [r3, #0]
 808169a:	6a1b      	ldr	r3, [r3, #32]
 808169c:	9301      	str	r3, [sp, #4]
 808169e:	bd08      	pop	{r3, pc}
 80816a0:	080401b4 	.word	0x080401b4

080816a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80816a4:	b508      	push	{r3, lr}
 80816a6:	4b02      	ldr	r3, [pc, #8]	; (80816b0 <HAL_USART_Init+0xc>)
 80816a8:	681b      	ldr	r3, [r3, #0]
 80816aa:	699b      	ldr	r3, [r3, #24]
 80816ac:	9301      	str	r3, [sp, #4]
 80816ae:	bd08      	pop	{r3, pc}
 80816b0:	080401c4 	.word	0x080401c4

080816b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80816b4:	b508      	push	{r3, lr}
 80816b6:	4b02      	ldr	r3, [pc, #8]	; (80816c0 <HAL_USART_Write_Data+0xc>)
 80816b8:	681b      	ldr	r3, [r3, #0]
 80816ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80816bc:	9301      	str	r3, [sp, #4]
 80816be:	bd08      	pop	{r3, pc}
 80816c0:	080401c4 	.word	0x080401c4

080816c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80816c4:	b508      	push	{r3, lr}
 80816c6:	4b02      	ldr	r3, [pc, #8]	; (80816d0 <HAL_USART_Available_Data+0xc>)
 80816c8:	681b      	ldr	r3, [r3, #0]
 80816ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80816cc:	9301      	str	r3, [sp, #4]
 80816ce:	bd08      	pop	{r3, pc}
 80816d0:	080401c4 	.word	0x080401c4

080816d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80816d4:	b508      	push	{r3, lr}
 80816d6:	4b02      	ldr	r3, [pc, #8]	; (80816e0 <HAL_USART_Read_Data+0xc>)
 80816d8:	681b      	ldr	r3, [r3, #0]
 80816da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816dc:	9301      	str	r3, [sp, #4]
 80816de:	bd08      	pop	{r3, pc}
 80816e0:	080401c4 	.word	0x080401c4

080816e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80816e4:	b508      	push	{r3, lr}
 80816e6:	4b02      	ldr	r3, [pc, #8]	; (80816f0 <HAL_USART_Peek_Data+0xc>)
 80816e8:	681b      	ldr	r3, [r3, #0]
 80816ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816ec:	9301      	str	r3, [sp, #4]
 80816ee:	bd08      	pop	{r3, pc}
 80816f0:	080401c4 	.word	0x080401c4

080816f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <HAL_USART_Flush_Data+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	080401c4 	.word	0x080401c4

08081704 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <HAL_USART_Is_Enabled+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	080401c4 	.word	0x080401c4

08081714 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <HAL_USART_Available_Data_For_Write+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	080401c4 	.word	0x080401c4

08081724 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <HAL_USB_USART_Init+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	681b      	ldr	r3, [r3, #0]
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	0806001c 	.word	0x0806001c

08081734 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <HAL_USB_USART_Available_Data+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	691b      	ldr	r3, [r3, #16]
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	0806001c 	.word	0x0806001c

08081744 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	695b      	ldr	r3, [r3, #20]
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	0806001c 	.word	0x0806001c

08081754 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <HAL_USB_USART_Receive_Data+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	699b      	ldr	r3, [r3, #24]
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	0806001c 	.word	0x0806001c

08081764 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <HAL_USB_USART_Send_Data+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	69db      	ldr	r3, [r3, #28]
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	0806001c 	.word	0x0806001c

08081774 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <HAL_USB_USART_Flush_Data+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	6a1b      	ldr	r3, [r3, #32]
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	0806001c 	.word	0x0806001c

08081784 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <system_mode+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	681b      	ldr	r3, [r3, #0]
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	080401a4 	.word	0x080401a4

08081794 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <set_system_mode+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	685b      	ldr	r3, [r3, #4]
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	080401a4 	.word	0x080401a4

080817a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <system_delay_ms+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	695b      	ldr	r3, [r3, #20]
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	080401a4 	.word	0x080401a4

080817b4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b02      	ldr	r3, [pc, #8]	; (80817c0 <system_sleep+0xc>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	699b      	ldr	r3, [r3, #24]
 80817bc:	9301      	str	r3, [sp, #4]
 80817be:	bd08      	pop	{r3, pc}
 80817c0:	080401a4 	.word	0x080401a4

080817c4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80817c4:	b508      	push	{r3, lr}
 80817c6:	4b02      	ldr	r3, [pc, #8]	; (80817d0 <system_thread_set_state+0xc>)
 80817c8:	681b      	ldr	r3, [r3, #0]
 80817ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80817cc:	9301      	str	r3, [sp, #4]
 80817ce:	bd08      	pop	{r3, pc}
 80817d0:	080401a4 	.word	0x080401a4

080817d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80817d4:	b508      	push	{r3, lr}
 80817d6:	4b02      	ldr	r3, [pc, #8]	; (80817e0 <application_thread_current+0xc>)
 80817d8:	681b      	ldr	r3, [r3, #0]
 80817da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80817dc:	9301      	str	r3, [sp, #4]
 80817de:	bd08      	pop	{r3, pc}
 80817e0:	080401a4 	.word	0x080401a4

080817e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <application_thread_invoke+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	080401a4 	.word	0x080401a4

080817f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <system_thread_get_state+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	080401a4 	.word	0x080401a4

08081804 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b03      	ldr	r3, [pc, #12]	; (8081814 <system_ctrl_set_app_request_handler+0x10>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808180e:	9301      	str	r3, [sp, #4]
 8081810:	bd08      	pop	{r3, pc}
 8081812:	0000      	.short	0x0000
 8081814:	080401a4 	.word	0x080401a4

08081818 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081818:	b508      	push	{r3, lr}
 808181a:	4b03      	ldr	r3, [pc, #12]	; (8081828 <system_ctrl_set_result+0x10>)
 808181c:	681b      	ldr	r3, [r3, #0]
 808181e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081822:	9301      	str	r3, [sp, #4]
 8081824:	bd08      	pop	{r3, pc}
 8081826:	0000      	.short	0x0000
 8081828:	080401a4 	.word	0x080401a4

0808182c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808182c:	b508      	push	{r3, lr}
 808182e:	4b02      	ldr	r3, [pc, #8]	; (8081838 <spark_variable+0xc>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	681b      	ldr	r3, [r3, #0]
 8081834:	9301      	str	r3, [sp, #4]
 8081836:	bd08      	pop	{r3, pc}
 8081838:	080401cc 	.word	0x080401cc

0808183c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808183c:	b508      	push	{r3, lr}
 808183e:	4b02      	ldr	r3, [pc, #8]	; (8081848 <spark_function+0xc>)
 8081840:	681b      	ldr	r3, [r3, #0]
 8081842:	685b      	ldr	r3, [r3, #4]
 8081844:	9301      	str	r3, [sp, #4]
 8081846:	bd08      	pop	{r3, pc}
 8081848:	080401cc 	.word	0x080401cc

0808184c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808184c:	b508      	push	{r3, lr}
 808184e:	4b02      	ldr	r3, [pc, #8]	; (8081858 <spark_process+0xc>)
 8081850:	681b      	ldr	r3, [r3, #0]
 8081852:	689b      	ldr	r3, [r3, #8]
 8081854:	9301      	str	r3, [sp, #4]
 8081856:	bd08      	pop	{r3, pc}
 8081858:	080401cc 	.word	0x080401cc

0808185c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808185c:	b508      	push	{r3, lr}
 808185e:	4b02      	ldr	r3, [pc, #8]	; (8081868 <spark_cloud_flag_connect+0xc>)
 8081860:	681b      	ldr	r3, [r3, #0]
 8081862:	68db      	ldr	r3, [r3, #12]
 8081864:	9301      	str	r3, [sp, #4]
 8081866:	bd08      	pop	{r3, pc}
 8081868:	080401cc 	.word	0x080401cc

0808186c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 808186c:	b508      	push	{r3, lr}
 808186e:	4b02      	ldr	r3, [pc, #8]	; (8081878 <spark_cloud_flag_disconnect+0xc>)
 8081870:	681b      	ldr	r3, [r3, #0]
 8081872:	691b      	ldr	r3, [r3, #16]
 8081874:	9301      	str	r3, [sp, #4]
 8081876:	bd08      	pop	{r3, pc}
 8081878:	080401cc 	.word	0x080401cc

0808187c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808187c:	b508      	push	{r3, lr}
 808187e:	4b02      	ldr	r3, [pc, #8]	; (8081888 <spark_cloud_flag_connected+0xc>)
 8081880:	681b      	ldr	r3, [r3, #0]
 8081882:	695b      	ldr	r3, [r3, #20]
 8081884:	9301      	str	r3, [sp, #4]
 8081886:	bd08      	pop	{r3, pc}
 8081888:	080401cc 	.word	0x080401cc

0808188c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808188c:	b508      	push	{r3, lr}
 808188e:	4b02      	ldr	r3, [pc, #8]	; (8081898 <spark_deviceID+0xc>)
 8081890:	681b      	ldr	r3, [r3, #0]
 8081892:	69db      	ldr	r3, [r3, #28]
 8081894:	9301      	str	r3, [sp, #4]
 8081896:	bd08      	pop	{r3, pc}
 8081898:	080401cc 	.word	0x080401cc

0808189c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808189c:	b508      	push	{r3, lr}
 808189e:	4b02      	ldr	r3, [pc, #8]	; (80818a8 <spark_send_event+0xc>)
 80818a0:	681b      	ldr	r3, [r3, #0]
 80818a2:	6a1b      	ldr	r3, [r3, #32]
 80818a4:	9301      	str	r3, [sp, #4]
 80818a6:	bd08      	pop	{r3, pc}
 80818a8:	080401cc 	.word	0x080401cc

080818ac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80818ac:	b508      	push	{r3, lr}
 80818ae:	4b02      	ldr	r3, [pc, #8]	; (80818b8 <spark_subscribe+0xc>)
 80818b0:	681b      	ldr	r3, [r3, #0]
 80818b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818b4:	9301      	str	r3, [sp, #4]
 80818b6:	bd08      	pop	{r3, pc}
 80818b8:	080401cc 	.word	0x080401cc

080818bc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80818bc:	b508      	push	{r3, lr}
 80818be:	4b02      	ldr	r3, [pc, #8]	; (80818c8 <spark_sync_time+0xc>)
 80818c0:	681b      	ldr	r3, [r3, #0]
 80818c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80818c4:	9301      	str	r3, [sp, #4]
 80818c6:	bd08      	pop	{r3, pc}
 80818c8:	080401cc 	.word	0x080401cc

080818cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80818cc:	b508      	push	{r3, lr}
 80818ce:	4b02      	ldr	r3, [pc, #8]	; (80818d8 <spark_sync_time_pending+0xc>)
 80818d0:	681b      	ldr	r3, [r3, #0]
 80818d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80818d4:	9301      	str	r3, [sp, #4]
 80818d6:	bd08      	pop	{r3, pc}
 80818d8:	080401cc 	.word	0x080401cc

080818dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80818dc:	b508      	push	{r3, lr}
 80818de:	4b02      	ldr	r3, [pc, #8]	; (80818e8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80818e0:	681b      	ldr	r3, [r3, #0]
 80818e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80818e4:	9301      	str	r3, [sp, #4]
 80818e6:	bd08      	pop	{r3, pc}
 80818e8:	080401cc 	.word	0x080401cc

080818ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80818ec:	b508      	push	{r3, lr}
 80818ee:	4b02      	ldr	r3, [pc, #8]	; (80818f8 <network_connect+0xc>)
 80818f0:	681b      	ldr	r3, [r3, #0]
 80818f2:	685b      	ldr	r3, [r3, #4]
 80818f4:	9301      	str	r3, [sp, #4]
 80818f6:	bd08      	pop	{r3, pc}
 80818f8:	080401c8 	.word	0x080401c8

080818fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80818fc:	b508      	push	{r3, lr}
 80818fe:	4b02      	ldr	r3, [pc, #8]	; (8081908 <network_connecting+0xc>)
 8081900:	681b      	ldr	r3, [r3, #0]
 8081902:	689b      	ldr	r3, [r3, #8]
 8081904:	9301      	str	r3, [sp, #4]
 8081906:	bd08      	pop	{r3, pc}
 8081908:	080401c8 	.word	0x080401c8

0808190c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808190c:	b508      	push	{r3, lr}
 808190e:	4b02      	ldr	r3, [pc, #8]	; (8081918 <network_disconnect+0xc>)
 8081910:	681b      	ldr	r3, [r3, #0]
 8081912:	68db      	ldr	r3, [r3, #12]
 8081914:	9301      	str	r3, [sp, #4]
 8081916:	bd08      	pop	{r3, pc}
 8081918:	080401c8 	.word	0x080401c8

0808191c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808191c:	b508      	push	{r3, lr}
 808191e:	4b02      	ldr	r3, [pc, #8]	; (8081928 <network_ready+0xc>)
 8081920:	681b      	ldr	r3, [r3, #0]
 8081922:	691b      	ldr	r3, [r3, #16]
 8081924:	9301      	str	r3, [sp, #4]
 8081926:	bd08      	pop	{r3, pc}
 8081928:	080401c8 	.word	0x080401c8

0808192c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808192c:	b508      	push	{r3, lr}
 808192e:	4b02      	ldr	r3, [pc, #8]	; (8081938 <network_on+0xc>)
 8081930:	681b      	ldr	r3, [r3, #0]
 8081932:	695b      	ldr	r3, [r3, #20]
 8081934:	9301      	str	r3, [sp, #4]
 8081936:	bd08      	pop	{r3, pc}
 8081938:	080401c8 	.word	0x080401c8

0808193c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808193c:	b508      	push	{r3, lr}
 808193e:	4b02      	ldr	r3, [pc, #8]	; (8081948 <network_off+0xc>)
 8081940:	681b      	ldr	r3, [r3, #0]
 8081942:	699b      	ldr	r3, [r3, #24]
 8081944:	9301      	str	r3, [sp, #4]
 8081946:	bd08      	pop	{r3, pc}
 8081948:	080401c8 	.word	0x080401c8

0808194c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808194c:	b508      	push	{r3, lr}
 808194e:	4b02      	ldr	r3, [pc, #8]	; (8081958 <network_listen+0xc>)
 8081950:	681b      	ldr	r3, [r3, #0]
 8081952:	69db      	ldr	r3, [r3, #28]
 8081954:	9301      	str	r3, [sp, #4]
 8081956:	bd08      	pop	{r3, pc}
 8081958:	080401c8 	.word	0x080401c8

0808195c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808195c:	b508      	push	{r3, lr}
 808195e:	4b02      	ldr	r3, [pc, #8]	; (8081968 <network_listening+0xc>)
 8081960:	681b      	ldr	r3, [r3, #0]
 8081962:	6a1b      	ldr	r3, [r3, #32]
 8081964:	9301      	str	r3, [sp, #4]
 8081966:	bd08      	pop	{r3, pc}
 8081968:	080401c8 	.word	0x080401c8

0808196c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808196c:	b508      	push	{r3, lr}
 808196e:	4b02      	ldr	r3, [pc, #8]	; (8081978 <network_set_listen_timeout+0xc>)
 8081970:	681b      	ldr	r3, [r3, #0]
 8081972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081974:	9301      	str	r3, [sp, #4]
 8081976:	bd08      	pop	{r3, pc}
 8081978:	080401c8 	.word	0x080401c8

0808197c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808197c:	b508      	push	{r3, lr}
 808197e:	4b02      	ldr	r3, [pc, #8]	; (8081988 <network_get_listen_timeout+0xc>)
 8081980:	681b      	ldr	r3, [r3, #0]
 8081982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081984:	9301      	str	r3, [sp, #4]
 8081986:	bd08      	pop	{r3, pc}
 8081988:	080401c8 	.word	0x080401c8

0808198c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808198c:	b508      	push	{r3, lr}
 808198e:	4b02      	ldr	r3, [pc, #8]	; (8081998 <malloc+0xc>)
 8081990:	681b      	ldr	r3, [r3, #0]
 8081992:	681b      	ldr	r3, [r3, #0]
 8081994:	9301      	str	r3, [sp, #4]
 8081996:	bd08      	pop	{r3, pc}
 8081998:	080401a0 	.word	0x080401a0

0808199c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808199c:	b508      	push	{r3, lr}
 808199e:	4b02      	ldr	r3, [pc, #8]	; (80819a8 <free+0xc>)
 80819a0:	681b      	ldr	r3, [r3, #0]
 80819a2:	685b      	ldr	r3, [r3, #4]
 80819a4:	9301      	str	r3, [sp, #4]
 80819a6:	bd08      	pop	{r3, pc}
 80819a8:	080401a0 	.word	0x080401a0

080819ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80819ac:	b508      	push	{r3, lr}
 80819ae:	4b02      	ldr	r3, [pc, #8]	; (80819b8 <realloc+0xc>)
 80819b0:	681b      	ldr	r3, [r3, #0]
 80819b2:	689b      	ldr	r3, [r3, #8]
 80819b4:	9301      	str	r3, [sp, #4]
 80819b6:	bd08      	pop	{r3, pc}
 80819b8:	080401a0 	.word	0x080401a0

080819bc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80819bc:	b508      	push	{r3, lr}
 80819be:	4b02      	ldr	r3, [pc, #8]	; (80819c8 <siprintf+0xc>)
 80819c0:	681b      	ldr	r3, [r3, #0]
 80819c2:	691b      	ldr	r3, [r3, #16]
 80819c4:	9301      	str	r3, [sp, #4]
 80819c6:	bd08      	pop	{r3, pc}
 80819c8:	080401a0 	.word	0x080401a0

080819cc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80819cc:	b508      	push	{r3, lr}
 80819ce:	4b02      	ldr	r3, [pc, #8]	; (80819d8 <siscanf+0xc>)
 80819d0:	681b      	ldr	r3, [r3, #0]
 80819d2:	699b      	ldr	r3, [r3, #24]
 80819d4:	9301      	str	r3, [sp, #4]
 80819d6:	bd08      	pop	{r3, pc}
 80819d8:	080401a0 	.word	0x080401a0

080819dc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80819dc:	b508      	push	{r3, lr}
 80819de:	4b02      	ldr	r3, [pc, #8]	; (80819e8 <snprintf+0xc>)
 80819e0:	681b      	ldr	r3, [r3, #0]
 80819e2:	69db      	ldr	r3, [r3, #28]
 80819e4:	9301      	str	r3, [sp, #4]
 80819e6:	bd08      	pop	{r3, pc}
 80819e8:	080401a0 	.word	0x080401a0

080819ec <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80819ec:	b508      	push	{r3, lr}
 80819ee:	4b02      	ldr	r3, [pc, #8]	; (80819f8 <abort+0xc>)
 80819f0:	681b      	ldr	r3, [r3, #0]
 80819f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80819f4:	9301      	str	r3, [sp, #4]
 80819f6:	bd08      	pop	{r3, pc}
 80819f8:	080401a0 	.word	0x080401a0

080819fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80819fc:	b508      	push	{r3, lr}
 80819fe:	4b02      	ldr	r3, [pc, #8]	; (8081a08 <_malloc_r+0xc>)
 8081a00:	681b      	ldr	r3, [r3, #0]
 8081a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a04:	9301      	str	r3, [sp, #4]
 8081a06:	bd08      	pop	{r3, pc}
 8081a08:	080401a0 	.word	0x080401a0

08081a0c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 8081a0c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 8081a0e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 8081a10:	d007      	beq.n	8081a22 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 8081a12:	9d03      	ldr	r5, [sp, #12]
 8081a14:	1a44      	subs	r4, r0, r1
 8081a16:	1aed      	subs	r5, r5, r3
 8081a18:	436c      	muls	r4, r5
 8081a1a:	1a52      	subs	r2, r2, r1
 8081a1c:	fb94 f4f2 	sdiv	r4, r4, r2
 8081a20:	18e0      	adds	r0, r4, r3
}
 8081a22:	bd30      	pop	{r4, r5, pc}

08081a24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081a24:	2100      	movs	r1, #0
 8081a26:	f7ff bebd 	b.w	80817a4 <system_delay_ms>

08081a2a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081a2a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a2c:	6883      	ldr	r3, [r0, #8]
 8081a2e:	4604      	mov	r4, r0
 8081a30:	b90b      	cbnz	r3, 8081a36 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081a32:	f001 fba0 	bl	8083176 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a36:	68c3      	ldr	r3, [r0, #12]
 8081a38:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081a3a:	68a3      	ldr	r3, [r4, #8]
 8081a3c:	b11b      	cbz	r3, 8081a46 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081a3e:	2203      	movs	r2, #3
 8081a40:	4621      	mov	r1, r4
 8081a42:	4620      	mov	r0, r4
 8081a44:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081a46:	4620      	mov	r0, r4
}
 8081a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081a4c:	2110      	movs	r1, #16
 8081a4e:	f001 bb90 	b.w	8083172 <_ZdlPvj>

08081a52 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081a52:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081a56:	2600      	movs	r6, #0
 8081a58:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081a5a:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081a5c:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081a5e:	4688      	mov	r8, r1
 8081a60:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081a62:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081a66:	f002 fdd2 	bl	808460e <strlen>
 8081a6a:	9600      	str	r6, [sp, #0]
 8081a6c:	b281      	uxth	r1, r0
 8081a6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081a72:	4622      	mov	r2, r4
 8081a74:	4638      	mov	r0, r7
 8081a76:	f7ff fcc5 	bl	8081404 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081a7a:	b120      	cbz	r0, 8081a86 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081a7c:	4631      	mov	r1, r6
 8081a7e:	4628      	mov	r0, r5
 8081a80:	f000 fd60 	bl	8082544 <_ZN9IPAddressC1Em>
 8081a84:	e003      	b.n	8081a8e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081a86:	4621      	mov	r1, r4
 8081a88:	4628      	mov	r0, r5
 8081a8a:	f000 fd53 	bl	8082534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081a8e:	4628      	mov	r0, r5
 8081a90:	b004      	add	sp, #16
 8081a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081a96 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081a96:	2200      	movs	r2, #0
 8081a98:	4611      	mov	r1, r2
 8081a9a:	6840      	ldr	r0, [r0, #4]
 8081a9c:	f7ff bf5e 	b.w	808195c <network_listening>

08081aa0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081aa0:	2200      	movs	r2, #0
 8081aa2:	4611      	mov	r1, r2
 8081aa4:	6840      	ldr	r0, [r0, #4]
 8081aa6:	f7ff bf69 	b.w	808197c <network_get_listen_timeout>

08081aaa <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081aaa:	2200      	movs	r2, #0
 8081aac:	6840      	ldr	r0, [r0, #4]
 8081aae:	f7ff bf5d 	b.w	808196c <network_set_listen_timeout>

08081ab2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081ab2:	2200      	movs	r2, #0
 8081ab4:	f081 0101 	eor.w	r1, r1, #1
 8081ab8:	6840      	ldr	r0, [r0, #4]
 8081aba:	f7ff bf47 	b.w	808194c <network_listen>

08081abe <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081abe:	2300      	movs	r3, #0
 8081ac0:	461a      	mov	r2, r3
 8081ac2:	4619      	mov	r1, r3
 8081ac4:	6840      	ldr	r0, [r0, #4]
 8081ac6:	f7ff bf39 	b.w	808193c <network_off>

08081aca <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081aca:	2300      	movs	r3, #0
 8081acc:	461a      	mov	r2, r3
 8081ace:	4619      	mov	r1, r3
 8081ad0:	6840      	ldr	r0, [r0, #4]
 8081ad2:	f7ff bf2b 	b.w	808192c <network_on>

08081ad6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081ad6:	2200      	movs	r2, #0
 8081ad8:	4611      	mov	r1, r2
 8081ada:	6840      	ldr	r0, [r0, #4]
 8081adc:	f7ff bf0e 	b.w	80818fc <network_connecting>

08081ae0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081ae0:	2200      	movs	r2, #0
 8081ae2:	2102      	movs	r1, #2
 8081ae4:	6840      	ldr	r0, [r0, #4]
 8081ae6:	f7ff bf11 	b.w	808190c <network_disconnect>

08081aea <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081aea:	2300      	movs	r3, #0
 8081aec:	461a      	mov	r2, r3
 8081aee:	6840      	ldr	r0, [r0, #4]
 8081af0:	f7ff befc 	b.w	80818ec <network_connect>

08081af4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081af6:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081af8:	4b1a      	ldr	r3, [pc, #104]	; (8081b64 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081afa:	2500      	movs	r5, #0
 8081afc:	6003      	str	r3, [r0, #0]
 8081afe:	2618      	movs	r6, #24
 8081b00:	3328      	adds	r3, #40	; 0x28
 8081b02:	b089      	sub	sp, #36	; 0x24
 8081b04:	6043      	str	r3, [r0, #4]
 8081b06:	6085      	str	r5, [r0, #8]
 8081b08:	60c5      	str	r5, [r0, #12]
 8081b0a:	4632      	mov	r2, r6
 8081b0c:	4629      	mov	r1, r5
 8081b0e:	4604      	mov	r4, r0
 8081b10:	3010      	adds	r0, #16
 8081b12:	f002 fd0e 	bl	8084532 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081b16:	462a      	mov	r2, r5
 8081b18:	4629      	mov	r1, r5
 8081b1a:	6878      	ldr	r0, [r7, #4]
 8081b1c:	f7ff fefe 	bl	808191c <network_ready>
 8081b20:	b908      	cbnz	r0, 8081b26 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081b22:	60a0      	str	r0, [r4, #8]
            return sig;
 8081b24:	e01b      	b.n	8081b5e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081b26:	4629      	mov	r1, r5
 8081b28:	4632      	mov	r2, r6
 8081b2a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081b2c:	9500      	str	r5, [sp, #0]
 8081b2e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081b30:	f002 fcff 	bl	8084532 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081b34:	a902      	add	r1, sp, #8
 8081b36:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081b38:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081b3c:	f7ff fc6a 	bl	8081414 <cellular_signal>
 8081b40:	b110      	cbz	r0, 8081b48 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081b42:	2301      	movs	r3, #1
 8081b44:	60a3      	str	r3, [r4, #8]
            return sig;
 8081b46:	e00a      	b.n	8081b5e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8081b48:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081b4a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8081b4c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081b4e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081b50:	b90b      	cbnz	r3, 8081b56 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8081b52:	2302      	movs	r3, #2
 8081b54:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8081b56:	a902      	add	r1, sp, #8
 8081b58:	4620      	mov	r0, r4
 8081b5a:	f000 f895 	bl	8081c88 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8081b5e:	4620      	mov	r0, r4
 8081b60:	b009      	add	sp, #36	; 0x24
 8081b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081b64:	080851c0 	.word	0x080851c0

08081b68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081b68:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081b6a:	4c08      	ldr	r4, [pc, #32]	; (8081b8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081b6c:	2528      	movs	r5, #40	; 0x28
 8081b6e:	462a      	mov	r2, r5
 8081b70:	2100      	movs	r1, #0
 8081b72:	4620      	mov	r0, r4
 8081b74:	f002 fcdd 	bl	8084532 <memset>
        cid = -1;
 8081b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081b7c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081b7e:	4b04      	ldr	r3, [pc, #16]	; (8081b90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081b80:	2204      	movs	r2, #4
 8081b82:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081b84:	4a03      	ldr	r2, [pc, #12]	; (8081b94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8081b86:	8025      	strh	r5, [r4, #0]
 8081b88:	601a      	str	r2, [r3, #0]
 8081b8a:	bd38      	pop	{r3, r4, r5, pc}
 8081b8c:	200001d0 	.word	0x200001d0
 8081b90:	200001c8 	.word	0x200001c8
 8081b94:	0808518c 	.word	0x0808518c

08081b98 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081b98:	4770      	bx	lr

08081b9a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081b9a:	7d00      	ldrb	r0, [r0, #20]
 8081b9c:	4770      	bx	lr
	...

08081ba0 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081ba0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081ba2:	7d03      	ldrb	r3, [r0, #20]
 8081ba4:	b11b      	cbz	r3, 8081bae <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081ba6:	6980      	ldr	r0, [r0, #24]
 8081ba8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081bac:	d101      	bne.n	8081bb2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081bae:	2000      	movs	r0, #0
 8081bb0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081bb2:	f002 f927 	bl	8083e04 <__aeabi_i2f>
 8081bb6:	4902      	ldr	r1, [pc, #8]	; (8081bc0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081bb8:	f002 fa2c 	bl	8084014 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081bbc:	bd08      	pop	{r3, pc}
 8081bbe:	bf00      	nop
 8081bc0:	42c80000 	.word	0x42c80000

08081bc4 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081bc4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081bc6:	7d03      	ldrb	r3, [r0, #20]
 8081bc8:	b11b      	cbz	r3, 8081bd2 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081bca:	6a00      	ldr	r0, [r0, #32]
 8081bcc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081bd0:	d101      	bne.n	8081bd6 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081bd2:	2000      	movs	r0, #0
 8081bd4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081bd6:	f002 f915 	bl	8083e04 <__aeabi_i2f>
 8081bda:	4902      	ldr	r1, [pc, #8]	; (8081be4 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081bdc:	f002 fa1a 	bl	8084014 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081be0:	bd08      	pop	{r3, pc}
 8081be2:	bf00      	nop
 8081be4:	42c80000 	.word	0x42c80000

08081be8 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081be8:	b570      	push	{r4, r5, r6, lr}
 8081bea:	460d      	mov	r5, r1
 8081bec:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081bee:	220a      	movs	r2, #10
 8081bf0:	6881      	ldr	r1, [r0, #8]
 8081bf2:	4628      	mov	r0, r5
 8081bf4:	f000 fe0f 	bl	8082816 <_ZN5Print5printEii>
    n += p.print(',');
 8081bf8:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081bfa:	4604      	mov	r4, r0
    n += p.print(',');
 8081bfc:	4628      	mov	r0, r5
 8081bfe:	f000 fda3 	bl	8082748 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081c02:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081c04:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081c06:	68f1      	ldr	r1, [r6, #12]
 8081c08:	4628      	mov	r0, r5
 8081c0a:	f000 fe04 	bl	8082816 <_ZN5Print5printEii>
    return n;
}
 8081c0e:	4420      	add	r0, r4
 8081c10:	bd70      	pop	{r4, r5, r6, pc}

08081c12 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081c12:	f1a0 0004 	sub.w	r0, r0, #4
 8081c16:	f7ff bfe7 	b.w	8081be8 <_ZNK14CellularSignal7printToER5Print>

08081c1a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081c1a:	b510      	push	{r4, lr}
 8081c1c:	4604      	mov	r4, r0
 8081c1e:	2128      	movs	r1, #40	; 0x28
 8081c20:	f001 faa7 	bl	8083172 <_ZdlPvj>
 8081c24:	4620      	mov	r0, r4
 8081c26:	bd10      	pop	{r4, pc}

08081c28 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081c28:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081c2a:	7d03      	ldrb	r3, [r0, #20]
 8081c2c:	b15b      	cbz	r3, 8081c46 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081c2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081c30:	2800      	cmp	r0, #0
 8081c32:	db08      	blt.n	8081c46 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081c34:	f002 f8e6 	bl	8083e04 <__aeabi_i2f>
 8081c38:	4904      	ldr	r1, [pc, #16]	; (8081c4c <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081c3a:	f002 f9eb 	bl	8084014 <__aeabi_fdiv>
 8081c3e:	4904      	ldr	r1, [pc, #16]	; (8081c50 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081c40:	f002 f934 	bl	8083eac <__aeabi_fmul>
 8081c44:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081c46:	4803      	ldr	r0, [pc, #12]	; (8081c54 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081c48:	bd08      	pop	{r3, pc}
 8081c4a:	bf00      	nop
 8081c4c:	477fff00 	.word	0x477fff00
 8081c50:	42c80000 	.word	0x42c80000
 8081c54:	bf800000 	.word	0xbf800000

08081c58 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081c58:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081c5a:	7d03      	ldrb	r3, [r0, #20]
 8081c5c:	b15b      	cbz	r3, 8081c76 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081c5e:	69c0      	ldr	r0, [r0, #28]
 8081c60:	2800      	cmp	r0, #0
 8081c62:	db08      	blt.n	8081c76 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081c64:	f002 f8ce 	bl	8083e04 <__aeabi_i2f>
 8081c68:	4904      	ldr	r1, [pc, #16]	; (8081c7c <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081c6a:	f002 f9d3 	bl	8084014 <__aeabi_fdiv>
 8081c6e:	4904      	ldr	r1, [pc, #16]	; (8081c80 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081c70:	f002 f91c 	bl	8083eac <__aeabi_fmul>
 8081c74:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081c76:	4803      	ldr	r0, [pc, #12]	; (8081c84 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081c78:	bd08      	pop	{r3, pc}
 8081c7a:	bf00      	nop
 8081c7c:	477fff00 	.word	0x477fff00
 8081c80:	42c80000 	.word	0x42c80000
 8081c84:	bf800000 	.word	0xbf800000

08081c88 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081c88:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081c8a:	460d      	mov	r5, r1
 8081c8c:	f100 0410 	add.w	r4, r0, #16
 8081c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081c94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081c98:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081c9c:	2001      	movs	r0, #1
 8081c9e:	bd30      	pop	{r4, r5, pc}

08081ca0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081ca0:	4770      	bx	lr

08081ca2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081ca2:	2000      	movs	r0, #0
 8081ca4:	4770      	bx	lr

08081ca6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081ca6:	b510      	push	{r4, lr}
 8081ca8:	4604      	mov	r4, r0
 8081caa:	2110      	movs	r1, #16
 8081cac:	f001 fa61 	bl	8083172 <_ZdlPvj>
 8081cb0:	4620      	mov	r0, r4
 8081cb2:	bd10      	pop	{r4, pc}

08081cb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081cb4:	b508      	push	{r3, lr}
      { delete this; }
 8081cb6:	b108      	cbz	r0, 8081cbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081cb8:	f7ff fff5 	bl	8081ca6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081cbc:	bd08      	pop	{r3, pc}

08081cbe <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081cbe:	2200      	movs	r2, #0
 8081cc0:	6002      	str	r2, [r0, #0]
 8081cc2:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8081cc6:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8081cc8:	b510      	push	{r4, lr}
 8081cca:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081cce:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cd0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081cd2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081cd4:	680c      	ldr	r4, [r1, #0]
 8081cd6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8081cd8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8081cda:	bd10      	pop	{r4, pc}

08081cdc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081cdc:	b510      	push	{r4, lr}
 8081cde:	4604      	mov	r4, r0
    free((void*)msg_);
 8081ce0:	6800      	ldr	r0, [r0, #0]
 8081ce2:	f7ff fe5b 	bl	808199c <free>
}
 8081ce6:	4620      	mov	r0, r4
 8081ce8:	bd10      	pop	{r4, pc}

08081cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081cea:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081cec:	68c4      	ldr	r4, [r0, #12]
 8081cee:	b1f4      	cbz	r4, 8081d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081cf0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081cf2:	2b02      	cmp	r3, #2
 8081cf4:	d103      	bne.n	8081cfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081cf6:	f104 000c 	add.w	r0, r4, #12
 8081cfa:	f7ff ffef 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081cfe:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081d00:	b135      	cbz	r5, 8081d10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081d02:	4628      	mov	r0, r5
 8081d04:	f7fe fb08 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
 8081d08:	2110      	movs	r1, #16
 8081d0a:	4628      	mov	r0, r5
 8081d0c:	f001 fa31 	bl	8083172 <_ZdlPvj>
 8081d10:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081d12:	b135      	cbz	r5, 8081d22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081d14:	4628      	mov	r0, r5
 8081d16:	f7fe faff 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
 8081d1a:	2110      	movs	r1, #16
 8081d1c:	4628      	mov	r0, r5
 8081d1e:	f001 fa28 	bl	8083172 <_ZdlPvj>
 8081d22:	4620      	mov	r0, r4
 8081d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081d28:	2114      	movs	r1, #20
 8081d2a:	f001 ba22 	b.w	8083172 <_ZdlPvj>
 8081d2e:	bd38      	pop	{r3, r4, r5, pc}

08081d30 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081d30:	b510      	push	{r4, lr}
 8081d32:	b088      	sub	sp, #32
 8081d34:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081d36:	4668      	mov	r0, sp
 8081d38:	f000 fdea 	bl	8082910 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081d3c:	4669      	mov	r1, sp
 8081d3e:	a804      	add	r0, sp, #16
 8081d40:	f000 fe08 	bl	8082954 <_ZN6StringC1ERKS_>
 8081d44:	a804      	add	r0, sp, #16
 8081d46:	47a0      	blx	r4
 8081d48:	4604      	mov	r4, r0
 8081d4a:	a804      	add	r0, sp, #16
 8081d4c:	f000 fd99 	bl	8082882 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081d50:	4668      	mov	r0, sp
 8081d52:	f000 fd96 	bl	8082882 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081d56:	4620      	mov	r0, r4
 8081d58:	b008      	add	sp, #32
 8081d5a:	bd10      	pop	{r4, pc}

08081d5c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081d5e:	4607      	mov	r7, r0
 8081d60:	460e      	mov	r6, r1
 8081d62:	4615      	mov	r5, r2
 8081d64:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8081d66:	2410      	movs	r4, #16
 8081d68:	4622      	mov	r2, r4
 8081d6a:	2100      	movs	r1, #0
 8081d6c:	4668      	mov	r0, sp
 8081d6e:	f002 fbe0 	bl	8084532 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081d72:	2200      	movs	r2, #0
 8081d74:	4669      	mov	r1, sp
 8081d76:	4610      	mov	r0, r2
         size = sizeof(*this);
 8081d78:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8081d7c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8081d7e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8081d80:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081d82:	f7ff fd5b 	bl	808183c <spark_function>
}
 8081d86:	b005      	add	sp, #20
 8081d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081d8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081d8a:	b513      	push	{r0, r1, r4, lr}
 8081d8c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081d8e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081d92:	2300      	movs	r3, #0
 8081d94:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081d96:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081d98:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081d9a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081d9c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081d9e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081da0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081da2:	f7fe fdbf 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081da6:	4620      	mov	r0, r4
 8081da8:	b002      	add	sp, #8
 8081daa:	bd10      	pop	{r4, pc}

08081dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081dac:	680b      	ldr	r3, [r1, #0]
 8081dae:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081db0:	b113      	cbz	r3, 8081db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081db2:	685a      	ldr	r2, [r3, #4]
 8081db4:	3201      	adds	r2, #1
 8081db6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081db8:	4770      	bx	lr

08081dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081dba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081dbc:	460c      	mov	r4, r1
 8081dbe:	4606      	mov	r6, r0
 8081dc0:	460f      	mov	r7, r1
 8081dc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8081dc6:	ad02      	add	r5, sp, #8
 8081dc8:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081dcc:	4621      	mov	r1, r4
 8081dce:	a801      	add	r0, sp, #4
 8081dd0:	f7ff ffec 	bl	8081dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081dd4:	4629      	mov	r1, r5
 8081dd6:	4630      	mov	r0, r6
 8081dd8:	f7ff ffd7 	bl	8081d8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081ddc:	a801      	add	r0, sp, #4
 8081dde:	f7fe fda1 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081de2:	4620      	mov	r0, r4
 8081de4:	f7fe fd9e 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081de8:	4638      	mov	r0, r7
 8081dea:	2108      	movs	r1, #8
 8081dec:	f001 f9c1 	bl	8083172 <_ZdlPvj>
        return p;
    }
 8081df0:	4630      	mov	r0, r6
 8081df2:	b003      	add	sp, #12
 8081df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081df6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081df6:	b513      	push	{r0, r1, r4, lr}
 8081df8:	460b      	mov	r3, r1
 8081dfa:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081dfc:	c803      	ldmia	r0, {r0, r1}
 8081dfe:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081e02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081e06:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081e0a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081e0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081e12:	b002      	add	sp, #8
 8081e14:	bd10      	pop	{r4, pc}
	...

08081e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081e18:	b538      	push	{r3, r4, r5, lr}
 8081e1a:	2300      	movs	r3, #0
 8081e1c:	4604      	mov	r4, r0
 8081e1e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e20:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081e22:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e24:	f7fe f93b 	bl	808009e <_Znwj>
 8081e28:	b128      	cbz	r0, 8081e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081e2a:	2301      	movs	r3, #1
 8081e2c:	6043      	str	r3, [r0, #4]
 8081e2e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081e30:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081e32:	60c5      	str	r5, [r0, #12]
 8081e34:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081e36:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8081e38:	4620      	mov	r0, r4
 8081e3a:	bd38      	pop	{r3, r4, r5, pc}
 8081e3c:	080851f4 	.word	0x080851f4

08081e40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081e40:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081e42:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081e44:	b90a      	cbnz	r2, 8081e4a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081e46:	f001 f996 	bl	8083176 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e4a:	68c3      	ldr	r3, [r0, #12]
    }
 8081e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e50:	4718      	bx	r3

08081e52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081e52:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081e54:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081e56:	f100 0110 	add.w	r1, r0, #16
 8081e5a:	f7ff fff1 	bl	8081e40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081e5e:	bd08      	pop	{r3, pc}

08081e60 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081e60:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081e62:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081e64:	b90a      	cbnz	r2, 8081e6a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8081e66:	f001 f986 	bl	8083176 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e6a:	68c3      	ldr	r3, [r0, #12]
    }
 8081e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081e70:	4718      	bx	r3

08081e72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081e72:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081e74:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081e76:	f100 0110 	add.w	r1, r0, #16
 8081e7a:	f7ff fff1 	bl	8081e60 <_ZNKSt8functionIFvRKbEEclES1_>
 8081e7e:	bd08      	pop	{r3, pc}

08081e80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081e80:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081e82:	2300      	movs	r3, #0
 8081e84:	6083      	str	r3, [r0, #8]
 8081e86:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081e88:	4604      	mov	r4, r0
 8081e8a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081e8c:	b12b      	cbz	r3, 8081e9a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081e8e:	2202      	movs	r2, #2
 8081e90:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081e92:	68eb      	ldr	r3, [r5, #12]
 8081e94:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081e96:	68ab      	ldr	r3, [r5, #8]
 8081e98:	60a3      	str	r3, [r4, #8]
	}
    }
 8081e9a:	4620      	mov	r0, r4
 8081e9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ea2:	b089      	sub	sp, #36	; 0x24
 8081ea4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8081ea6:	4668      	mov	r0, sp
 8081ea8:	f7ff ff09 	bl	8081cbe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081eac:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081eb0:	2300      	movs	r3, #0
 8081eb2:	f88d 3008 	strb.w	r3, [sp, #8]
 8081eb6:	e8d4 3f4f 	ldrexb	r3, [r4]
 8081eba:	2b00      	cmp	r3, #0
 8081ebc:	d103      	bne.n	8081ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8081ebe:	e8c4 2f41 	strexb	r1, r2, [r4]
 8081ec2:	2900      	cmp	r1, #0
 8081ec4:	d1f7      	bne.n	8081eb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8081ec6:	d002      	beq.n	8081ece <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8081ec8:	f88d 3008 	strb.w	r3, [sp, #8]
 8081ecc:	e063      	b.n	8081f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081ece:	f114 050c 	adds.w	r5, r4, #12
 8081ed2:	d003      	beq.n	8081edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081ed4:	4669      	mov	r1, sp
 8081ed6:	4628      	mov	r0, r5
 8081ed8:	f7ff fef1 	bl	8081cbe <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081edc:	f3bf 8f5f 	dmb	sy
 8081ee0:	2301      	movs	r3, #1
 8081ee2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081ee4:	f3bf 8f5f 	dmb	sy
 8081ee8:	f104 0308 	add.w	r3, r4, #8
 8081eec:	2000      	movs	r0, #0
 8081eee:	e853 6f00 	ldrex	r6, [r3]
 8081ef2:	e843 0200 	strex	r2, r0, [r3]
 8081ef6:	2a00      	cmp	r2, #0
 8081ef8:	d1f9      	bne.n	8081eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8081efa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081efe:	2e00      	cmp	r6, #0
 8081f00:	d049      	beq.n	8081f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081f02:	f7ff fc67 	bl	80817d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081f06:	b120      	cbz	r0, 8081f12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081f08:	4629      	mov	r1, r5
 8081f0a:	4630      	mov	r0, r6
 8081f0c:	f7ff ff98 	bl	8081e40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081f10:	e03a      	b.n	8081f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081f12:	4631      	mov	r1, r6
 8081f14:	a802      	add	r0, sp, #8
 8081f16:	f7ff ffb3 	bl	8081e80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081f1a:	68e0      	ldr	r0, [r4, #12]
 8081f1c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081f20:	b108      	cbz	r0, 8081f26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8081f22:	f002 fb59 	bl	80845d8 <strdup>
 8081f26:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081f28:	2010      	movs	r0, #16
 8081f2a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081f2e:	f7fe f8b6 	bl	808009e <_Znwj>
 8081f32:	4605      	mov	r5, r0
 8081f34:	b1e8      	cbz	r0, 8081f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081f36:	2700      	movs	r7, #0
 8081f38:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081f3a:	2018      	movs	r0, #24
 8081f3c:	f7fe f8af 	bl	808009e <_Znwj>
 8081f40:	4604      	mov	r4, r0
 8081f42:	b188      	cbz	r0, 8081f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081f44:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081f46:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081f48:	a802      	add	r0, sp, #8
 8081f4a:	f7ff ff54 	bl	8081df6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081f4e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081f50:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081f52:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081f54:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081f56:	9204      	str	r2, [sp, #16]
 8081f58:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081f5a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081f5c:	60e3      	str	r3, [r4, #12]
 8081f5e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081f62:	9205      	str	r2, [sp, #20]
 8081f64:	f7ff feab 	bl	8081cbe <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081f68:	4b0d      	ldr	r3, [pc, #52]	; (8081fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081f6a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081f6c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081f6e:	4b0d      	ldr	r3, [pc, #52]	; (8081fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081f70:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081f72:	a806      	add	r0, sp, #24
 8081f74:	f7ff feb2 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081f78:	a802      	add	r0, sp, #8
 8081f7a:	f7fe f9cd 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081f7e:	2200      	movs	r2, #0
 8081f80:	4629      	mov	r1, r5
 8081f82:	4809      	ldr	r0, [pc, #36]	; (8081fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081f84:	f7ff fc2e 	bl	80817e4 <application_thread_invoke>
 8081f88:	4630      	mov	r0, r6
 8081f8a:	f7fe f9c5 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081f8e:	2110      	movs	r1, #16
 8081f90:	4630      	mov	r0, r6
 8081f92:	f001 f8ee 	bl	8083172 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081f96:	4668      	mov	r0, sp
 8081f98:	f7ff fea0 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
    }
 8081f9c:	b009      	add	sp, #36	; 0x24
 8081f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081fa0:	08081e53 	.word	0x08081e53
 8081fa4:	080820c9 	.word	0x080820c9
 8081fa8:	08081a2b 	.word	0x08081a2b

08081fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081fb0:	b08b      	sub	sp, #44	; 0x2c
 8081fb2:	4606      	mov	r6, r0
 8081fb4:	460f      	mov	r7, r1
 8081fb6:	4690      	mov	r8, r2
 8081fb8:	4699      	mov	r9, r3
 8081fba:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081fbe:	f7ff fc5d 	bl	808187c <spark_cloud_flag_connected>
 8081fc2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081fc4:	4683      	mov	fp, r0
 8081fc6:	bb30      	cbnz	r0, 8082016 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081fc8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081fcc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081fce:	a905      	add	r1, sp, #20
 8081fd0:	4628      	mov	r0, r5
 8081fd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081fd6:	f7ff fe72 	bl	8081cbe <_ZN8particle5ErrorC1EOS0_>
 8081fda:	2014      	movs	r0, #20
 8081fdc:	f7fe f85f 	bl	808009e <_Znwj>
 8081fe0:	4604      	mov	r4, r0
 8081fe2:	b158      	cbz	r0, 8081ffc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081fe4:	2302      	movs	r3, #2
 8081fe6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081fe8:	2301      	movs	r3, #1
 8081fea:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081fec:	f8c0 b004 	str.w	fp, [r0, #4]
 8081ff0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081ff4:	4629      	mov	r1, r5
 8081ff6:	300c      	adds	r0, #12
 8081ff8:	f7ff fe61 	bl	8081cbe <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081ffc:	4630      	mov	r0, r6
 8081ffe:	4621      	mov	r1, r4
 8082000:	f840 4b04 	str.w	r4, [r0], #4
 8082004:	f7ff ff08 	bl	8081e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082008:	4628      	mov	r0, r5
 808200a:	f7ff fe67 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808200e:	a805      	add	r0, sp, #20
 8082010:	f7ff fe64 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
 8082014:	e052      	b.n	80820bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082016:	2400      	movs	r4, #0
 8082018:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808201a:	2014      	movs	r0, #20
 808201c:	606c      	str	r4, [r5, #4]
 808201e:	60ac      	str	r4, [r5, #8]
 8082020:	9307      	str	r3, [sp, #28]
 8082022:	f7fe f83c 	bl	808009e <_Znwj>
 8082026:	4601      	mov	r1, r0
 8082028:	b118      	cbz	r0, 8082032 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808202a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808202c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808202e:	6044      	str	r4, [r0, #4]
 8082030:	6084      	str	r4, [r0, #8]
 8082032:	a804      	add	r0, sp, #16
 8082034:	9103      	str	r1, [sp, #12]
 8082036:	f7ff feef 	bl	8081e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808203a:	4b22      	ldr	r3, [pc, #136]	; (80820c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808203c:	2008      	movs	r0, #8
 808203e:	9308      	str	r3, [sp, #32]
 8082040:	f7fe f82d 	bl	808009e <_Znwj>
 8082044:	4604      	mov	r4, r0
 8082046:	b128      	cbz	r0, 8082054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082048:	9b03      	ldr	r3, [sp, #12]
 808204a:	a904      	add	r1, sp, #16
 808204c:	f840 3b04 	str.w	r3, [r0], #4
 8082050:	f7ff feac 	bl	8081dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082054:	9500      	str	r5, [sp, #0]
 8082056:	fa5f f38a 	uxtb.w	r3, sl
 808205a:	464a      	mov	r2, r9
 808205c:	4641      	mov	r1, r8
 808205e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082060:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082062:	f7ff fc1b 	bl	808189c <spark_send_event>
 8082066:	b920      	cbnz	r0, 8082072 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082068:	9b03      	ldr	r3, [sp, #12]
 808206a:	785b      	ldrb	r3, [r3, #1]
 808206c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082070:	b183      	cbz	r3, 8082094 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8082072:	9b03      	ldr	r3, [sp, #12]
 8082074:	a904      	add	r1, sp, #16
 8082076:	a806      	add	r0, sp, #24
 8082078:	9305      	str	r3, [sp, #20]
 808207a:	f7ff fe97 	bl	8081dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808207e:	a905      	add	r1, sp, #20
 8082080:	4630      	mov	r0, r6
 8082082:	f7ff fe82 	bl	8081d8a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082086:	a806      	add	r0, sp, #24
 8082088:	f7fe fc4c 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808208c:	a804      	add	r0, sp, #16
 808208e:	f7fe fc49 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082092:	e013      	b.n	80820bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8082094:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082098:	a905      	add	r1, sp, #20
 808209a:	a803      	add	r0, sp, #12
 808209c:	9205      	str	r2, [sp, #20]
 808209e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80820a2:	f7ff fefd 	bl	8081ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80820a6:	a805      	add	r0, sp, #20
 80820a8:	f7ff fe18 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80820ac:	a805      	add	r0, sp, #20
 80820ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80820b0:	f7ff fe83 	bl	8081dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80820b4:	a806      	add	r0, sp, #24
 80820b6:	f7fe fc35 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80820ba:	e7da      	b.n	8082072 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80820bc:	4630      	mov	r0, r6
 80820be:	b00b      	add	sp, #44	; 0x2c
 80820c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80820c4:	08082239 	.word	0x08082239

080820c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80820c8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80820ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80820cc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80820ce:	d006      	beq.n	80820de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80820d0:	2a03      	cmp	r2, #3
 80820d2:	d017      	beq.n	8082104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80820d4:	2a01      	cmp	r2, #1
 80820d6:	d122      	bne.n	808211e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80820d8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80820da:	6003      	str	r3, [r0, #0]
	      break;
 80820dc:	e01f      	b.n	808211e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80820de:	2018      	movs	r0, #24
 80820e0:	680e      	ldr	r6, [r1, #0]
 80820e2:	f7fd ffdc 	bl	808009e <_Znwj>
 80820e6:	4605      	mov	r5, r0
 80820e8:	b150      	cbz	r0, 8082100 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80820ea:	4631      	mov	r1, r6
 80820ec:	f7ff fec8 	bl	8081e80 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80820f0:	6930      	ldr	r0, [r6, #16]
 80820f2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80820f6:	b108      	cbz	r0, 80820fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80820f8:	f002 fa6e 	bl	80845d8 <strdup>
 80820fc:	6128      	str	r0, [r5, #16]
 80820fe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082100:	6025      	str	r5, [r4, #0]
 8082102:	e00c      	b.n	808211e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082104:	6804      	ldr	r4, [r0, #0]
 8082106:	b154      	cbz	r4, 808211e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8082108:	f104 0010 	add.w	r0, r4, #16
 808210c:	f7ff fde6 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082110:	4620      	mov	r0, r4
 8082112:	f7fe f901 	bl	8080318 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082116:	2118      	movs	r1, #24
 8082118:	4620      	mov	r0, r4
 808211a:	f001 f82a 	bl	8083172 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808211e:	2000      	movs	r0, #0
 8082120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082122 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082122:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082124:	2300      	movs	r3, #0
 8082126:	6083      	str	r3, [r0, #8]
 8082128:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808212a:	4604      	mov	r4, r0
 808212c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808212e:	b12b      	cbz	r3, 808213c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082130:	2202      	movs	r2, #2
 8082132:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082134:	68eb      	ldr	r3, [r5, #12]
 8082136:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082138:	68ab      	ldr	r3, [r5, #8]
 808213a:	60a3      	str	r3, [r4, #8]
	}
    }
 808213c:	4620      	mov	r0, r4
 808213e:	bd38      	pop	{r3, r4, r5, pc}

08082140 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082140:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082142:	b570      	push	{r4, r5, r6, lr}
 8082144:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082146:	d006      	beq.n	8082156 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082148:	2a03      	cmp	r2, #3
 808214a:	d011      	beq.n	8082170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808214c:	2a01      	cmp	r2, #1
 808214e:	d118      	bne.n	8082182 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082150:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082152:	6003      	str	r3, [r0, #0]
	      break;
 8082154:	e015      	b.n	8082182 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082156:	2014      	movs	r0, #20
 8082158:	680e      	ldr	r6, [r1, #0]
 808215a:	f7fd ffa0 	bl	808009e <_Znwj>
 808215e:	4605      	mov	r5, r0
 8082160:	b120      	cbz	r0, 808216c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082162:	4631      	mov	r1, r6
 8082164:	f7ff ffdd 	bl	8082122 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082168:	7c33      	ldrb	r3, [r6, #16]
 808216a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808216c:	6025      	str	r5, [r4, #0]
 808216e:	e008      	b.n	8082182 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082170:	6804      	ldr	r4, [r0, #0]
 8082172:	b134      	cbz	r4, 8082182 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082174:	4620      	mov	r0, r4
 8082176:	f7fe f8cf 	bl	8080318 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808217a:	2114      	movs	r1, #20
 808217c:	4620      	mov	r0, r4
 808217e:	f000 fff8 	bl	8083172 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082182:	2000      	movs	r0, #0
 8082184:	bd70      	pop	{r4, r5, r6, pc}
	...

08082188 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082188:	b5f0      	push	{r4, r5, r6, r7, lr}
 808218a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808218c:	f3bf 8f5f 	dmb	sy
 8082190:	b087      	sub	sp, #28
 8082192:	2300      	movs	r3, #0
 8082194:	e850 6f00 	ldrex	r6, [r0]
 8082198:	e840 3200 	strex	r2, r3, [r0]
 808219c:	2a00      	cmp	r2, #0
 808219e:	d1f9      	bne.n	8082194 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80821a0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80821a4:	2e00      	cmp	r6, #0
 80821a6:	d03f      	beq.n	8082228 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80821a8:	4618      	mov	r0, r3
 80821aa:	f7ff fb13 	bl	80817d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80821ae:	4607      	mov	r7, r0
 80821b0:	b120      	cbz	r0, 80821bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80821b2:	4621      	mov	r1, r4
 80821b4:	4630      	mov	r0, r6
 80821b6:	f7ff fe53 	bl	8081e60 <_ZNKSt8functionIFvRKbEEclES1_>
 80821ba:	e02e      	b.n	808221a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80821bc:	4631      	mov	r1, r6
 80821be:	a801      	add	r0, sp, #4
 80821c0:	f7ff ffaf 	bl	8082122 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80821c4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80821c6:	2010      	movs	r0, #16
 80821c8:	f88d 3014 	strb.w	r3, [sp, #20]
 80821cc:	f7fd ff67 	bl	808009e <_Znwj>
 80821d0:	4605      	mov	r5, r0
 80821d2:	b1d0      	cbz	r0, 808220a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821d4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80821d6:	2014      	movs	r0, #20
 80821d8:	f7fd ff61 	bl	808009e <_Znwj>
 80821dc:	4604      	mov	r4, r0
 80821de:	b178      	cbz	r0, 8082200 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821e0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80821e2:	4601      	mov	r1, r0
 80821e4:	a801      	add	r0, sp, #4
 80821e6:	f7ff fe06 	bl	8081df6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80821ea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80821ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80821ee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80821f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80821f2:	9203      	str	r2, [sp, #12]
 80821f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80821f6:	60e3      	str	r3, [r4, #12]
 80821f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80821fc:	9204      	str	r2, [sp, #16]
 80821fe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082200:	4b0a      	ldr	r3, [pc, #40]	; (808222c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082202:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082204:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082206:	4b0a      	ldr	r3, [pc, #40]	; (8082230 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082208:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808220a:	a801      	add	r0, sp, #4
 808220c:	f7fe f884 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082210:	2200      	movs	r2, #0
 8082212:	4629      	mov	r1, r5
 8082214:	4807      	ldr	r0, [pc, #28]	; (8082234 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082216:	f7ff fae5 	bl	80817e4 <application_thread_invoke>
 808221a:	4630      	mov	r0, r6
 808221c:	f7fe f87c 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082220:	2110      	movs	r1, #16
 8082222:	4630      	mov	r0, r6
 8082224:	f000 ffa5 	bl	8083172 <_ZdlPvj>
        }
    }
 8082228:	b007      	add	sp, #28
 808222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808222c:	08081e73 	.word	0x08081e73
 8082230:	08082141 	.word	0x08082141
 8082234:	08081a2b 	.word	0x08081a2b

08082238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082238:	b530      	push	{r4, r5, lr}
 808223a:	4604      	mov	r4, r0
 808223c:	b085      	sub	sp, #20
 808223e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082240:	4668      	mov	r0, sp
 8082242:	4611      	mov	r1, r2
 8082244:	f7ff fdb9 	bl	8081dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082248:	b17c      	cbz	r4, 808226a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808224a:	b224      	sxth	r4, r4
 808224c:	4628      	mov	r0, r5
 808224e:	b10d      	cbz	r5, 8082254 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082250:	f002 f9c2 	bl	80845d8 <strdup>
 8082254:	9002      	str	r0, [sp, #8]
 8082256:	a902      	add	r1, sp, #8
 8082258:	4668      	mov	r0, sp
 808225a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808225e:	f7ff fe1f 	bl	8081ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082262:	a802      	add	r0, sp, #8
 8082264:	f7ff fd3a 	bl	8081cdc <_ZN8particle5ErrorD1Ev>
 8082268:	e01d      	b.n	80822a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808226a:	f04f 0201 	mov.w	r2, #1
 808226e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082270:	f88d 4008 	strb.w	r4, [sp, #8]
 8082274:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082278:	42a3      	cmp	r3, r4
 808227a:	d103      	bne.n	8082284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808227c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082280:	2900      	cmp	r1, #0
 8082282:	d1f7      	bne.n	8082274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082284:	d002      	beq.n	808228c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082286:	f88d 3008 	strb.w	r3, [sp, #8]
 808228a:	e00c      	b.n	80822a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808228c:	f110 010c 	adds.w	r1, r0, #12
 8082290:	f04f 0301 	mov.w	r3, #1
 8082294:	bf18      	it	ne
 8082296:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082298:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808229c:	3004      	adds	r0, #4
 808229e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80822a2:	f7ff ff71 	bl	8082188 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80822a6:	a801      	add	r0, sp, #4
 80822a8:	f7fe fb3c 	bl	8080924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80822ac:	b005      	add	sp, #20
 80822ae:	bd30      	pop	{r4, r5, pc}

080822b0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80822b0:	6800      	ldr	r0, [r0, #0]
 80822b2:	f000 b8d9 	b.w	8082468 <_ZN7TwoWire4lockEv>

080822b6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80822b6:	b510      	push	{r4, lr}
 80822b8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80822ba:	6001      	str	r1, [r0, #0]
 80822bc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 80822be:	b10a      	cbz	r2, 80822c4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80822c0:	f7ff fff6 	bl	80822b0 <_ZN9FuelGauge4lockEv>
    }
}
 80822c4:	4620      	mov	r0, r4
 80822c6:	bd10      	pop	{r4, pc}

080822c8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 80822c8:	b538      	push	{r3, r4, r5, lr}
 80822ca:	4604      	mov	r4, r0
 80822cc:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80822ce:	f000 fee5 	bl	808309c <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 80822d2:	462a      	mov	r2, r5
 80822d4:	4601      	mov	r1, r0
 80822d6:	4620      	mov	r0, r4
 80822d8:	f7ff ffed 	bl	80822b6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80822dc:	4620      	mov	r0, r4
 80822de:	bd38      	pop	{r3, r4, r5, pc}

080822e0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80822e0:	6800      	ldr	r0, [r0, #0]
 80822e2:	f000 b8ca 	b.w	808247a <_ZN7TwoWire6unlockEv>

080822e6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80822e6:	b510      	push	{r4, lr}
{
    if (lock_) {
 80822e8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80822ea:	4604      	mov	r4, r0
{
    if (lock_) {
 80822ec:	b10b      	cbz	r3, 80822f2 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80822ee:	f7ff fff7 	bl	80822e0 <_ZN9FuelGauge6unlockEv>
    }
}
 80822f2:	4620      	mov	r0, r4
 80822f4:	bd10      	pop	{r4, pc}

080822f6 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80822f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80822f8:	4604      	mov	r4, r0
 80822fa:	460f      	mov	r7, r1
 80822fc:	4616      	mov	r6, r2
 80822fe:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8082300:	f7ff ffd6 	bl	80822b0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082304:	6820      	ldr	r0, [r4, #0]
 8082306:	2136      	movs	r1, #54	; 0x36
 8082308:	f000 f8a0 	bl	808244c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808230c:	6820      	ldr	r0, [r4, #0]
 808230e:	4639      	mov	r1, r7
 8082310:	6803      	ldr	r3, [r0, #0]
 8082312:	689b      	ldr	r3, [r3, #8]
 8082314:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082316:	2101      	movs	r1, #1
 8082318:	6820      	ldr	r0, [r4, #0]
 808231a:	f000 f89a 	bl	8082452 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808231e:	2202      	movs	r2, #2
 8082320:	2136      	movs	r1, #54	; 0x36
 8082322:	2301      	movs	r3, #1
 8082324:	6820      	ldr	r0, [r4, #0]
 8082326:	f000 f888 	bl	808243a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808232a:	6820      	ldr	r0, [r4, #0]
 808232c:	6803      	ldr	r3, [r0, #0]
 808232e:	695b      	ldr	r3, [r3, #20]
 8082330:	4798      	blx	r3
 8082332:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8082334:	6820      	ldr	r0, [r4, #0]
 8082336:	6803      	ldr	r3, [r0, #0]
 8082338:	695b      	ldr	r3, [r3, #20]
 808233a:	4798      	blx	r3
 808233c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808233e:	4620      	mov	r0, r4
}
 8082340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8082344:	f7ff bfcc 	b.w	80822e0 <_ZN9FuelGauge6unlockEv>

08082348 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8082348:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808234a:	2200      	movs	r2, #0
	byte LSB = 0;
 808234c:	ab02      	add	r3, sp, #8
 808234e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8082352:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8082356:	2104      	movs	r1, #4
 8082358:	f10d 0206 	add.w	r2, sp, #6
 808235c:	f7ff ffcb 	bl	80822f6 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8082360:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082364:	f001 f9a4 	bl	80836b0 <__aeabi_i2d>
 8082368:	2200      	movs	r2, #0
 808236a:	4b08      	ldr	r3, [pc, #32]	; (808238c <_ZN9FuelGauge6getSoCEv+0x44>)
 808236c:	f001 fa06 	bl	808377c <__aeabi_dmul>
 8082370:	f001 fc3e 	bl	8083bf0 <__aeabi_d2f>
 8082374:	4604      	mov	r4, r0
 8082376:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808237a:	f001 fd43 	bl	8083e04 <__aeabi_i2f>
 808237e:	4601      	mov	r1, r0
 8082380:	4620      	mov	r0, r4
 8082382:	f001 fc8b 	bl	8083c9c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8082386:	b002      	add	sp, #8
 8082388:	bd10      	pop	{r4, pc}
 808238a:	bf00      	nop
 808238c:	3f700000 	.word	0x3f700000

08082390 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082390:	4770      	bx	lr

08082392 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082394:	4606      	mov	r6, r0
 8082396:	4615      	mov	r5, r2
 8082398:	460c      	mov	r4, r1
 808239a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808239c:	42bc      	cmp	r4, r7
 808239e:	d006      	beq.n	80823ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80823a0:	6833      	ldr	r3, [r6, #0]
 80823a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80823a6:	689b      	ldr	r3, [r3, #8]
 80823a8:	4630      	mov	r0, r6
 80823aa:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80823ac:	e7f6      	b.n	808239c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80823ae:	4628      	mov	r0, r5
 80823b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823b2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80823b2:	2200      	movs	r2, #0
 80823b4:	7c00      	ldrb	r0, [r0, #16]
 80823b6:	f7ff b91d 	b.w	80815f4 <HAL_I2C_Write_Data>

080823ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80823ba:	2100      	movs	r1, #0
 80823bc:	7c00      	ldrb	r0, [r0, #16]
 80823be:	f7ff b921 	b.w	8081604 <HAL_I2C_Available_Data>

080823c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80823c2:	2100      	movs	r1, #0
 80823c4:	7c00      	ldrb	r0, [r0, #16]
 80823c6:	f7ff b925 	b.w	8081614 <HAL_I2C_Read_Data>

080823ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80823ca:	2100      	movs	r1, #0
 80823cc:	7c00      	ldrb	r0, [r0, #16]
 80823ce:	f7ff b929 	b.w	8081624 <HAL_I2C_Peek_Data>

080823d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80823d2:	2100      	movs	r1, #0
 80823d4:	7c00      	ldrb	r0, [r0, #16]
 80823d6:	f7ff b92d 	b.w	8081634 <HAL_I2C_Flush_Data>

080823da <_ZN7TwoWireD0Ev>:
 80823da:	b510      	push	{r4, lr}
 80823dc:	4604      	mov	r4, r0
 80823de:	2114      	movs	r1, #20
 80823e0:	f000 fec7 	bl	8083172 <_ZdlPvj>
 80823e4:	4620      	mov	r0, r4
 80823e6:	bd10      	pop	{r4, pc}

080823e8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80823e8:	b510      	push	{r4, lr}
 80823ea:	4604      	mov	r4, r0
 80823ec:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80823ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80823f2:	60a3      	str	r3, [r4, #8]
 80823f4:	4b04      	ldr	r3, [pc, #16]	; (8082408 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80823f6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80823f8:	7420      	strb	r0, [r4, #16]
 80823fa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80823fc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80823fe:	f7ff f929 	bl	8081654 <HAL_I2C_Init>

}
 8082402:	4620      	mov	r0, r4
 8082404:	bd10      	pop	{r4, pc}
 8082406:	bf00      	nop
 8082408:	08085210 	.word	0x08085210

0808240c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808240c:	2300      	movs	r3, #0
 808240e:	461a      	mov	r2, r3
 8082410:	4619      	mov	r1, r3
 8082412:	7c00      	ldrb	r0, [r0, #16]
 8082414:	f7ff b8ce 	b.w	80815b4 <HAL_I2C_Begin>

08082418 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082418:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808241a:	2400      	movs	r4, #0
 808241c:	7c00      	ldrb	r0, [r0, #16]
 808241e:	9400      	str	r4, [sp, #0]
 8082420:	f7ff f8d0 	bl	80815c4 <HAL_I2C_Request_Data>
  return result;
}
 8082424:	b2c0      	uxtb	r0, r0
 8082426:	b002      	add	sp, #8
 8082428:	bd10      	pop	{r4, pc}

0808242a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808242a:	2301      	movs	r3, #1
 808242c:	f7ff bff4 	b.w	8082418 <_ZN7TwoWire11requestFromEhhh>

08082430 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8082430:	2301      	movs	r3, #1
 8082432:	b2d2      	uxtb	r2, r2
 8082434:	b2c9      	uxtb	r1, r1
 8082436:	f7ff bfef 	b.w	8082418 <_ZN7TwoWire11requestFromEhhh>

0808243a <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808243a:	b2db      	uxtb	r3, r3
 808243c:	b2d2      	uxtb	r2, r2
 808243e:	b2c9      	uxtb	r1, r1
 8082440:	f7ff bfea 	b.w	8082418 <_ZN7TwoWire11requestFromEhhh>

08082444 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082444:	2200      	movs	r2, #0
 8082446:	7c00      	ldrb	r0, [r0, #16]
 8082448:	f7ff b8c4 	b.w	80815d4 <HAL_I2C_Begin_Transmission>

0808244c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808244c:	b2c9      	uxtb	r1, r1
 808244e:	f7ff bff9 	b.w	8082444 <_ZN7TwoWire17beginTransmissionEh>

08082452 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082452:	2200      	movs	r2, #0
 8082454:	7c00      	ldrb	r0, [r0, #16]
 8082456:	f7ff b8c5 	b.w	80815e4 <HAL_I2C_End_Transmission>

0808245a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808245a:	2101      	movs	r1, #1
 808245c:	f7ff bff9 	b.w	8082452 <_ZN7TwoWire15endTransmissionEh>

08082460 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082460:	2100      	movs	r1, #0
 8082462:	7c00      	ldrb	r0, [r0, #16]
 8082464:	f7ff b8ee 	b.w	8081644 <HAL_I2C_Is_Enabled>

08082468 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082468:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808246a:	2100      	movs	r1, #0
 808246c:	7c00      	ldrb	r0, [r0, #16]
 808246e:	f7ff f8f9 	bl	8081664 <HAL_I2C_Acquire>
}
 8082472:	fab0 f080 	clz	r0, r0
 8082476:	0940      	lsrs	r0, r0, #5
 8082478:	bd08      	pop	{r3, pc}

0808247a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808247a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808247c:	2100      	movs	r1, #0
 808247e:	7c00      	ldrb	r0, [r0, #16]
 8082480:	f7ff f8f8 	bl	8081674 <HAL_I2C_Release>
}
 8082484:	fab0 f080 	clz	r0, r0
 8082488:	0940      	lsrs	r0, r0, #5
 808248a:	bd08      	pop	{r3, pc}

0808248c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808248c:	4700      	bx	r0
	...

08082490 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082492:	461c      	mov	r4, r3
 8082494:	b085      	sub	sp, #20
 8082496:	460e      	mov	r6, r1
 8082498:	4617      	mov	r7, r2
 808249a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 808249c:	f7ff f87a 	bl	8081594 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80824a0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80824a2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80824a4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80824a8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80824aa:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80824ae:	bfb4      	ite	lt
 80824b0:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80824b2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80824b6:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80824b8:	bfa4      	itt	ge
 80824ba:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80824be:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80824c0:	9300      	str	r3, [sp, #0]
 80824c2:	4906      	ldr	r1, [pc, #24]	; (80824dc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80824c4:	463b      	mov	r3, r7
 80824c6:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80824c8:	bfa8      	it	ge
 80824ca:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80824ce:	f7ff f859 	bl	8081584 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80824d2:	fab0 f080 	clz	r0, r0
 80824d6:	0940      	lsrs	r0, r0, #5
 80824d8:	b005      	add	sp, #20
 80824da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80824dc:	0808248d 	.word	0x0808248d

080824e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80824e0:	4770      	bx	lr

080824e2 <_ZN9IPAddressD0Ev>:
 80824e2:	b510      	push	{r4, lr}
 80824e4:	4604      	mov	r4, r0
 80824e6:	2108      	movs	r1, #8
 80824e8:	f000 fe43 	bl	8083172 <_ZdlPvj>
 80824ec:	4620      	mov	r0, r4
 80824ee:	bd10      	pop	{r4, pc}

080824f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80824f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80824f2:	460f      	mov	r7, r1
 80824f4:	f100 0608 	add.w	r6, r0, #8
 80824f8:	1d05      	adds	r5, r0, #4
 80824fa:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80824fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082500:	220a      	movs	r2, #10
 8082502:	4638      	mov	r0, r7
 8082504:	f000 f963 	bl	80827ce <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082508:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808250a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808250c:	d007      	beq.n	808251e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808250e:	2c00      	cmp	r4, #0
 8082510:	d0f4      	beq.n	80824fc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082512:	212e      	movs	r1, #46	; 0x2e
 8082514:	4638      	mov	r0, r7
 8082516:	f000 f917 	bl	8082748 <_ZN5Print5printEc>
 808251a:	4404      	add	r4, r0
 808251c:	e7ee      	b.n	80824fc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808251e:	4620      	mov	r0, r4
 8082520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082524 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082524:	4a02      	ldr	r2, [pc, #8]	; (8082530 <_ZN9IPAddressC1Ev+0xc>)
 8082526:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082528:	2200      	movs	r2, #0
 808252a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808252c:	4770      	bx	lr
 808252e:	bf00      	nop
 8082530:	08085238 	.word	0x08085238

08082534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082534:	4a02      	ldr	r2, [pc, #8]	; (8082540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082536:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082538:	680a      	ldr	r2, [r1, #0]
 808253a:	6042      	str	r2, [r0, #4]
}
 808253c:	4770      	bx	lr
 808253e:	bf00      	nop
 8082540:	08085238 	.word	0x08085238

08082544 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082544:	4a01      	ldr	r2, [pc, #4]	; (808254c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082546:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082548:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808254a:	4770      	bx	lr
 808254c:	08085238 	.word	0x08085238

08082550 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082550:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082552:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082556:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808255a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808255e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082562:	6041      	str	r1, [r0, #4]
 8082564:	bd10      	pop	{r4, pc}
	...

08082568 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808256a:	4d04      	ldr	r5, [pc, #16]	; (808257c <_ZN9IPAddressC1Ehhhh+0x14>)
 808256c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808256e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082572:	9500      	str	r5, [sp, #0]
 8082574:	f7ff ffec 	bl	8082550 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082578:	b003      	add	sp, #12
 808257a:	bd30      	pop	{r4, r5, pc}
 808257c:	08085238 	.word	0x08085238

08082580 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082580:	4a01      	ldr	r2, [pc, #4]	; (8082588 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082582:	4b02      	ldr	r3, [pc, #8]	; (808258c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082584:	601a      	str	r2, [r3, #0]
 8082586:	4770      	bx	lr
 8082588:	080852ba 	.word	0x080852ba
 808258c:	200001f8 	.word	0x200001f8

08082590 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082590:	2300      	movs	r3, #0
 8082592:	461a      	mov	r2, r3
 8082594:	6840      	ldr	r0, [r0, #4]
 8082596:	f7ff b9a9 	b.w	80818ec <network_connect>

0808259a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808259a:	2200      	movs	r2, #0
 808259c:	2102      	movs	r1, #2
 808259e:	6840      	ldr	r0, [r0, #4]
 80825a0:	f7ff b9b4 	b.w	808190c <network_disconnect>

080825a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80825a4:	2200      	movs	r2, #0
 80825a6:	4611      	mov	r1, r2
 80825a8:	6840      	ldr	r0, [r0, #4]
 80825aa:	f7ff b9a7 	b.w	80818fc <network_connecting>

080825ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80825ae:	2200      	movs	r2, #0
 80825b0:	4611      	mov	r1, r2
 80825b2:	6840      	ldr	r0, [r0, #4]
 80825b4:	f7ff b9b2 	b.w	808191c <network_ready>

080825b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80825b8:	2300      	movs	r3, #0
 80825ba:	461a      	mov	r2, r3
 80825bc:	4619      	mov	r1, r3
 80825be:	6840      	ldr	r0, [r0, #4]
 80825c0:	f7ff b9b4 	b.w	808192c <network_on>

080825c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80825c4:	2300      	movs	r3, #0
 80825c6:	461a      	mov	r2, r3
 80825c8:	4619      	mov	r1, r3
 80825ca:	6840      	ldr	r0, [r0, #4]
 80825cc:	f7ff b9b6 	b.w	808193c <network_off>

080825d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80825d0:	2200      	movs	r2, #0
 80825d2:	f081 0101 	eor.w	r1, r1, #1
 80825d6:	6840      	ldr	r0, [r0, #4]
 80825d8:	f7ff b9b8 	b.w	808194c <network_listen>

080825dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80825dc:	2200      	movs	r2, #0
 80825de:	6840      	ldr	r0, [r0, #4]
 80825e0:	f7ff b9c4 	b.w	808196c <network_set_listen_timeout>

080825e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80825e4:	2200      	movs	r2, #0
 80825e6:	4611      	mov	r1, r2
 80825e8:	6840      	ldr	r0, [r0, #4]
 80825ea:	f7ff b9c7 	b.w	808197c <network_get_listen_timeout>

080825ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80825ee:	2200      	movs	r2, #0
 80825f0:	4611      	mov	r1, r2
 80825f2:	6840      	ldr	r0, [r0, #4]
 80825f4:	f7ff b9b2 	b.w	808195c <network_listening>

080825f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80825f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80825fa:	4617      	mov	r7, r2
 80825fc:	b087      	sub	sp, #28
 80825fe:	4605      	mov	r5, r0
    IPAddress addr;
 8082600:	a804      	add	r0, sp, #16
 8082602:	f7ff ff8f 	bl	8082524 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082606:	2600      	movs	r6, #0
 8082608:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808260a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808260c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082610:	f001 fffd 	bl	808460e <strlen>
 8082614:	4b0a      	ldr	r3, [pc, #40]	; (8082640 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082616:	9600      	str	r6, [sp, #0]
 8082618:	b281      	uxth	r1, r0
 808261a:	685b      	ldr	r3, [r3, #4]
 808261c:	4622      	mov	r2, r4
 808261e:	4638      	mov	r0, r7
 8082620:	f7fe fef0 	bl	8081404 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082624:	b120      	cbz	r0, 8082630 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082626:	4631      	mov	r1, r6
 8082628:	4628      	mov	r0, r5
 808262a:	f7ff ff8b 	bl	8082544 <_ZN9IPAddressC1Em>
 808262e:	e003      	b.n	8082638 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082630:	4621      	mov	r1, r4
 8082632:	4628      	mov	r0, r5
 8082634:	f7ff ff7e 	bl	8082534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082638:	4628      	mov	r0, r5
 808263a:	b007      	add	sp, #28
 808263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808263e:	bf00      	nop
 8082640:	200001c8 	.word	0x200001c8

08082644 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082644:	4b02      	ldr	r3, [pc, #8]	; (8082650 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082646:	4a03      	ldr	r2, [pc, #12]	; (8082654 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082648:	601a      	str	r2, [r3, #0]
 808264a:	2200      	movs	r2, #0
 808264c:	605a      	str	r2, [r3, #4]
 808264e:	4770      	bx	lr
 8082650:	200001fc 	.word	0x200001fc
 8082654:	0808532c 	.word	0x0808532c

08082658 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082658:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808265a:	f000 fd1f 	bl	808309c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808265e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8082662:	f7ff bf01 	b.w	8082468 <_ZN7TwoWire4lockEv>

08082666 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8082666:	b510      	push	{r4, lr}
 8082668:	4604      	mov	r4, r0
    lock_(_lock)
 808266a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808266c:	b109      	cbz	r1, 8082672 <_ZN4PMICC1Eb+0xc>
        lock();
 808266e:	f7ff fff3 	bl	8082658 <_ZN4PMIC4lockEv>
    }
}
 8082672:	4620      	mov	r0, r4
 8082674:	bd10      	pop	{r4, pc}

08082676 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082676:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082678:	f000 fd10 	bl	808309c <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808267c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082680:	f7ff befb 	b.w	808247a <_ZN7TwoWire6unlockEv>

08082684 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082684:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082686:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082688:	4604      	mov	r4, r0
{
    if (lock_) {
 808268a:	b10b      	cbz	r3, 8082690 <_ZN4PMICD1Ev+0xc>
        unlock();
 808268c:	f7ff fff3 	bl	8082676 <_ZN4PMIC6unlockEv>
    }
}
 8082690:	4620      	mov	r0, r4
 8082692:	bd10      	pop	{r4, pc}

08082694 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082694:	b510      	push	{r4, lr}
 8082696:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082698:	6800      	ldr	r0, [r0, #0]
 808269a:	f7ff ffec 	bl	8082676 <_ZN4PMIC6unlockEv>
 808269e:	4620      	mov	r0, r4
 80826a0:	bd10      	pop	{r4, pc}

080826a2 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80826a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80826a4:	ac02      	add	r4, sp, #8
 80826a6:	460d      	mov	r5, r1
 80826a8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80826ac:	f7ff ffd4 	bl	8082658 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80826b0:	f000 fcf4 	bl	808309c <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80826b4:	216b      	movs	r1, #107	; 0x6b
 80826b6:	f7ff fec9 	bl	808244c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80826ba:	f000 fcef 	bl	808309c <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80826be:	6803      	ldr	r3, [r0, #0]
 80826c0:	4629      	mov	r1, r5
 80826c2:	689b      	ldr	r3, [r3, #8]
 80826c4:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80826c6:	f000 fce9 	bl	808309c <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80826ca:	2101      	movs	r1, #1
 80826cc:	f7ff fec1 	bl	8082452 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80826d0:	f000 fce4 	bl	808309c <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80826d4:	2301      	movs	r3, #1
 80826d6:	461a      	mov	r2, r3
 80826d8:	216b      	movs	r1, #107	; 0x6b
 80826da:	f7ff feae 	bl	808243a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80826de:	f000 fcdd 	bl	808309c <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80826e2:	6803      	ldr	r3, [r0, #0]
 80826e4:	695b      	ldr	r3, [r3, #20]
 80826e6:	4798      	blx	r3
 80826e8:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80826ea:	4620      	mov	r0, r4
 80826ec:	f7ff ffd2 	bl	8082694 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80826f0:	b2e8      	uxtb	r0, r5
 80826f2:	b003      	add	sp, #12
 80826f4:	bd30      	pop	{r4, r5, pc}

080826f6 <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80826f6:	2108      	movs	r1, #8
 80826f8:	f7ff bfd3 	b.w	80826a2 <_ZN4PMIC12readRegisterEh>

080826fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80826fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80826fe:	4606      	mov	r6, r0
 8082700:	460d      	mov	r5, r1
 8082702:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082704:	2400      	movs	r4, #0
  while (size--) {
 8082706:	42bd      	cmp	r5, r7
 8082708:	d00c      	beq.n	8082724 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808270a:	6833      	ldr	r3, [r6, #0]
 808270c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082710:	689b      	ldr	r3, [r3, #8]
 8082712:	4630      	mov	r0, r6
 8082714:	4798      	blx	r3
     if (chunk>=0)
 8082716:	2800      	cmp	r0, #0
 8082718:	db01      	blt.n	808271e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808271a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808271c:	e7f3      	b.n	8082706 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808271e:	2c00      	cmp	r4, #0
 8082720:	bf08      	it	eq
 8082722:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082724:	4620      	mov	r0, r4
 8082726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082728 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082728:	b570      	push	{r4, r5, r6, lr}
 808272a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808272c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808272e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082730:	b149      	cbz	r1, 8082746 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082732:	f001 ff6c 	bl	808460e <strlen>
 8082736:	682b      	ldr	r3, [r5, #0]
 8082738:	4602      	mov	r2, r0
 808273a:	4621      	mov	r1, r4
 808273c:	4628      	mov	r0, r5
    }
 808273e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082742:	68db      	ldr	r3, [r3, #12]
 8082744:	4718      	bx	r3
    }
 8082746:	bd70      	pop	{r4, r5, r6, pc}

08082748 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082748:	6803      	ldr	r3, [r0, #0]
 808274a:	689b      	ldr	r3, [r3, #8]
 808274c:	4718      	bx	r3

0808274e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808274e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082750:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082752:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082754:	f7ff fff8 	bl	8082748 <_ZN5Print5printEc>
  n += print('\n');
 8082758:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808275a:	4604      	mov	r4, r0
  n += print('\n');
 808275c:	4628      	mov	r0, r5
 808275e:	f7ff fff3 	bl	8082748 <_ZN5Print5printEc>
  return n;
}
 8082762:	4420      	add	r0, r4
 8082764:	bd38      	pop	{r3, r4, r5, pc}

08082766 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082766:	b538      	push	{r3, r4, r5, lr}
 8082768:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808276a:	f7ff ffdd 	bl	8082728 <_ZN5Print5writeEPKc>
 808276e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082770:	4628      	mov	r0, r5
 8082772:	f7ff ffec 	bl	808274e <_ZN5Print7printlnEv>
  return n;
}
 8082776:	4420      	add	r0, r4
 8082778:	bd38      	pop	{r3, r4, r5, pc}

0808277a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808277a:	2a01      	cmp	r2, #1
 808277c:	bf98      	it	ls
 808277e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082780:	b530      	push	{r4, r5, lr}
 8082782:	460b      	mov	r3, r1
 8082784:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082786:	2100      	movs	r1, #0
 8082788:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808278c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082790:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082794:	fb05 3312 	mls	r3, r5, r2, r3
 8082798:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808279a:	2b09      	cmp	r3, #9
 808279c:	bf94      	ite	ls
 808279e:	3330      	addls	r3, #48	; 0x30
 80827a0:	3337      	addhi	r3, #55	; 0x37
 80827a2:	b2db      	uxtb	r3, r3
 80827a4:	4621      	mov	r1, r4
 80827a6:	f804 3901 	strb.w	r3, [r4], #-1
 80827aa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80827ac:	2d00      	cmp	r5, #0
 80827ae:	d1ef      	bne.n	8082790 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80827b0:	f7ff ffba 	bl	8082728 <_ZN5Print5writeEPKc>
}
 80827b4:	b00b      	add	sp, #44	; 0x2c
 80827b6:	bd30      	pop	{r4, r5, pc}

080827b8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80827b8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80827ba:	b922      	cbnz	r2, 80827c6 <_ZN5Print5printEmi+0xe>
 80827bc:	6803      	ldr	r3, [r0, #0]
 80827be:	b2c9      	uxtb	r1, r1
 80827c0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80827c2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80827c4:	4718      	bx	r3
  else return printNumber(n, base);
 80827c6:	b2d2      	uxtb	r2, r2
}
 80827c8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80827ca:	f7ff bfd6 	b.w	808277a <_ZN5Print11printNumberEmh>

080827ce <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80827ce:	f7ff bff3 	b.w	80827b8 <_ZN5Print5printEmi>

080827d2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80827d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80827d6:	4607      	mov	r7, r0
 80827d8:	460e      	mov	r6, r1
  if (base == 0) {
 80827da:	4615      	mov	r5, r2
 80827dc:	b92a      	cbnz	r2, 80827ea <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80827de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80827e2:	6803      	ldr	r3, [r0, #0]
 80827e4:	b2c9      	uxtb	r1, r1
 80827e6:	689b      	ldr	r3, [r3, #8]
 80827e8:	4718      	bx	r3
  } else if (base == 10) {
 80827ea:	2a0a      	cmp	r2, #10
 80827ec:	d102      	bne.n	80827f4 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80827ee:	2900      	cmp	r1, #0
 80827f0:	da01      	bge.n	80827f6 <_ZN5Print5printEli+0x24>
 80827f2:	e004      	b.n	80827fe <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80827f4:	b2d2      	uxtb	r2, r2
  }
}
 80827f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80827fa:	f7ff bfbe 	b.w	808277a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80827fe:	212d      	movs	r1, #45	; 0x2d
 8082800:	f7ff ffa2 	bl	8082748 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8082804:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082806:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8082808:	4271      	negs	r1, r6
 808280a:	4638      	mov	r0, r7
 808280c:	f7ff ffb5 	bl	808277a <_ZN5Print11printNumberEmh>
 8082810:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082816 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8082816:	f7ff bfdc 	b.w	80827d2 <_ZN5Print5printEli>

0808281a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808281a:	b510      	push	{r4, lr}
 808281c:	4604      	mov	r4, r0
 808281e:	f7fd fd7b 	bl	8080318 <_ZNSt14_Function_baseD1Ev>
 8082822:	4620      	mov	r0, r4
 8082824:	bd10      	pop	{r4, pc}
	...

08082828 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082828:	4803      	ldr	r0, [pc, #12]	; (8082838 <_GLOBAL__sub_I_RGB+0x10>)
 808282a:	2300      	movs	r3, #0
 808282c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808282e:	4a03      	ldr	r2, [pc, #12]	; (808283c <_GLOBAL__sub_I_RGB+0x14>)
 8082830:	4903      	ldr	r1, [pc, #12]	; (8082840 <_GLOBAL__sub_I_RGB+0x18>)
 8082832:	f000 bc99 	b.w	8083168 <__aeabi_atexit>
 8082836:	bf00      	nop
 8082838:	20000204 	.word	0x20000204
 808283c:	200000fc 	.word	0x200000fc
 8082840:	0808281b 	.word	0x0808281b

08082844 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082844:	4770      	bx	lr

08082846 <_ZN8SPIClassD0Ev>:
 8082846:	b510      	push	{r4, lr}
 8082848:	4604      	mov	r4, r0
 808284a:	2110      	movs	r1, #16
 808284c:	f000 fc91 	bl	8083172 <_ZdlPvj>
 8082850:	4620      	mov	r0, r4
 8082852:	bd10      	pop	{r4, pc}

08082854 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082854:	b570      	push	{r4, r5, r6, lr}
 8082856:	4604      	mov	r4, r0
 8082858:	460e      	mov	r6, r1
 808285a:	4b07      	ldr	r3, [pc, #28]	; (8082878 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808285c:	2500      	movs	r5, #0
 808285e:	6003      	str	r3, [r0, #0]
 8082860:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082864:	f7fe fe16 	bl	8081494 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082868:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808286a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808286c:	f7fe ff0a 	bl	8081684 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082870:	60a5      	str	r5, [r4, #8]
}
 8082872:	4620      	mov	r0, r4
 8082874:	bd70      	pop	{r4, r5, r6, pc}
 8082876:	bf00      	nop
 8082878:	08085360 	.word	0x08085360

0808287c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808287c:	7900      	ldrb	r0, [r0, #4]
 808287e:	f7fe bf09 	b.w	8081694 <HAL_SPI_Is_Enabled>

08082882 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082882:	b510      	push	{r4, lr}
 8082884:	4604      	mov	r4, r0
{
	free(buffer);
 8082886:	6800      	ldr	r0, [r0, #0]
 8082888:	f7ff f888 	bl	808199c <free>
}
 808288c:	4620      	mov	r0, r4
 808288e:	bd10      	pop	{r4, pc}

08082890 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082890:	b510      	push	{r4, lr}
 8082892:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082894:	6800      	ldr	r0, [r0, #0]
 8082896:	b108      	cbz	r0, 808289c <_ZN6String10invalidateEv+0xc>
 8082898:	f7ff f880 	bl	808199c <free>
	buffer = NULL;
 808289c:	2300      	movs	r3, #0
 808289e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80828a0:	60a3      	str	r3, [r4, #8]
 80828a2:	6063      	str	r3, [r4, #4]
 80828a4:	bd10      	pop	{r4, pc}

080828a6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80828a6:	b538      	push	{r3, r4, r5, lr}
 80828a8:	4604      	mov	r4, r0
 80828aa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80828ac:	6800      	ldr	r0, [r0, #0]
 80828ae:	3101      	adds	r1, #1
 80828b0:	f7ff f87c 	bl	80819ac <realloc>
	if (newbuffer) {
 80828b4:	b110      	cbz	r0, 80828bc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80828b6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80828ba:	2001      	movs	r0, #1
	}
	return 0;
}
 80828bc:	bd38      	pop	{r3, r4, r5, pc}

080828be <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80828be:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80828c0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80828c2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80828c4:	b113      	cbz	r3, 80828cc <_ZN6String7reserveEj+0xe>
 80828c6:	6843      	ldr	r3, [r0, #4]
 80828c8:	428b      	cmp	r3, r1
 80828ca:	d207      	bcs.n	80828dc <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80828cc:	4620      	mov	r0, r4
 80828ce:	f7ff ffea 	bl	80828a6 <_ZN6String12changeBufferEj>
 80828d2:	b120      	cbz	r0, 80828de <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80828d4:	68a3      	ldr	r3, [r4, #8]
 80828d6:	b90b      	cbnz	r3, 80828dc <_ZN6String7reserveEj+0x1e>
 80828d8:	6822      	ldr	r2, [r4, #0]
 80828da:	7013      	strb	r3, [r2, #0]
 80828dc:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80828de:	bd10      	pop	{r4, pc}

080828e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80828e0:	b570      	push	{r4, r5, r6, lr}
 80828e2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80828e4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80828e6:	4604      	mov	r4, r0
 80828e8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80828ea:	f7ff ffe8 	bl	80828be <_ZN6String7reserveEj>
 80828ee:	b918      	cbnz	r0, 80828f8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80828f0:	4620      	mov	r0, r4
 80828f2:	f7ff ffcd 	bl	8082890 <_ZN6String10invalidateEv>
		return *this;
 80828f6:	e009      	b.n	808290c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80828f8:	462a      	mov	r2, r5
 80828fa:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80828fc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80828fe:	6820      	ldr	r0, [r4, #0]
 8082900:	f001 fe0c 	bl	808451c <memcpy>
	buffer[len] = 0;
 8082904:	6822      	ldr	r2, [r4, #0]
 8082906:	68a3      	ldr	r3, [r4, #8]
 8082908:	2100      	movs	r1, #0
 808290a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808290c:	4620      	mov	r0, r4
 808290e:	bd70      	pop	{r4, r5, r6, pc}

08082910 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082910:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082912:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082914:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082916:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082918:	6043      	str	r3, [r0, #4]
	len = 0;
 808291a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808291c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808291e:	460d      	mov	r5, r1
 8082920:	b139      	cbz	r1, 8082932 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082922:	4608      	mov	r0, r1
 8082924:	f001 fe73 	bl	808460e <strlen>
 8082928:	4629      	mov	r1, r5
 808292a:	4602      	mov	r2, r0
 808292c:	4620      	mov	r0, r4
 808292e:	f7ff ffd7 	bl	80828e0 <_ZN6String4copyEPKcj>
}
 8082932:	4620      	mov	r0, r4
 8082934:	bd38      	pop	{r3, r4, r5, pc}

08082936 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082936:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082938:	b510      	push	{r4, lr}
 808293a:	460b      	mov	r3, r1
 808293c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808293e:	d007      	beq.n	8082950 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082940:	6809      	ldr	r1, [r1, #0]
 8082942:	b119      	cbz	r1, 808294c <_ZN6StringaSERKS_+0x16>
 8082944:	689a      	ldr	r2, [r3, #8]
 8082946:	f7ff ffcb 	bl	80828e0 <_ZN6String4copyEPKcj>
 808294a:	e001      	b.n	8082950 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808294c:	f7ff ffa0 	bl	8082890 <_ZN6String10invalidateEv>

	return *this;
}
 8082950:	4620      	mov	r0, r4
 8082952:	bd10      	pop	{r4, pc}

08082954 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082954:	b510      	push	{r4, lr}
 8082956:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082958:	2300      	movs	r3, #0
 808295a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808295c:	6043      	str	r3, [r0, #4]
	len = 0;
 808295e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082960:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082962:	f7ff ffe8 	bl	8082936 <_ZN6StringaSERKS_>
}
 8082966:	4620      	mov	r0, r4
 8082968:	bd10      	pop	{r4, pc}

0808296a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808296a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808296c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808296e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082970:	b912      	cbnz	r2, 8082978 <_ZNK6String6equalsEPKc+0xe>
 8082972:	b919      	cbnz	r1, 808297c <_ZNK6String6equalsEPKc+0x12>
 8082974:	2001      	movs	r0, #1
 8082976:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082978:	b911      	cbnz	r1, 8082980 <_ZNK6String6equalsEPKc+0x16>
 808297a:	6803      	ldr	r3, [r0, #0]
 808297c:	7818      	ldrb	r0, [r3, #0]
 808297e:	e002      	b.n	8082986 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082980:	6800      	ldr	r0, [r0, #0]
 8082982:	f001 fe16 	bl	80845b2 <strcmp>
 8082986:	fab0 f080 	clz	r0, r0
 808298a:	0940      	lsrs	r0, r0, #5
}
 808298c:	bd08      	pop	{r3, pc}

0808298e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 808298e:	b570      	push	{r4, r5, r6, lr}
 8082990:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082992:	b19a      	cbz	r2, 80829bc <_ZNK6String8getBytesEPhjj+0x2e>
 8082994:	b191      	cbz	r1, 80829bc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082996:	6885      	ldr	r5, [r0, #8]
 8082998:	429d      	cmp	r5, r3
 808299a:	d802      	bhi.n	80829a2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 808299c:	2300      	movs	r3, #0
 808299e:	700b      	strb	r3, [r1, #0]
		return;
 80829a0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80829a2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80829a4:	1aed      	subs	r5, r5, r3
 80829a6:	42ac      	cmp	r4, r5
 80829a8:	bf28      	it	cs
 80829aa:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80829ac:	6801      	ldr	r1, [r0, #0]
 80829ae:	4622      	mov	r2, r4
 80829b0:	4419      	add	r1, r3
 80829b2:	4630      	mov	r0, r6
 80829b4:	f001 fe48 	bl	8084648 <strncpy>
	buf[n] = 0;
 80829b8:	2300      	movs	r3, #0
 80829ba:	5533      	strb	r3, [r6, r4]
 80829bc:	bd70      	pop	{r4, r5, r6, pc}

080829be <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80829be:	4601      	mov	r1, r0
 80829c0:	2200      	movs	r2, #0
 80829c2:	208c      	movs	r0, #140	; 0x8c
 80829c4:	f7fe bd7e 	b.w	80814c4 <HAL_Core_System_Reset_Ex>

080829c8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80829c8:	2000      	movs	r0, #0
 80829ca:	f7ff bff8 	b.w	80829be <_ZN11SystemClass5resetEm>
	...

080829d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80829d0:	b510      	push	{r4, lr}
 80829d2:	4604      	mov	r4, r0
 80829d4:	4608      	mov	r0, r1
 80829d6:	4611      	mov	r1, r2
 80829d8:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80829da:	2300      	movs	r3, #0
 80829dc:	f7fe feea 	bl	80817b4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80829e0:	4b06      	ldr	r3, [pc, #24]	; (80829fc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80829e2:	2200      	movs	r2, #0
 80829e4:	701a      	strb	r2, [r3, #0]
 80829e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80829ea:	8058      	strh	r0, [r3, #2]
 80829ec:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80829ee:	681a      	ldr	r2, [r3, #0]
 80829f0:	889b      	ldrh	r3, [r3, #4]
 80829f2:	6022      	str	r2, [r4, #0]
 80829f4:	80a3      	strh	r3, [r4, #4]
}
 80829f6:	4620      	mov	r0, r4
 80829f8:	bd10      	pop	{r4, pc}
 80829fa:	bf00      	nop
 80829fc:	20000214 	.word	0x20000214

08082a00 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082a04:	4b03      	ldr	r3, [pc, #12]	; (8082a14 <_GLOBAL__sub_I_System+0x14>)
 8082a06:	2000      	movs	r0, #0
 8082a08:	7018      	strb	r0, [r3, #0]
 8082a0a:	8058      	strh	r0, [r3, #2]
 8082a0c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082a0e:	f7fe bec1 	b.w	8081794 <set_system_mode>
 8082a12:	bf00      	nop
 8082a14:	20000214 	.word	0x20000214

08082a18 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082a1a:	4b14      	ldr	r3, [pc, #80]	; (8082a6c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082a1c:	4f14      	ldr	r7, [pc, #80]	; (8082a70 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082a1e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082a20:	4b14      	ldr	r3, [pc, #80]	; (8082a74 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082a22:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082a24:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082a26:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082a28:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082a2a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082a2c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082a2e:	d01b      	beq.n	8082a68 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082a30:	a80a      	add	r0, sp, #40	; 0x28
 8082a32:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082a36:	f001 fc79 	bl	808432c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082a3a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082a3c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082a3e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082a40:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082a44:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082a4e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a52:	4c09      	ldr	r4, [pc, #36]	; (8082a78 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082a54:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a58:	ad01      	add	r5, sp, #4
 8082a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082a62:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082a64:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082a68:	b00b      	add	sp, #44	; 0x2c
 8082a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082a6c:	2000024c 	.word	0x2000024c
 8082a70:	20000248 	.word	0x20000248
 8082a74:	20000244 	.word	0x20000244
 8082a78:	2000021c 	.word	0x2000021c

08082a7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082a7c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082a7e:	2000      	movs	r0, #0
 8082a80:	f7fe ff24 	bl	80818cc <spark_sync_time_pending>
 8082a84:	b128      	cbz	r0, 8082a92 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082a86:	f7fe fef9 	bl	808187c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082a8a:	f080 0001 	eor.w	r0, r0, #1
 8082a8e:	b2c0      	uxtb	r0, r0
 8082a90:	bd08      	pop	{r3, pc}
 8082a92:	2001      	movs	r0, #1
    }
 8082a94:	bd08      	pop	{r3, pc}
	...

08082a98 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082a98:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082a9a:	4909      	ldr	r1, [pc, #36]	; (8082ac0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082a9c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082a9e:	f001 fba3 	bl	80841e8 <__aeabi_fcmplt>
 8082aa2:	b960      	cbnz	r0, 8082abe <_ZN9TimeClass4zoneEf+0x26>
 8082aa4:	4907      	ldr	r1, [pc, #28]	; (8082ac4 <_ZN9TimeClass4zoneEf+0x2c>)
 8082aa6:	4620      	mov	r0, r4
 8082aa8:	f001 fbbc 	bl	8084224 <__aeabi_fcmpgt>
 8082aac:	b938      	cbnz	r0, 8082abe <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082aae:	4906      	ldr	r1, [pc, #24]	; (8082ac8 <_ZN9TimeClass4zoneEf+0x30>)
 8082ab0:	4620      	mov	r0, r4
 8082ab2:	f001 f9fb 	bl	8083eac <__aeabi_fmul>
 8082ab6:	f001 fbbf 	bl	8084238 <__aeabi_f2iz>
 8082aba:	4b04      	ldr	r3, [pc, #16]	; (8082acc <_ZN9TimeClass4zoneEf+0x34>)
 8082abc:	6018      	str	r0, [r3, #0]
 8082abe:	bd10      	pop	{r4, pc}
 8082ac0:	c1400000 	.word	0xc1400000
 8082ac4:	41600000 	.word	0x41600000
 8082ac8:	45610000 	.word	0x45610000
 8082acc:	2000024c 	.word	0x2000024c

08082ad0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082ad2:	4b0e      	ldr	r3, [pc, #56]	; (8082b0c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082ad4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8082ad6:	681b      	ldr	r3, [r3, #0]
 8082ad8:	a802      	add	r0, sp, #8
 8082ada:	4419      	add	r1, r3
 8082adc:	4b0c      	ldr	r3, [pc, #48]	; (8082b10 <_ZN9TimeClass7timeStrEl+0x40>)
 8082ade:	681b      	ldr	r3, [r3, #0]
 8082ae0:	4419      	add	r1, r3
 8082ae2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8082ae6:	f001 fc21 	bl	808432c <localtime>
        char* ascstr = asctime(calendar_time);
 8082aea:	f001 fbcb 	bl	8084284 <asctime>
 8082aee:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8082af0:	f001 fd8d 	bl	808460e <strlen>
        ascstr[len-1] = 0; // remove final newline
 8082af4:	2300      	movs	r3, #0
 8082af6:	4428      	add	r0, r5
 8082af8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8082afc:	4629      	mov	r1, r5
 8082afe:	4620      	mov	r0, r4
 8082b00:	f7ff ff06 	bl	8082910 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8082b04:	4620      	mov	r0, r4
 8082b06:	b003      	add	sp, #12
 8082b08:	bd30      	pop	{r4, r5, pc}
 8082b0a:	bf00      	nop
 8082b0c:	2000024c 	.word	0x2000024c
 8082b10:	20000244 	.word	0x20000244

08082b14 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082b14:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082b16:	2000      	movs	r0, #0
 8082b18:	f7fe fcfc 	bl	8081514 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082b1c:	4604      	mov	r4, r0
 8082b1e:	b968      	cbnz	r0, 8082b3c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082b20:	f7fe fe30 	bl	8081784 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082b24:	2801      	cmp	r0, #1
 8082b26:	d10b      	bne.n	8082b40 <_ZN9TimeClass7isValidEv+0x2c>
 8082b28:	4620      	mov	r0, r4
 8082b2a:	f7fe fe63 	bl	80817f4 <system_thread_get_state>
 8082b2e:	b938      	cbnz	r0, 8082b40 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082b30:	f7ff ffa4 	bl	8082a7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082b34:	b930      	cbnz	r0, 8082b44 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082b36:	f7fe fe89 	bl	808184c <spark_process>
 8082b3a:	e7f9      	b.n	8082b30 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082b3c:	2001      	movs	r0, #1
 8082b3e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082b40:	2000      	movs	r0, #0
 8082b42:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082b44:	f7ff ff9a 	bl	8082a7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082b48:	2000      	movs	r0, #0
 8082b4a:	f7fe fce3 	bl	8081514 <HAL_RTC_Time_Is_Valid>
 8082b4e:	3000      	adds	r0, #0
 8082b50:	bf18      	it	ne
 8082b52:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082b54:	bd10      	pop	{r4, pc}

08082b56 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082b56:	b508      	push	{r3, lr}
    (void)isValid();
 8082b58:	f7ff ffdc 	bl	8082b14 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082b60:	f7fe bcd0 	b.w	8081504 <HAL_RTC_Get_UnixTime>

08082b64 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082b64:	b508      	push	{r3, lr}
	return hour(now());
 8082b66:	f7ff fff6 	bl	8082b56 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082b6a:	f7ff ff55 	bl	8082a18 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082b6e:	4b01      	ldr	r3, [pc, #4]	; (8082b74 <_ZN9TimeClass4hourEv+0x10>)
 8082b70:	6898      	ldr	r0, [r3, #8]
 8082b72:	bd08      	pop	{r3, pc}
 8082b74:	2000021c 	.word	0x2000021c

08082b78 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082b78:	b508      	push	{r3, lr}
	return minute(now());
 8082b7a:	f7ff ffec 	bl	8082b56 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082b7e:	f7ff ff4b 	bl	8082a18 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082b82:	4b01      	ldr	r3, [pc, #4]	; (8082b88 <_ZN9TimeClass6minuteEv+0x10>)
 8082b84:	6858      	ldr	r0, [r3, #4]
 8082b86:	bd08      	pop	{r3, pc}
 8082b88:	2000021c 	.word	0x2000021c

08082b8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082b8c:	4b02      	ldr	r3, [pc, #8]	; (8082b98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082b8e:	681a      	ldr	r2, [r3, #0]
 8082b90:	4b02      	ldr	r3, [pc, #8]	; (8082b9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082b92:	601a      	str	r2, [r3, #0]
 8082b94:	4770      	bx	lr
 8082b96:	bf00      	nop
 8082b98:	20000044 	.word	0x20000044
 8082b9c:	20000240 	.word	0x20000240

08082ba0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082ba0:	4770      	bx	lr

08082ba2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082ba2:	7441      	strb	r1, [r0, #17]
 8082ba4:	4770      	bx	lr

08082ba6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8082ba6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8082ba8:	7c00      	ldrb	r0, [r0, #16]
 8082baa:	f7fe fdb3 	bl	8081714 <HAL_USART_Available_Data_For_Write>
}
 8082bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bb2:	bd08      	pop	{r3, pc}

08082bb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082bb4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8082bb6:	7c00      	ldrb	r0, [r0, #16]
 8082bb8:	f7fe fd84 	bl	80816c4 <HAL_USART_Available_Data>
}
 8082bbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082bc0:	bd08      	pop	{r3, pc}

08082bc2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082bc2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082bc4:	7c00      	ldrb	r0, [r0, #16]
 8082bc6:	f7fe fd8d 	bl	80816e4 <HAL_USART_Peek_Data>
}
 8082bca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082bce:	bf28      	it	cs
 8082bd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082bd4:	bd08      	pop	{r3, pc}

08082bd6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8082bd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8082bd8:	7c00      	ldrb	r0, [r0, #16]
 8082bda:	f7fe fd7b 	bl	80816d4 <HAL_USART_Read_Data>
}
 8082bde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082be2:	bf28      	it	cs
 8082be4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082be8:	bd08      	pop	{r3, pc}

08082bea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8082bea:	7c00      	ldrb	r0, [r0, #16]
 8082bec:	f7fe bd82 	b.w	80816f4 <HAL_USART_Flush_Data>

08082bf0 <_ZN11USARTSerialD0Ev>:
 8082bf0:	b510      	push	{r4, lr}
 8082bf2:	4604      	mov	r4, r0
 8082bf4:	2114      	movs	r1, #20
 8082bf6:	f000 fabc 	bl	8083172 <_ZdlPvj>
 8082bfa:	4620      	mov	r0, r4
 8082bfc:	bd10      	pop	{r4, pc}

08082bfe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8082bfe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082c00:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8082c02:	4604      	mov	r4, r0
 8082c04:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8082c06:	b925      	cbnz	r5, 8082c12 <_ZN11USARTSerial5writeEh+0x14>
 8082c08:	7c00      	ldrb	r0, [r0, #16]
 8082c0a:	f7fe fd83 	bl	8081714 <HAL_USART_Available_Data_For_Write>
 8082c0e:	2800      	cmp	r0, #0
 8082c10:	dd05      	ble.n	8082c1e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082c12:	4631      	mov	r1, r6
 8082c14:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8082c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8082c1a:	f7fe bd4b 	b.w	80816b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 8082c1e:	4628      	mov	r0, r5
 8082c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08082c24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082c24:	b510      	push	{r4, lr}
 8082c26:	4604      	mov	r4, r0
 8082c28:	4608      	mov	r0, r1
 8082c2a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082c2c:	2200      	movs	r2, #0
 8082c2e:	6062      	str	r2, [r4, #4]
 8082c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082c34:	60a2      	str	r2, [r4, #8]
 8082c36:	4a05      	ldr	r2, [pc, #20]	; (8082c4c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8082c38:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8082c3a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8082c3c:	2201      	movs	r2, #1
 8082c3e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8082c40:	461a      	mov	r2, r3
 8082c42:	f7fe fd2f 	bl	80816a4 <HAL_USART_Init>
}
 8082c46:	4620      	mov	r0, r4
 8082c48:	bd10      	pop	{r4, pc}
 8082c4a:	bf00      	nop
 8082c4c:	08085398 	.word	0x08085398

08082c50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8082c50:	7c00      	ldrb	r0, [r0, #16]
 8082c52:	f7fe bd57 	b.w	8081704 <HAL_USART_Is_Enabled>
	...

08082c58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8082c58:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8082c5a:	4d0c      	ldr	r5, [pc, #48]	; (8082c8c <_Z22__fetch_global_Serial1v+0x34>)
 8082c5c:	6829      	ldr	r1, [r5, #0]
 8082c5e:	f011 0401 	ands.w	r4, r1, #1
 8082c62:	d111      	bne.n	8082c88 <_Z22__fetch_global_Serial1v+0x30>
 8082c64:	4628      	mov	r0, r5
 8082c66:	f7fd fa1e 	bl	80800a6 <__cxa_guard_acquire>
 8082c6a:	b168      	cbz	r0, 8082c88 <_Z22__fetch_global_Serial1v+0x30>
 8082c6c:	4a08      	ldr	r2, [pc, #32]	; (8082c90 <_Z22__fetch_global_Serial1v+0x38>)
 8082c6e:	4621      	mov	r1, r4
 8082c70:	4b08      	ldr	r3, [pc, #32]	; (8082c94 <_Z22__fetch_global_Serial1v+0x3c>)
 8082c72:	4809      	ldr	r0, [pc, #36]	; (8082c98 <_Z22__fetch_global_Serial1v+0x40>)
 8082c74:	f7ff ffd6 	bl	8082c24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082c78:	4628      	mov	r0, r5
 8082c7a:	f7fd fa19 	bl	80800b0 <__cxa_guard_release>
 8082c7e:	4a07      	ldr	r2, [pc, #28]	; (8082c9c <_Z22__fetch_global_Serial1v+0x44>)
 8082c80:	4907      	ldr	r1, [pc, #28]	; (8082ca0 <_Z22__fetch_global_Serial1v+0x48>)
 8082c82:	4805      	ldr	r0, [pc, #20]	; (8082c98 <_Z22__fetch_global_Serial1v+0x40>)
 8082c84:	f000 fa70 	bl	8083168 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082c88:	4803      	ldr	r0, [pc, #12]	; (8082c98 <_Z22__fetch_global_Serial1v+0x40>)
 8082c8a:	bd38      	pop	{r3, r4, r5, pc}
 8082c8c:	200002e8 	.word	0x200002e8
 8082c90:	200002ec 	.word	0x200002ec
 8082c94:	20000264 	.word	0x20000264
 8082c98:	20000250 	.word	0x20000250
 8082c9c:	200000fc 	.word	0x200000fc
 8082ca0:	08082ba1 	.word	0x08082ba1

08082ca4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082ca4:	7441      	strb	r1, [r0, #17]
 8082ca6:	4770      	bx	lr

08082ca8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082ca8:	4770      	bx	lr

08082caa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082caa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082cac:	2100      	movs	r1, #0
 8082cae:	7c00      	ldrb	r0, [r0, #16]
 8082cb0:	f7fe fd50 	bl	8081754 <HAL_USB_USART_Receive_Data>
}
 8082cb4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082cb8:	bf28      	it	cs
 8082cba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082cbe:	bd08      	pop	{r3, pc}

08082cc0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082cc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082cc2:	2101      	movs	r1, #1
 8082cc4:	7c00      	ldrb	r0, [r0, #16]
 8082cc6:	f7fe fd45 	bl	8081754 <HAL_USB_USART_Receive_Data>
}
 8082cca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082cce:	bf28      	it	cs
 8082cd0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8082cd4:	bd08      	pop	{r3, pc}

08082cd6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082cd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082cd8:	7c00      	ldrb	r0, [r0, #16]
 8082cda:	f7fe fd33 	bl	8081744 <HAL_USB_USART_Available_Data_For_Write>
}
 8082cde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082ce2:	bd08      	pop	{r3, pc}

08082ce4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082ce4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082ce6:	7c00      	ldrb	r0, [r0, #16]
 8082ce8:	f7fe fd24 	bl	8081734 <HAL_USB_USART_Available_Data>
}
 8082cec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082cf0:	bd08      	pop	{r3, pc}

08082cf2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082cf2:	7c00      	ldrb	r0, [r0, #16]
 8082cf4:	f7fe bd3e 	b.w	8081774 <HAL_USB_USART_Flush_Data>

08082cf8 <_ZN9USBSerialD0Ev>:
 8082cf8:	b510      	push	{r4, lr}
 8082cfa:	4604      	mov	r4, r0
 8082cfc:	2114      	movs	r1, #20
 8082cfe:	f000 fa38 	bl	8083172 <_ZdlPvj>
 8082d02:	4620      	mov	r0, r4
 8082d04:	bd10      	pop	{r4, pc}

08082d06 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082d06:	b538      	push	{r3, r4, r5, lr}
 8082d08:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082d0a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082d0c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082d0e:	f7fe fd19 	bl	8081744 <HAL_USB_USART_Available_Data_For_Write>
 8082d12:	2800      	cmp	r0, #0
 8082d14:	dc01      	bgt.n	8082d1a <_ZN9USBSerial5writeEh+0x14>
 8082d16:	7c60      	ldrb	r0, [r4, #17]
 8082d18:	b128      	cbz	r0, 8082d26 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082d1a:	4629      	mov	r1, r5
 8082d1c:	7c20      	ldrb	r0, [r4, #16]
 8082d1e:	f7fe fd21 	bl	8081764 <HAL_USB_USART_Send_Data>
 8082d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082d26:	bd38      	pop	{r3, r4, r5, pc}

08082d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082d28:	b510      	push	{r4, lr}
 8082d2a:	4604      	mov	r4, r0
 8082d2c:	2300      	movs	r3, #0
 8082d2e:	6063      	str	r3, [r4, #4]
 8082d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082d34:	60a3      	str	r3, [r4, #8]
 8082d36:	4b05      	ldr	r3, [pc, #20]	; (8082d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082d38:	4608      	mov	r0, r1
 8082d3a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082d3c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082d3e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082d40:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082d42:	4611      	mov	r1, r2
 8082d44:	f7fe fcee 	bl	8081724 <HAL_USB_USART_Init>
}
 8082d48:	4620      	mov	r0, r4
 8082d4a:	bd10      	pop	{r4, pc}
 8082d4c:	080853c8 	.word	0x080853c8

08082d50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8082d50:	b510      	push	{r4, lr}
 8082d52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082d54:	2214      	movs	r2, #20
 8082d56:	2100      	movs	r1, #0
 8082d58:	f001 fbeb 	bl	8084532 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082d5c:	4b05      	ldr	r3, [pc, #20]	; (8082d74 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082d5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8082d60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8082d62:	4b05      	ldr	r3, [pc, #20]	; (8082d78 <_Z19acquireSerialBufferv+0x28>)
 8082d64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082d66:	f240 1301 	movw	r3, #257	; 0x101
 8082d6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082d6c:	2381      	movs	r3, #129	; 0x81
 8082d6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082d70:	bd10      	pop	{r4, pc}
 8082d72:	bf00      	nop
 8082d74:	200003f5 	.word	0x200003f5
 8082d78:	20000374 	.word	0x20000374

08082d7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8082d7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082d7e:	4d0e      	ldr	r5, [pc, #56]	; (8082db8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082d80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082d82:	a801      	add	r0, sp, #4
 8082d84:	f7ff ffe4 	bl	8082d50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082d88:	6829      	ldr	r1, [r5, #0]
 8082d8a:	f011 0401 	ands.w	r4, r1, #1
 8082d8e:	d110      	bne.n	8082db2 <_Z16_fetch_usbserialv+0x36>
 8082d90:	4628      	mov	r0, r5
 8082d92:	f7fd f988 	bl	80800a6 <__cxa_guard_acquire>
 8082d96:	b160      	cbz	r0, 8082db2 <_Z16_fetch_usbserialv+0x36>
 8082d98:	aa01      	add	r2, sp, #4
 8082d9a:	4621      	mov	r1, r4
 8082d9c:	4807      	ldr	r0, [pc, #28]	; (8082dbc <_Z16_fetch_usbserialv+0x40>)
 8082d9e:	f7ff ffc3 	bl	8082d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082da2:	4628      	mov	r0, r5
 8082da4:	f7fd f984 	bl	80800b0 <__cxa_guard_release>
 8082da8:	4a05      	ldr	r2, [pc, #20]	; (8082dc0 <_Z16_fetch_usbserialv+0x44>)
 8082daa:	4906      	ldr	r1, [pc, #24]	; (8082dc4 <_Z16_fetch_usbserialv+0x48>)
 8082dac:	4803      	ldr	r0, [pc, #12]	; (8082dbc <_Z16_fetch_usbserialv+0x40>)
 8082dae:	f000 f9db 	bl	8083168 <__aeabi_atexit>
	return _usbserial;
}
 8082db2:	4802      	ldr	r0, [pc, #8]	; (8082dbc <_Z16_fetch_usbserialv+0x40>)
 8082db4:	b007      	add	sp, #28
 8082db6:	bd30      	pop	{r4, r5, pc}
 8082db8:	20000370 	.word	0x20000370
 8082dbc:	200004f8 	.word	0x200004f8
 8082dc0:	200000fc 	.word	0x200000fc
 8082dc4:	08082ca9 	.word	0x08082ca9

08082dc8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082dc8:	b510      	push	{r4, lr}
 8082dca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082dcc:	2214      	movs	r2, #20
 8082dce:	2100      	movs	r1, #0
 8082dd0:	f001 fbaf 	bl	8084532 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082dd4:	4b05      	ldr	r3, [pc, #20]	; (8082dec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082dd6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082dd8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8082dda:	4b05      	ldr	r3, [pc, #20]	; (8082df0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8082ddc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8082dde:	f240 1301 	movw	r3, #257	; 0x101
 8082de2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082de4:	2381      	movs	r3, #129	; 0x81
 8082de6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082de8:	bd10      	pop	{r4, pc}
 8082dea:	bf00      	nop
 8082dec:	200005a8 	.word	0x200005a8
 8082df0:	20000510 	.word	0x20000510

08082df4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082df4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082df6:	4c0e      	ldr	r4, [pc, #56]	; (8082e30 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082df8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082dfa:	a801      	add	r0, sp, #4
 8082dfc:	f7ff ffe4 	bl	8082dc8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082e00:	6823      	ldr	r3, [r4, #0]
 8082e02:	07db      	lsls	r3, r3, #31
 8082e04:	d410      	bmi.n	8082e28 <_Z17_fetch_usbserial1v+0x34>
 8082e06:	4620      	mov	r0, r4
 8082e08:	f7fd f94d 	bl	80800a6 <__cxa_guard_acquire>
 8082e0c:	b160      	cbz	r0, 8082e28 <_Z17_fetch_usbserial1v+0x34>
 8082e0e:	aa01      	add	r2, sp, #4
 8082e10:	2101      	movs	r1, #1
 8082e12:	4808      	ldr	r0, [pc, #32]	; (8082e34 <_Z17_fetch_usbserial1v+0x40>)
 8082e14:	f7ff ff88 	bl	8082d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082e18:	4620      	mov	r0, r4
 8082e1a:	f7fd f949 	bl	80800b0 <__cxa_guard_release>
 8082e1e:	4a06      	ldr	r2, [pc, #24]	; (8082e38 <_Z17_fetch_usbserial1v+0x44>)
 8082e20:	4906      	ldr	r1, [pc, #24]	; (8082e3c <_Z17_fetch_usbserial1v+0x48>)
 8082e22:	4804      	ldr	r0, [pc, #16]	; (8082e34 <_Z17_fetch_usbserial1v+0x40>)
 8082e24:	f000 f9a0 	bl	8083168 <__aeabi_atexit>
  return _usbserial1;
}
 8082e28:	4802      	ldr	r0, [pc, #8]	; (8082e34 <_Z17_fetch_usbserial1v+0x40>)
 8082e2a:	b006      	add	sp, #24
 8082e2c:	bd10      	pop	{r4, pc}
 8082e2e:	bf00      	nop
 8082e30:	2000050c 	.word	0x2000050c
 8082e34:	20000594 	.word	0x20000594
 8082e38:	200000fc 	.word	0x200000fc
 8082e3c:	08082ca9 	.word	0x08082ca9

08082e40 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8082e40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082e42:	4b18      	ldr	r3, [pc, #96]	; (8082ea4 <serialEventRun+0x64>)
 8082e44:	b133      	cbz	r3, 8082e54 <serialEventRun+0x14>
 8082e46:	f7ff ff99 	bl	8082d7c <_Z16_fetch_usbserialv>
 8082e4a:	6803      	ldr	r3, [r0, #0]
 8082e4c:	691b      	ldr	r3, [r3, #16]
 8082e4e:	4798      	blx	r3
 8082e50:	2800      	cmp	r0, #0
 8082e52:	dc1e      	bgt.n	8082e92 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8082e54:	4b14      	ldr	r3, [pc, #80]	; (8082ea8 <serialEventRun+0x68>)
 8082e56:	b133      	cbz	r3, 8082e66 <serialEventRun+0x26>
 8082e58:	f7ff fefe 	bl	8082c58 <_Z22__fetch_global_Serial1v>
 8082e5c:	6803      	ldr	r3, [r0, #0]
 8082e5e:	691b      	ldr	r3, [r3, #16]
 8082e60:	4798      	blx	r3
 8082e62:	2800      	cmp	r0, #0
 8082e64:	dc18      	bgt.n	8082e98 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8082e66:	4b11      	ldr	r3, [pc, #68]	; (8082eac <serialEventRun+0x6c>)
 8082e68:	b10b      	cbz	r3, 8082e6e <serialEventRun+0x2e>
 8082e6a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8082e6e:	4b10      	ldr	r3, [pc, #64]	; (8082eb0 <serialEventRun+0x70>)
 8082e70:	b10b      	cbz	r3, 8082e76 <serialEventRun+0x36>
 8082e72:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8082e76:	4b0f      	ldr	r3, [pc, #60]	; (8082eb4 <serialEventRun+0x74>)
 8082e78:	b10b      	cbz	r3, 8082e7e <serialEventRun+0x3e>
 8082e7a:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082e7e:	4b0e      	ldr	r3, [pc, #56]	; (8082eb8 <serialEventRun+0x78>)
 8082e80:	b17b      	cbz	r3, 8082ea2 <serialEventRun+0x62>
 8082e82:	f7ff ffb7 	bl	8082df4 <_Z17_fetch_usbserial1v>
 8082e86:	6803      	ldr	r3, [r0, #0]
 8082e88:	691b      	ldr	r3, [r3, #16]
 8082e8a:	4798      	blx	r3
 8082e8c:	2800      	cmp	r0, #0
 8082e8e:	dc06      	bgt.n	8082e9e <serialEventRun+0x5e>
 8082e90:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082e92:	f3af 8000 	nop.w
 8082e96:	e7dd      	b.n	8082e54 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082e98:	f3af 8000 	nop.w
 8082e9c:	e7e3      	b.n	8082e66 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8082e9e:	f3af 8000 	nop.w
 8082ea2:	bd08      	pop	{r3, pc}
	...

08082ebc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8082ebc:	b508      	push	{r3, lr}
	serialEventRun();
 8082ebe:	f7ff ffbf 	bl	8082e40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082ec2:	f7fe fb17 	bl	80814f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082ec6:	4b01      	ldr	r3, [pc, #4]	; (8082ecc <_post_loop+0x10>)
 8082ec8:	6018      	str	r0, [r3, #0]
 8082eca:	bd08      	pop	{r3, pc}
 8082ecc:	200006b4 	.word	0x200006b4

08082ed0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082ed0:	4802      	ldr	r0, [pc, #8]	; (8082edc <_Z33system_initialize_user_backup_ramv+0xc>)
 8082ed2:	4a03      	ldr	r2, [pc, #12]	; (8082ee0 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082ed4:	4903      	ldr	r1, [pc, #12]	; (8082ee4 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082ed6:	1a12      	subs	r2, r2, r0
 8082ed8:	f001 bb20 	b.w	808451c <memcpy>
 8082edc:	40024000 	.word	0x40024000
 8082ee0:	40024004 	.word	0x40024004
 8082ee4:	08085690 	.word	0x08085690

08082ee8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082ee8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082eea:	2300      	movs	r3, #0
 8082eec:	9300      	str	r3, [sp, #0]
 8082eee:	461a      	mov	r2, r3
 8082ef0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082ef4:	f7fe fc90 	bl	8081818 <system_ctrl_set_result>
}
 8082ef8:	b003      	add	sp, #12
 8082efa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082f00 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082f00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082f02:	8843      	ldrh	r3, [r0, #2]
 8082f04:	2b0a      	cmp	r3, #10
 8082f06:	d008      	beq.n	8082f1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082f08:	2b50      	cmp	r3, #80	; 0x50
 8082f0a:	d109      	bne.n	8082f20 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8082f0c:	4b09      	ldr	r3, [pc, #36]	; (8082f34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8082f0e:	681b      	ldr	r3, [r3, #0]
 8082f10:	b13b      	cbz	r3, 8082f22 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082f12:	b003      	add	sp, #12
 8082f14:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082f18:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8082f1a:	f7ff ffe5 	bl	8082ee8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8082f1e:	e006      	b.n	8082f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082f20:	2300      	movs	r3, #0
 8082f22:	9300      	str	r3, [sp, #0]
 8082f24:	461a      	mov	r2, r3
 8082f26:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082f2a:	f7fe fc75 	bl	8081818 <system_ctrl_set_result>
        break;
    }
}
 8082f2e:	b003      	add	sp, #12
 8082f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8082f34:	200006ac 	.word	0x200006ac

08082f38 <module_user_init_hook>:

void module_user_init_hook()
{
 8082f38:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082f3a:	4c10      	ldr	r4, [pc, #64]	; (8082f7c <module_user_init_hook+0x44>)
 8082f3c:	4d10      	ldr	r5, [pc, #64]	; (8082f80 <module_user_init_hook+0x48>)
 8082f3e:	6823      	ldr	r3, [r4, #0]
 8082f40:	42ab      	cmp	r3, r5
 8082f42:	4b10      	ldr	r3, [pc, #64]	; (8082f84 <module_user_init_hook+0x4c>)
 8082f44:	bf0c      	ite	eq
 8082f46:	2201      	moveq	r2, #1
 8082f48:	2200      	movne	r2, #0
 8082f4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082f4c:	d002      	beq.n	8082f54 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8082f4e:	f7ff ffbf 	bl	8082ed0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082f52:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082f54:	f7fe fac6 	bl	80814e4 <HAL_RNG_GetRandomNumber>
 8082f58:	4604      	mov	r4, r0
    srand(seed);
 8082f5a:	f001 faf3 	bl	8084544 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082f5e:	4b0a      	ldr	r3, [pc, #40]	; (8082f88 <module_user_init_hook+0x50>)
 8082f60:	b113      	cbz	r3, 8082f68 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8082f62:	4620      	mov	r0, r4
 8082f64:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082f68:	2100      	movs	r1, #0
 8082f6a:	4807      	ldr	r0, [pc, #28]	; (8082f88 <module_user_init_hook+0x50>)
 8082f6c:	f7fe fcb6 	bl	80818dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082f74:	2100      	movs	r1, #0
 8082f76:	4805      	ldr	r0, [pc, #20]	; (8082f8c <module_user_init_hook+0x54>)
 8082f78:	f7fe bc44 	b.w	8081804 <system_ctrl_set_app_request_handler>
 8082f7c:	40024000 	.word	0x40024000
 8082f80:	9a271c1e 	.word	0x9a271c1e
 8082f84:	200006b0 	.word	0x200006b0
 8082f88:	00000000 	.word	0x00000000
 8082f8c:	08082f01 	.word	0x08082f01

08082f90 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082f90:	b510      	push	{r4, lr}
 8082f92:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082f94:	480f      	ldr	r0, [pc, #60]	; (8082fd4 <pinAvailable+0x44>)
 8082f96:	f7ff fc71 	bl	808287c <_ZN8SPIClass9isEnabledEv>
 8082f9a:	b128      	cbz	r0, 8082fa8 <pinAvailable+0x18>
 8082f9c:	f1a4 030d 	sub.w	r3, r4, #13
 8082fa0:	2b02      	cmp	r3, #2
 8082fa2:	d801      	bhi.n	8082fa8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082fa4:	2000      	movs	r0, #0
 8082fa6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082fa8:	f000 f858 	bl	808305c <_Z19__fetch_global_Wirev>
 8082fac:	f7ff fa58 	bl	8082460 <_ZN7TwoWire9isEnabledEv>
 8082fb0:	b108      	cbz	r0, 8082fb6 <pinAvailable+0x26>
 8082fb2:	2c01      	cmp	r4, #1
 8082fb4:	d9f6      	bls.n	8082fa4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082fb6:	f7ff fe4f 	bl	8082c58 <_Z22__fetch_global_Serial1v>
 8082fba:	f7ff fe49 	bl	8082c50 <_ZN11USARTSerial9isEnabledEv>
 8082fbe:	b118      	cbz	r0, 8082fc8 <pinAvailable+0x38>
 8082fc0:	f1a4 0312 	sub.w	r3, r4, #18
 8082fc4:	2b01      	cmp	r3, #1
 8082fc6:	d9ed      	bls.n	8082fa4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082fc8:	2c2e      	cmp	r4, #46	; 0x2e
 8082fca:	bf8c      	ite	hi
 8082fcc:	2000      	movhi	r0, #0
 8082fce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082fd0:	bd10      	pop	{r4, pc}
 8082fd2:	bf00      	nop
 8082fd4:	200006f0 	.word	0x200006f0

08082fd8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082fd8:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082fda:	b538      	push	{r3, r4, r5, lr}
 8082fdc:	4604      	mov	r4, r0
 8082fde:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082fe0:	d80a      	bhi.n	8082ff8 <pinMode+0x20>
 8082fe2:	29ff      	cmp	r1, #255	; 0xff
 8082fe4:	d008      	beq.n	8082ff8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082fe6:	f7ff ffd3 	bl	8082f90 <pinAvailable>
 8082fea:	b128      	cbz	r0, 8082ff8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082fec:	4629      	mov	r1, r5
 8082fee:	4620      	mov	r0, r4
}
 8082ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082ff4:	f7fe baae 	b.w	8081554 <HAL_Pin_Mode>
 8082ff8:	bd38      	pop	{r3, r4, r5, pc}

08082ffa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082ffa:	b538      	push	{r3, r4, r5, lr}
 8082ffc:	4604      	mov	r4, r0
 8082ffe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083000:	f7fe fab0 	bl	8081564 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083004:	28ff      	cmp	r0, #255	; 0xff
 8083006:	d010      	beq.n	808302a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083008:	2806      	cmp	r0, #6
 808300a:	d804      	bhi.n	8083016 <digitalWrite+0x1c>
 808300c:	234d      	movs	r3, #77	; 0x4d
 808300e:	fa23 f000 	lsr.w	r0, r3, r0
 8083012:	07c3      	lsls	r3, r0, #31
 8083014:	d409      	bmi.n	808302a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083016:	4620      	mov	r0, r4
 8083018:	f7ff ffba 	bl	8082f90 <pinAvailable>
 808301c:	b128      	cbz	r0, 808302a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808301e:	4629      	mov	r1, r5
 8083020:	4620      	mov	r0, r4
}
 8083022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083026:	f7fe baa5 	b.w	8081574 <HAL_GPIO_Write>
 808302a:	bd38      	pop	{r3, r4, r5, pc}

0808302c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808302c:	b510      	push	{r4, lr}
 808302e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083030:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083032:	bf9c      	itt	ls
 8083034:	340a      	addls	r4, #10
 8083036:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083038:	4620      	mov	r0, r4
 808303a:	f7ff ffa9 	bl	8082f90 <pinAvailable>
 808303e:	b150      	cbz	r0, 8083056 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083040:	2103      	movs	r1, #3
 8083042:	4620      	mov	r0, r4
 8083044:	f7fe fa7e 	bl	8081544 <HAL_Validate_Pin_Function>
 8083048:	2803      	cmp	r0, #3
 808304a:	d104      	bne.n	8083056 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808304c:	4620      	mov	r0, r4
}
 808304e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083052:	f7fe baa7 	b.w	80815a4 <HAL_ADC_Read>
}
 8083056:	2000      	movs	r0, #0
 8083058:	bd10      	pop	{r4, pc}
	...

0808305c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808305c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808305e:	4d0b      	ldr	r5, [pc, #44]	; (808308c <_Z19__fetch_global_Wirev+0x30>)
 8083060:	6829      	ldr	r1, [r5, #0]
 8083062:	f011 0401 	ands.w	r4, r1, #1
 8083066:	d10f      	bne.n	8083088 <_Z19__fetch_global_Wirev+0x2c>
 8083068:	4628      	mov	r0, r5
 808306a:	f7fd f81c 	bl	80800a6 <__cxa_guard_acquire>
 808306e:	b158      	cbz	r0, 8083088 <_Z19__fetch_global_Wirev+0x2c>
 8083070:	4621      	mov	r1, r4
 8083072:	4807      	ldr	r0, [pc, #28]	; (8083090 <_Z19__fetch_global_Wirev+0x34>)
 8083074:	f7ff f9b8 	bl	80823e8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8083078:	4628      	mov	r0, r5
 808307a:	f7fd f819 	bl	80800b0 <__cxa_guard_release>
 808307e:	4a05      	ldr	r2, [pc, #20]	; (8083094 <_Z19__fetch_global_Wirev+0x38>)
 8083080:	4905      	ldr	r1, [pc, #20]	; (8083098 <_Z19__fetch_global_Wirev+0x3c>)
 8083082:	4803      	ldr	r0, [pc, #12]	; (8083090 <_Z19__fetch_global_Wirev+0x34>)
 8083084:	f000 f870 	bl	8083168 <__aeabi_atexit>
	return wire;
}
 8083088:	4801      	ldr	r0, [pc, #4]	; (8083090 <_Z19__fetch_global_Wirev+0x34>)
 808308a:	bd38      	pop	{r3, r4, r5, pc}
 808308c:	200006b8 	.word	0x200006b8
 8083090:	200006d0 	.word	0x200006d0
 8083094:	200000fc 	.word	0x200000fc
 8083098:	08082391 	.word	0x08082391

0808309c <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808309c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808309e:	4c0b      	ldr	r4, [pc, #44]	; (80830cc <_Z20__fetch_global_Wire3v+0x30>)
 80830a0:	6823      	ldr	r3, [r4, #0]
 80830a2:	07db      	lsls	r3, r3, #31
 80830a4:	d40f      	bmi.n	80830c6 <_Z20__fetch_global_Wire3v+0x2a>
 80830a6:	4620      	mov	r0, r4
 80830a8:	f7fc fffd 	bl	80800a6 <__cxa_guard_acquire>
 80830ac:	b158      	cbz	r0, 80830c6 <_Z20__fetch_global_Wire3v+0x2a>
 80830ae:	2102      	movs	r1, #2
 80830b0:	4807      	ldr	r0, [pc, #28]	; (80830d0 <_Z20__fetch_global_Wire3v+0x34>)
 80830b2:	f7ff f999 	bl	80823e8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80830b6:	4620      	mov	r0, r4
 80830b8:	f7fc fffa 	bl	80800b0 <__cxa_guard_release>
 80830bc:	4a05      	ldr	r2, [pc, #20]	; (80830d4 <_Z20__fetch_global_Wire3v+0x38>)
 80830be:	4906      	ldr	r1, [pc, #24]	; (80830d8 <_Z20__fetch_global_Wire3v+0x3c>)
 80830c0:	4803      	ldr	r0, [pc, #12]	; (80830d0 <_Z20__fetch_global_Wire3v+0x34>)
 80830c2:	f000 f851 	bl	8083168 <__aeabi_atexit>
	return wire;
}
 80830c6:	4802      	ldr	r0, [pc, #8]	; (80830d0 <_Z20__fetch_global_Wire3v+0x34>)
 80830c8:	bd10      	pop	{r4, pc}
 80830ca:	bf00      	nop
 80830cc:	200006e4 	.word	0x200006e4
 80830d0:	200006bc 	.word	0x200006bc
 80830d4:	200000fc 	.word	0x200000fc
 80830d8:	08082391 	.word	0x08082391

080830dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80830dc:	b513      	push	{r0, r1, r4, lr}
 80830de:	4c08      	ldr	r4, [pc, #32]	; (8083100 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80830e0:	2300      	movs	r3, #0
 80830e2:	461a      	mov	r2, r3
 80830e4:	4619      	mov	r1, r3
 80830e6:	9300      	str	r3, [sp, #0]
 80830e8:	4620      	mov	r0, r4
 80830ea:	f7ff fa3d 	bl	8082568 <_ZN9IPAddressC1Ehhhh>
 80830ee:	4620      	mov	r0, r4
 80830f0:	4a04      	ldr	r2, [pc, #16]	; (8083104 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80830f2:	4905      	ldr	r1, [pc, #20]	; (8083108 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80830f4:	b002      	add	sp, #8
 80830f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80830fa:	f000 b835 	b.w	8083168 <__aeabi_atexit>
 80830fe:	bf00      	nop
 8083100:	200006e8 	.word	0x200006e8
 8083104:	200000fc 	.word	0x200000fc
 8083108:	080824e1 	.word	0x080824e1

0808310c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808310c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808310e:	4e11      	ldr	r6, [pc, #68]	; (8083154 <_GLOBAL__sub_I_SPI+0x48>)
 8083110:	4d11      	ldr	r5, [pc, #68]	; (8083158 <_GLOBAL__sub_I_SPI+0x4c>)
 8083112:	4c12      	ldr	r4, [pc, #72]	; (808315c <_GLOBAL__sub_I_SPI+0x50>)
 8083114:	2100      	movs	r1, #0
 8083116:	4630      	mov	r0, r6
 8083118:	f7ff fb9c 	bl	8082854 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808311c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808311e:	4e10      	ldr	r6, [pc, #64]	; (8083160 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083120:	462a      	mov	r2, r5
 8083122:	4621      	mov	r1, r4
 8083124:	f000 f820 	bl	8083168 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083128:	2101      	movs	r1, #1
 808312a:	4630      	mov	r0, r6
 808312c:	f7ff fb92 	bl	8082854 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083130:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083132:	4e0c      	ldr	r6, [pc, #48]	; (8083164 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083134:	462a      	mov	r2, r5
 8083136:	4621      	mov	r1, r4
 8083138:	f000 f816 	bl	8083168 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808313c:	2102      	movs	r1, #2
 808313e:	4630      	mov	r0, r6
 8083140:	f7ff fb88 	bl	8082854 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083144:	462a      	mov	r2, r5
 8083146:	4621      	mov	r1, r4
 8083148:	4630      	mov	r0, r6
 808314a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808314e:	f000 b80b 	b.w	8083168 <__aeabi_atexit>
 8083152:	bf00      	nop
 8083154:	200006f0 	.word	0x200006f0
 8083158:	200000fc 	.word	0x200000fc
 808315c:	08082845 	.word	0x08082845
 8083160:	20000700 	.word	0x20000700
 8083164:	20000710 	.word	0x20000710

08083168 <__aeabi_atexit>:
 8083168:	460b      	mov	r3, r1
 808316a:	4601      	mov	r1, r0
 808316c:	4618      	mov	r0, r3
 808316e:	f001 b8c9 	b.w	8084304 <__cxa_atexit>

08083172 <_ZdlPvj>:
 8083172:	f7fc bf96 	b.w	80800a2 <_ZdlPv>

08083176 <_ZSt25__throw_bad_function_callv>:
 8083176:	b508      	push	{r3, lr}
 8083178:	f7fe fc38 	bl	80819ec <abort>

0808317c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808317c:	4b24      	ldr	r3, [pc, #144]	; (8083210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808317e:	681a      	ldr	r2, [r3, #0]
 8083180:	07d0      	lsls	r0, r2, #31
 8083182:	bf5c      	itt	pl
 8083184:	2201      	movpl	r2, #1
 8083186:	601a      	strpl	r2, [r3, #0]
 8083188:	4b22      	ldr	r3, [pc, #136]	; (8083214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808318a:	681a      	ldr	r2, [r3, #0]
 808318c:	07d1      	lsls	r1, r2, #31
 808318e:	bf5c      	itt	pl
 8083190:	2201      	movpl	r2, #1
 8083192:	601a      	strpl	r2, [r3, #0]
 8083194:	4b20      	ldr	r3, [pc, #128]	; (8083218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083196:	681a      	ldr	r2, [r3, #0]
 8083198:	07d2      	lsls	r2, r2, #31
 808319a:	bf5c      	itt	pl
 808319c:	2201      	movpl	r2, #1
 808319e:	601a      	strpl	r2, [r3, #0]
 80831a0:	4b1e      	ldr	r3, [pc, #120]	; (808321c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80831a2:	681a      	ldr	r2, [r3, #0]
 80831a4:	07d0      	lsls	r0, r2, #31
 80831a6:	bf5c      	itt	pl
 80831a8:	2201      	movpl	r2, #1
 80831aa:	601a      	strpl	r2, [r3, #0]
 80831ac:	4b1c      	ldr	r3, [pc, #112]	; (8083220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80831ae:	681a      	ldr	r2, [r3, #0]
 80831b0:	07d1      	lsls	r1, r2, #31
 80831b2:	bf5c      	itt	pl
 80831b4:	2201      	movpl	r2, #1
 80831b6:	601a      	strpl	r2, [r3, #0]
 80831b8:	4b1a      	ldr	r3, [pc, #104]	; (8083224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80831ba:	681a      	ldr	r2, [r3, #0]
 80831bc:	07d2      	lsls	r2, r2, #31
 80831be:	bf5c      	itt	pl
 80831c0:	2201      	movpl	r2, #1
 80831c2:	601a      	strpl	r2, [r3, #0]
 80831c4:	4b18      	ldr	r3, [pc, #96]	; (8083228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80831c6:	681a      	ldr	r2, [r3, #0]
 80831c8:	07d0      	lsls	r0, r2, #31
 80831ca:	bf5c      	itt	pl
 80831cc:	2201      	movpl	r2, #1
 80831ce:	601a      	strpl	r2, [r3, #0]
 80831d0:	4b16      	ldr	r3, [pc, #88]	; (808322c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80831d2:	681a      	ldr	r2, [r3, #0]
 80831d4:	07d1      	lsls	r1, r2, #31
 80831d6:	bf5c      	itt	pl
 80831d8:	2201      	movpl	r2, #1
 80831da:	601a      	strpl	r2, [r3, #0]
 80831dc:	4b14      	ldr	r3, [pc, #80]	; (8083230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80831de:	681a      	ldr	r2, [r3, #0]
 80831e0:	07d2      	lsls	r2, r2, #31
 80831e2:	bf5c      	itt	pl
 80831e4:	2201      	movpl	r2, #1
 80831e6:	601a      	strpl	r2, [r3, #0]
 80831e8:	4b12      	ldr	r3, [pc, #72]	; (8083234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80831ea:	681a      	ldr	r2, [r3, #0]
 80831ec:	07d0      	lsls	r0, r2, #31
 80831ee:	bf5c      	itt	pl
 80831f0:	2201      	movpl	r2, #1
 80831f2:	601a      	strpl	r2, [r3, #0]
 80831f4:	4b10      	ldr	r3, [pc, #64]	; (8083238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80831f6:	681a      	ldr	r2, [r3, #0]
 80831f8:	07d1      	lsls	r1, r2, #31
 80831fa:	bf5c      	itt	pl
 80831fc:	2201      	movpl	r2, #1
 80831fe:	601a      	strpl	r2, [r3, #0]
 8083200:	4b0e      	ldr	r3, [pc, #56]	; (808323c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083202:	681a      	ldr	r2, [r3, #0]
 8083204:	07d2      	lsls	r2, r2, #31
 8083206:	bf5c      	itt	pl
 8083208:	2201      	movpl	r2, #1
 808320a:	601a      	strpl	r2, [r3, #0]
 808320c:	4770      	bx	lr
 808320e:	bf00      	nop
 8083210:	2000074c 	.word	0x2000074c
 8083214:	20000748 	.word	0x20000748
 8083218:	20000744 	.word	0x20000744
 808321c:	20000740 	.word	0x20000740
 8083220:	2000073c 	.word	0x2000073c
 8083224:	20000738 	.word	0x20000738
 8083228:	20000734 	.word	0x20000734
 808322c:	20000730 	.word	0x20000730
 8083230:	2000072c 	.word	0x2000072c
 8083234:	20000728 	.word	0x20000728
 8083238:	20000724 	.word	0x20000724
 808323c:	20000720 	.word	0x20000720

08083240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083240:	4b18      	ldr	r3, [pc, #96]	; (80832a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083242:	681a      	ldr	r2, [r3, #0]
 8083244:	07d1      	lsls	r1, r2, #31
 8083246:	bf5c      	itt	pl
 8083248:	2201      	movpl	r2, #1
 808324a:	601a      	strpl	r2, [r3, #0]
 808324c:	4b16      	ldr	r3, [pc, #88]	; (80832a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808324e:	681a      	ldr	r2, [r3, #0]
 8083250:	07d2      	lsls	r2, r2, #31
 8083252:	bf5c      	itt	pl
 8083254:	2201      	movpl	r2, #1
 8083256:	601a      	strpl	r2, [r3, #0]
 8083258:	4b14      	ldr	r3, [pc, #80]	; (80832ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808325a:	681a      	ldr	r2, [r3, #0]
 808325c:	07d0      	lsls	r0, r2, #31
 808325e:	bf5c      	itt	pl
 8083260:	2201      	movpl	r2, #1
 8083262:	601a      	strpl	r2, [r3, #0]
 8083264:	4b12      	ldr	r3, [pc, #72]	; (80832b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083266:	681a      	ldr	r2, [r3, #0]
 8083268:	07d1      	lsls	r1, r2, #31
 808326a:	bf5c      	itt	pl
 808326c:	2201      	movpl	r2, #1
 808326e:	601a      	strpl	r2, [r3, #0]
 8083270:	4b10      	ldr	r3, [pc, #64]	; (80832b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083272:	681a      	ldr	r2, [r3, #0]
 8083274:	07d2      	lsls	r2, r2, #31
 8083276:	bf5c      	itt	pl
 8083278:	2201      	movpl	r2, #1
 808327a:	601a      	strpl	r2, [r3, #0]
 808327c:	4b0e      	ldr	r3, [pc, #56]	; (80832b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808327e:	681a      	ldr	r2, [r3, #0]
 8083280:	07d0      	lsls	r0, r2, #31
 8083282:	bf5c      	itt	pl
 8083284:	2201      	movpl	r2, #1
 8083286:	601a      	strpl	r2, [r3, #0]
 8083288:	4b0c      	ldr	r3, [pc, #48]	; (80832bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808328a:	681a      	ldr	r2, [r3, #0]
 808328c:	07d1      	lsls	r1, r2, #31
 808328e:	bf5c      	itt	pl
 8083290:	2201      	movpl	r2, #1
 8083292:	601a      	strpl	r2, [r3, #0]
 8083294:	4b0a      	ldr	r3, [pc, #40]	; (80832c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083296:	681a      	ldr	r2, [r3, #0]
 8083298:	07d2      	lsls	r2, r2, #31
 808329a:	bf5c      	itt	pl
 808329c:	2201      	movpl	r2, #1
 808329e:	601a      	strpl	r2, [r3, #0]
 80832a0:	4770      	bx	lr
 80832a2:	bf00      	nop
 80832a4:	2000076c 	.word	0x2000076c
 80832a8:	20000768 	.word	0x20000768
 80832ac:	20000764 	.word	0x20000764
 80832b0:	20000760 	.word	0x20000760
 80832b4:	2000075c 	.word	0x2000075c
 80832b8:	20000758 	.word	0x20000758
 80832bc:	20000754 	.word	0x20000754
 80832c0:	20000750 	.word	0x20000750

080832c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80832c4:	4b18      	ldr	r3, [pc, #96]	; (8083328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80832c6:	681a      	ldr	r2, [r3, #0]
 80832c8:	07d1      	lsls	r1, r2, #31
 80832ca:	bf5c      	itt	pl
 80832cc:	2201      	movpl	r2, #1
 80832ce:	601a      	strpl	r2, [r3, #0]
 80832d0:	4b16      	ldr	r3, [pc, #88]	; (808332c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80832d2:	681a      	ldr	r2, [r3, #0]
 80832d4:	07d2      	lsls	r2, r2, #31
 80832d6:	bf5c      	itt	pl
 80832d8:	2201      	movpl	r2, #1
 80832da:	601a      	strpl	r2, [r3, #0]
 80832dc:	4b14      	ldr	r3, [pc, #80]	; (8083330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80832de:	681a      	ldr	r2, [r3, #0]
 80832e0:	07d0      	lsls	r0, r2, #31
 80832e2:	bf5c      	itt	pl
 80832e4:	2201      	movpl	r2, #1
 80832e6:	601a      	strpl	r2, [r3, #0]
 80832e8:	4b12      	ldr	r3, [pc, #72]	; (8083334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80832ea:	681a      	ldr	r2, [r3, #0]
 80832ec:	07d1      	lsls	r1, r2, #31
 80832ee:	bf5c      	itt	pl
 80832f0:	2201      	movpl	r2, #1
 80832f2:	601a      	strpl	r2, [r3, #0]
 80832f4:	4b10      	ldr	r3, [pc, #64]	; (8083338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80832f6:	681a      	ldr	r2, [r3, #0]
 80832f8:	07d2      	lsls	r2, r2, #31
 80832fa:	bf5c      	itt	pl
 80832fc:	2201      	movpl	r2, #1
 80832fe:	601a      	strpl	r2, [r3, #0]
 8083300:	4b0e      	ldr	r3, [pc, #56]	; (808333c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083302:	681a      	ldr	r2, [r3, #0]
 8083304:	07d0      	lsls	r0, r2, #31
 8083306:	bf5c      	itt	pl
 8083308:	2201      	movpl	r2, #1
 808330a:	601a      	strpl	r2, [r3, #0]
 808330c:	4b0c      	ldr	r3, [pc, #48]	; (8083340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808330e:	681a      	ldr	r2, [r3, #0]
 8083310:	07d1      	lsls	r1, r2, #31
 8083312:	bf5c      	itt	pl
 8083314:	2201      	movpl	r2, #1
 8083316:	601a      	strpl	r2, [r3, #0]
 8083318:	4b0a      	ldr	r3, [pc, #40]	; (8083344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808331a:	681a      	ldr	r2, [r3, #0]
 808331c:	07d2      	lsls	r2, r2, #31
 808331e:	bf5c      	itt	pl
 8083320:	2201      	movpl	r2, #1
 8083322:	601a      	strpl	r2, [r3, #0]
 8083324:	4770      	bx	lr
 8083326:	bf00      	nop
 8083328:	2000078c 	.word	0x2000078c
 808332c:	20000788 	.word	0x20000788
 8083330:	20000784 	.word	0x20000784
 8083334:	20000780 	.word	0x20000780
 8083338:	2000077c 	.word	0x2000077c
 808333c:	20000778 	.word	0x20000778
 8083340:	20000774 	.word	0x20000774
 8083344:	20000770 	.word	0x20000770

08083348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083348:	4b24      	ldr	r3, [pc, #144]	; (80833dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808334a:	681a      	ldr	r2, [r3, #0]
 808334c:	07d0      	lsls	r0, r2, #31
 808334e:	bf5c      	itt	pl
 8083350:	2201      	movpl	r2, #1
 8083352:	601a      	strpl	r2, [r3, #0]
 8083354:	4b22      	ldr	r3, [pc, #136]	; (80833e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083356:	681a      	ldr	r2, [r3, #0]
 8083358:	07d1      	lsls	r1, r2, #31
 808335a:	bf5c      	itt	pl
 808335c:	2201      	movpl	r2, #1
 808335e:	601a      	strpl	r2, [r3, #0]
 8083360:	4b20      	ldr	r3, [pc, #128]	; (80833e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083362:	681a      	ldr	r2, [r3, #0]
 8083364:	07d2      	lsls	r2, r2, #31
 8083366:	bf5c      	itt	pl
 8083368:	2201      	movpl	r2, #1
 808336a:	601a      	strpl	r2, [r3, #0]
 808336c:	4b1e      	ldr	r3, [pc, #120]	; (80833e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808336e:	681a      	ldr	r2, [r3, #0]
 8083370:	07d0      	lsls	r0, r2, #31
 8083372:	bf5c      	itt	pl
 8083374:	2201      	movpl	r2, #1
 8083376:	601a      	strpl	r2, [r3, #0]
 8083378:	4b1c      	ldr	r3, [pc, #112]	; (80833ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808337a:	681a      	ldr	r2, [r3, #0]
 808337c:	07d1      	lsls	r1, r2, #31
 808337e:	bf5c      	itt	pl
 8083380:	2201      	movpl	r2, #1
 8083382:	601a      	strpl	r2, [r3, #0]
 8083384:	4b1a      	ldr	r3, [pc, #104]	; (80833f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083386:	681a      	ldr	r2, [r3, #0]
 8083388:	07d2      	lsls	r2, r2, #31
 808338a:	bf5c      	itt	pl
 808338c:	2201      	movpl	r2, #1
 808338e:	601a      	strpl	r2, [r3, #0]
 8083390:	4b18      	ldr	r3, [pc, #96]	; (80833f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083392:	681a      	ldr	r2, [r3, #0]
 8083394:	07d0      	lsls	r0, r2, #31
 8083396:	bf5c      	itt	pl
 8083398:	2201      	movpl	r2, #1
 808339a:	601a      	strpl	r2, [r3, #0]
 808339c:	4b16      	ldr	r3, [pc, #88]	; (80833f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808339e:	681a      	ldr	r2, [r3, #0]
 80833a0:	07d1      	lsls	r1, r2, #31
 80833a2:	bf5c      	itt	pl
 80833a4:	2201      	movpl	r2, #1
 80833a6:	601a      	strpl	r2, [r3, #0]
 80833a8:	4b14      	ldr	r3, [pc, #80]	; (80833fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80833aa:	681a      	ldr	r2, [r3, #0]
 80833ac:	07d2      	lsls	r2, r2, #31
 80833ae:	bf5c      	itt	pl
 80833b0:	2201      	movpl	r2, #1
 80833b2:	601a      	strpl	r2, [r3, #0]
 80833b4:	4b12      	ldr	r3, [pc, #72]	; (8083400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80833b6:	681a      	ldr	r2, [r3, #0]
 80833b8:	07d0      	lsls	r0, r2, #31
 80833ba:	bf5c      	itt	pl
 80833bc:	2201      	movpl	r2, #1
 80833be:	601a      	strpl	r2, [r3, #0]
 80833c0:	4b10      	ldr	r3, [pc, #64]	; (8083404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80833c2:	681a      	ldr	r2, [r3, #0]
 80833c4:	07d1      	lsls	r1, r2, #31
 80833c6:	bf5c      	itt	pl
 80833c8:	2201      	movpl	r2, #1
 80833ca:	601a      	strpl	r2, [r3, #0]
 80833cc:	4b0e      	ldr	r3, [pc, #56]	; (8083408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80833ce:	681a      	ldr	r2, [r3, #0]
 80833d0:	07d2      	lsls	r2, r2, #31
 80833d2:	bf5c      	itt	pl
 80833d4:	2201      	movpl	r2, #1
 80833d6:	601a      	strpl	r2, [r3, #0]
 80833d8:	4770      	bx	lr
 80833da:	bf00      	nop
 80833dc:	200007bc 	.word	0x200007bc
 80833e0:	200007b8 	.word	0x200007b8
 80833e4:	200007b4 	.word	0x200007b4
 80833e8:	200007b0 	.word	0x200007b0
 80833ec:	200007ac 	.word	0x200007ac
 80833f0:	200007a8 	.word	0x200007a8
 80833f4:	200007a4 	.word	0x200007a4
 80833f8:	200007a0 	.word	0x200007a0
 80833fc:	2000079c 	.word	0x2000079c
 8083400:	20000798 	.word	0x20000798
 8083404:	20000794 	.word	0x20000794
 8083408:	20000790 	.word	0x20000790

0808340c <__aeabi_drsub>:
 808340c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083410:	e002      	b.n	8083418 <__adddf3>
 8083412:	bf00      	nop

08083414 <__aeabi_dsub>:
 8083414:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083418 <__adddf3>:
 8083418:	b530      	push	{r4, r5, lr}
 808341a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808341e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083422:	ea94 0f05 	teq	r4, r5
 8083426:	bf08      	it	eq
 8083428:	ea90 0f02 	teqeq	r0, r2
 808342c:	bf1f      	itttt	ne
 808342e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083432:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083436:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808343a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808343e:	f000 80e2 	beq.w	8083606 <__adddf3+0x1ee>
 8083442:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083446:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808344a:	bfb8      	it	lt
 808344c:	426d      	neglt	r5, r5
 808344e:	dd0c      	ble.n	808346a <__adddf3+0x52>
 8083450:	442c      	add	r4, r5
 8083452:	ea80 0202 	eor.w	r2, r0, r2
 8083456:	ea81 0303 	eor.w	r3, r1, r3
 808345a:	ea82 0000 	eor.w	r0, r2, r0
 808345e:	ea83 0101 	eor.w	r1, r3, r1
 8083462:	ea80 0202 	eor.w	r2, r0, r2
 8083466:	ea81 0303 	eor.w	r3, r1, r3
 808346a:	2d36      	cmp	r5, #54	; 0x36
 808346c:	bf88      	it	hi
 808346e:	bd30      	pophi	{r4, r5, pc}
 8083470:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083474:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083478:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808347c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083480:	d002      	beq.n	8083488 <__adddf3+0x70>
 8083482:	4240      	negs	r0, r0
 8083484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083488:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808348c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083490:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083494:	d002      	beq.n	808349c <__adddf3+0x84>
 8083496:	4252      	negs	r2, r2
 8083498:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808349c:	ea94 0f05 	teq	r4, r5
 80834a0:	f000 80a7 	beq.w	80835f2 <__adddf3+0x1da>
 80834a4:	f1a4 0401 	sub.w	r4, r4, #1
 80834a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80834ac:	db0d      	blt.n	80834ca <__adddf3+0xb2>
 80834ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80834b2:	fa22 f205 	lsr.w	r2, r2, r5
 80834b6:	1880      	adds	r0, r0, r2
 80834b8:	f141 0100 	adc.w	r1, r1, #0
 80834bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80834c0:	1880      	adds	r0, r0, r2
 80834c2:	fa43 f305 	asr.w	r3, r3, r5
 80834c6:	4159      	adcs	r1, r3
 80834c8:	e00e      	b.n	80834e8 <__adddf3+0xd0>
 80834ca:	f1a5 0520 	sub.w	r5, r5, #32
 80834ce:	f10e 0e20 	add.w	lr, lr, #32
 80834d2:	2a01      	cmp	r2, #1
 80834d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80834d8:	bf28      	it	cs
 80834da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80834de:	fa43 f305 	asr.w	r3, r3, r5
 80834e2:	18c0      	adds	r0, r0, r3
 80834e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80834e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80834ec:	d507      	bpl.n	80834fe <__adddf3+0xe6>
 80834ee:	f04f 0e00 	mov.w	lr, #0
 80834f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80834f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80834fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80834fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083502:	d31b      	bcc.n	808353c <__adddf3+0x124>
 8083504:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083508:	d30c      	bcc.n	8083524 <__adddf3+0x10c>
 808350a:	0849      	lsrs	r1, r1, #1
 808350c:	ea5f 0030 	movs.w	r0, r0, rrx
 8083510:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083514:	f104 0401 	add.w	r4, r4, #1
 8083518:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808351c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083520:	f080 809a 	bcs.w	8083658 <__adddf3+0x240>
 8083524:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083528:	bf08      	it	eq
 808352a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808352e:	f150 0000 	adcs.w	r0, r0, #0
 8083532:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083536:	ea41 0105 	orr.w	r1, r1, r5
 808353a:	bd30      	pop	{r4, r5, pc}
 808353c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083540:	4140      	adcs	r0, r0
 8083542:	eb41 0101 	adc.w	r1, r1, r1
 8083546:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808354a:	f1a4 0401 	sub.w	r4, r4, #1
 808354e:	d1e9      	bne.n	8083524 <__adddf3+0x10c>
 8083550:	f091 0f00 	teq	r1, #0
 8083554:	bf04      	itt	eq
 8083556:	4601      	moveq	r1, r0
 8083558:	2000      	moveq	r0, #0
 808355a:	fab1 f381 	clz	r3, r1
 808355e:	bf08      	it	eq
 8083560:	3320      	addeq	r3, #32
 8083562:	f1a3 030b 	sub.w	r3, r3, #11
 8083566:	f1b3 0220 	subs.w	r2, r3, #32
 808356a:	da0c      	bge.n	8083586 <__adddf3+0x16e>
 808356c:	320c      	adds	r2, #12
 808356e:	dd08      	ble.n	8083582 <__adddf3+0x16a>
 8083570:	f102 0c14 	add.w	ip, r2, #20
 8083574:	f1c2 020c 	rsb	r2, r2, #12
 8083578:	fa01 f00c 	lsl.w	r0, r1, ip
 808357c:	fa21 f102 	lsr.w	r1, r1, r2
 8083580:	e00c      	b.n	808359c <__adddf3+0x184>
 8083582:	f102 0214 	add.w	r2, r2, #20
 8083586:	bfd8      	it	le
 8083588:	f1c2 0c20 	rsble	ip, r2, #32
 808358c:	fa01 f102 	lsl.w	r1, r1, r2
 8083590:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083594:	bfdc      	itt	le
 8083596:	ea41 010c 	orrle.w	r1, r1, ip
 808359a:	4090      	lslle	r0, r2
 808359c:	1ae4      	subs	r4, r4, r3
 808359e:	bfa2      	ittt	ge
 80835a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80835a4:	4329      	orrge	r1, r5
 80835a6:	bd30      	popge	{r4, r5, pc}
 80835a8:	ea6f 0404 	mvn.w	r4, r4
 80835ac:	3c1f      	subs	r4, #31
 80835ae:	da1c      	bge.n	80835ea <__adddf3+0x1d2>
 80835b0:	340c      	adds	r4, #12
 80835b2:	dc0e      	bgt.n	80835d2 <__adddf3+0x1ba>
 80835b4:	f104 0414 	add.w	r4, r4, #20
 80835b8:	f1c4 0220 	rsb	r2, r4, #32
 80835bc:	fa20 f004 	lsr.w	r0, r0, r4
 80835c0:	fa01 f302 	lsl.w	r3, r1, r2
 80835c4:	ea40 0003 	orr.w	r0, r0, r3
 80835c8:	fa21 f304 	lsr.w	r3, r1, r4
 80835cc:	ea45 0103 	orr.w	r1, r5, r3
 80835d0:	bd30      	pop	{r4, r5, pc}
 80835d2:	f1c4 040c 	rsb	r4, r4, #12
 80835d6:	f1c4 0220 	rsb	r2, r4, #32
 80835da:	fa20 f002 	lsr.w	r0, r0, r2
 80835de:	fa01 f304 	lsl.w	r3, r1, r4
 80835e2:	ea40 0003 	orr.w	r0, r0, r3
 80835e6:	4629      	mov	r1, r5
 80835e8:	bd30      	pop	{r4, r5, pc}
 80835ea:	fa21 f004 	lsr.w	r0, r1, r4
 80835ee:	4629      	mov	r1, r5
 80835f0:	bd30      	pop	{r4, r5, pc}
 80835f2:	f094 0f00 	teq	r4, #0
 80835f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80835fa:	bf06      	itte	eq
 80835fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083600:	3401      	addeq	r4, #1
 8083602:	3d01      	subne	r5, #1
 8083604:	e74e      	b.n	80834a4 <__adddf3+0x8c>
 8083606:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808360a:	bf18      	it	ne
 808360c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083610:	d029      	beq.n	8083666 <__adddf3+0x24e>
 8083612:	ea94 0f05 	teq	r4, r5
 8083616:	bf08      	it	eq
 8083618:	ea90 0f02 	teqeq	r0, r2
 808361c:	d005      	beq.n	808362a <__adddf3+0x212>
 808361e:	ea54 0c00 	orrs.w	ip, r4, r0
 8083622:	bf04      	itt	eq
 8083624:	4619      	moveq	r1, r3
 8083626:	4610      	moveq	r0, r2
 8083628:	bd30      	pop	{r4, r5, pc}
 808362a:	ea91 0f03 	teq	r1, r3
 808362e:	bf1e      	ittt	ne
 8083630:	2100      	movne	r1, #0
 8083632:	2000      	movne	r0, #0
 8083634:	bd30      	popne	{r4, r5, pc}
 8083636:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808363a:	d105      	bne.n	8083648 <__adddf3+0x230>
 808363c:	0040      	lsls	r0, r0, #1
 808363e:	4149      	adcs	r1, r1
 8083640:	bf28      	it	cs
 8083642:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083646:	bd30      	pop	{r4, r5, pc}
 8083648:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808364c:	bf3c      	itt	cc
 808364e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083652:	bd30      	popcc	{r4, r5, pc}
 8083654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083658:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808365c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083660:	f04f 0000 	mov.w	r0, #0
 8083664:	bd30      	pop	{r4, r5, pc}
 8083666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808366a:	bf1a      	itte	ne
 808366c:	4619      	movne	r1, r3
 808366e:	4610      	movne	r0, r2
 8083670:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083674:	bf1c      	itt	ne
 8083676:	460b      	movne	r3, r1
 8083678:	4602      	movne	r2, r0
 808367a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808367e:	bf06      	itte	eq
 8083680:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083684:	ea91 0f03 	teqeq	r1, r3
 8083688:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808368c:	bd30      	pop	{r4, r5, pc}
 808368e:	bf00      	nop

08083690 <__aeabi_ui2d>:
 8083690:	f090 0f00 	teq	r0, #0
 8083694:	bf04      	itt	eq
 8083696:	2100      	moveq	r1, #0
 8083698:	4770      	bxeq	lr
 808369a:	b530      	push	{r4, r5, lr}
 808369c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80836a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80836a4:	f04f 0500 	mov.w	r5, #0
 80836a8:	f04f 0100 	mov.w	r1, #0
 80836ac:	e750      	b.n	8083550 <__adddf3+0x138>
 80836ae:	bf00      	nop

080836b0 <__aeabi_i2d>:
 80836b0:	f090 0f00 	teq	r0, #0
 80836b4:	bf04      	itt	eq
 80836b6:	2100      	moveq	r1, #0
 80836b8:	4770      	bxeq	lr
 80836ba:	b530      	push	{r4, r5, lr}
 80836bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80836c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80836c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80836c8:	bf48      	it	mi
 80836ca:	4240      	negmi	r0, r0
 80836cc:	f04f 0100 	mov.w	r1, #0
 80836d0:	e73e      	b.n	8083550 <__adddf3+0x138>
 80836d2:	bf00      	nop

080836d4 <__aeabi_f2d>:
 80836d4:	0042      	lsls	r2, r0, #1
 80836d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80836da:	ea4f 0131 	mov.w	r1, r1, rrx
 80836de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80836e2:	bf1f      	itttt	ne
 80836e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80836e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80836ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80836f0:	4770      	bxne	lr
 80836f2:	f092 0f00 	teq	r2, #0
 80836f6:	bf14      	ite	ne
 80836f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80836fc:	4770      	bxeq	lr
 80836fe:	b530      	push	{r4, r5, lr}
 8083700:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083704:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808370c:	e720      	b.n	8083550 <__adddf3+0x138>
 808370e:	bf00      	nop

08083710 <__aeabi_ul2d>:
 8083710:	ea50 0201 	orrs.w	r2, r0, r1
 8083714:	bf08      	it	eq
 8083716:	4770      	bxeq	lr
 8083718:	b530      	push	{r4, r5, lr}
 808371a:	f04f 0500 	mov.w	r5, #0
 808371e:	e00a      	b.n	8083736 <__aeabi_l2d+0x16>

08083720 <__aeabi_l2d>:
 8083720:	ea50 0201 	orrs.w	r2, r0, r1
 8083724:	bf08      	it	eq
 8083726:	4770      	bxeq	lr
 8083728:	b530      	push	{r4, r5, lr}
 808372a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808372e:	d502      	bpl.n	8083736 <__aeabi_l2d+0x16>
 8083730:	4240      	negs	r0, r0
 8083732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083736:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808373a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808373e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083742:	f43f aedc 	beq.w	80834fe <__adddf3+0xe6>
 8083746:	f04f 0203 	mov.w	r2, #3
 808374a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808374e:	bf18      	it	ne
 8083750:	3203      	addne	r2, #3
 8083752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083756:	bf18      	it	ne
 8083758:	3203      	addne	r2, #3
 808375a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808375e:	f1c2 0320 	rsb	r3, r2, #32
 8083762:	fa00 fc03 	lsl.w	ip, r0, r3
 8083766:	fa20 f002 	lsr.w	r0, r0, r2
 808376a:	fa01 fe03 	lsl.w	lr, r1, r3
 808376e:	ea40 000e 	orr.w	r0, r0, lr
 8083772:	fa21 f102 	lsr.w	r1, r1, r2
 8083776:	4414      	add	r4, r2
 8083778:	e6c1      	b.n	80834fe <__adddf3+0xe6>
 808377a:	bf00      	nop

0808377c <__aeabi_dmul>:
 808377c:	b570      	push	{r4, r5, r6, lr}
 808377e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083782:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083786:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808378a:	bf1d      	ittte	ne
 808378c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083790:	ea94 0f0c 	teqne	r4, ip
 8083794:	ea95 0f0c 	teqne	r5, ip
 8083798:	f000 f8de 	bleq	8083958 <__aeabi_dmul+0x1dc>
 808379c:	442c      	add	r4, r5
 808379e:	ea81 0603 	eor.w	r6, r1, r3
 80837a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80837a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80837aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80837ae:	bf18      	it	ne
 80837b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80837b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80837b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80837bc:	d038      	beq.n	8083830 <__aeabi_dmul+0xb4>
 80837be:	fba0 ce02 	umull	ip, lr, r0, r2
 80837c2:	f04f 0500 	mov.w	r5, #0
 80837c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80837ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80837ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80837d2:	f04f 0600 	mov.w	r6, #0
 80837d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80837da:	f09c 0f00 	teq	ip, #0
 80837de:	bf18      	it	ne
 80837e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80837e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80837e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80837ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80837f0:	d204      	bcs.n	80837fc <__aeabi_dmul+0x80>
 80837f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80837f6:	416d      	adcs	r5, r5
 80837f8:	eb46 0606 	adc.w	r6, r6, r6
 80837fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083800:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083804:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083808:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808380c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083810:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083814:	bf88      	it	hi
 8083816:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808381a:	d81e      	bhi.n	808385a <__aeabi_dmul+0xde>
 808381c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083820:	bf08      	it	eq
 8083822:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083826:	f150 0000 	adcs.w	r0, r0, #0
 808382a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808382e:	bd70      	pop	{r4, r5, r6, pc}
 8083830:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083834:	ea46 0101 	orr.w	r1, r6, r1
 8083838:	ea40 0002 	orr.w	r0, r0, r2
 808383c:	ea81 0103 	eor.w	r1, r1, r3
 8083840:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083844:	bfc2      	ittt	gt
 8083846:	ebd4 050c 	rsbsgt	r5, r4, ip
 808384a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808384e:	bd70      	popgt	{r4, r5, r6, pc}
 8083850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083854:	f04f 0e00 	mov.w	lr, #0
 8083858:	3c01      	subs	r4, #1
 808385a:	f300 80ab 	bgt.w	80839b4 <__aeabi_dmul+0x238>
 808385e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083862:	bfde      	ittt	le
 8083864:	2000      	movle	r0, #0
 8083866:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808386a:	bd70      	pople	{r4, r5, r6, pc}
 808386c:	f1c4 0400 	rsb	r4, r4, #0
 8083870:	3c20      	subs	r4, #32
 8083872:	da35      	bge.n	80838e0 <__aeabi_dmul+0x164>
 8083874:	340c      	adds	r4, #12
 8083876:	dc1b      	bgt.n	80838b0 <__aeabi_dmul+0x134>
 8083878:	f104 0414 	add.w	r4, r4, #20
 808387c:	f1c4 0520 	rsb	r5, r4, #32
 8083880:	fa00 f305 	lsl.w	r3, r0, r5
 8083884:	fa20 f004 	lsr.w	r0, r0, r4
 8083888:	fa01 f205 	lsl.w	r2, r1, r5
 808388c:	ea40 0002 	orr.w	r0, r0, r2
 8083890:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083898:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808389c:	fa21 f604 	lsr.w	r6, r1, r4
 80838a0:	eb42 0106 	adc.w	r1, r2, r6
 80838a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80838a8:	bf08      	it	eq
 80838aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80838ae:	bd70      	pop	{r4, r5, r6, pc}
 80838b0:	f1c4 040c 	rsb	r4, r4, #12
 80838b4:	f1c4 0520 	rsb	r5, r4, #32
 80838b8:	fa00 f304 	lsl.w	r3, r0, r4
 80838bc:	fa20 f005 	lsr.w	r0, r0, r5
 80838c0:	fa01 f204 	lsl.w	r2, r1, r4
 80838c4:	ea40 0002 	orr.w	r0, r0, r2
 80838c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80838cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80838d0:	f141 0100 	adc.w	r1, r1, #0
 80838d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80838d8:	bf08      	it	eq
 80838da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80838de:	bd70      	pop	{r4, r5, r6, pc}
 80838e0:	f1c4 0520 	rsb	r5, r4, #32
 80838e4:	fa00 f205 	lsl.w	r2, r0, r5
 80838e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80838ec:	fa20 f304 	lsr.w	r3, r0, r4
 80838f0:	fa01 f205 	lsl.w	r2, r1, r5
 80838f4:	ea43 0302 	orr.w	r3, r3, r2
 80838f8:	fa21 f004 	lsr.w	r0, r1, r4
 80838fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083900:	fa21 f204 	lsr.w	r2, r1, r4
 8083904:	ea20 0002 	bic.w	r0, r0, r2
 8083908:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808390c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083910:	bf08      	it	eq
 8083912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083916:	bd70      	pop	{r4, r5, r6, pc}
 8083918:	f094 0f00 	teq	r4, #0
 808391c:	d10f      	bne.n	808393e <__aeabi_dmul+0x1c2>
 808391e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083922:	0040      	lsls	r0, r0, #1
 8083924:	eb41 0101 	adc.w	r1, r1, r1
 8083928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808392c:	bf08      	it	eq
 808392e:	3c01      	subeq	r4, #1
 8083930:	d0f7      	beq.n	8083922 <__aeabi_dmul+0x1a6>
 8083932:	ea41 0106 	orr.w	r1, r1, r6
 8083936:	f095 0f00 	teq	r5, #0
 808393a:	bf18      	it	ne
 808393c:	4770      	bxne	lr
 808393e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083942:	0052      	lsls	r2, r2, #1
 8083944:	eb43 0303 	adc.w	r3, r3, r3
 8083948:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808394c:	bf08      	it	eq
 808394e:	3d01      	subeq	r5, #1
 8083950:	d0f7      	beq.n	8083942 <__aeabi_dmul+0x1c6>
 8083952:	ea43 0306 	orr.w	r3, r3, r6
 8083956:	4770      	bx	lr
 8083958:	ea94 0f0c 	teq	r4, ip
 808395c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083960:	bf18      	it	ne
 8083962:	ea95 0f0c 	teqne	r5, ip
 8083966:	d00c      	beq.n	8083982 <__aeabi_dmul+0x206>
 8083968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808396c:	bf18      	it	ne
 808396e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083972:	d1d1      	bne.n	8083918 <__aeabi_dmul+0x19c>
 8083974:	ea81 0103 	eor.w	r1, r1, r3
 8083978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808397c:	f04f 0000 	mov.w	r0, #0
 8083980:	bd70      	pop	{r4, r5, r6, pc}
 8083982:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083986:	bf06      	itte	eq
 8083988:	4610      	moveq	r0, r2
 808398a:	4619      	moveq	r1, r3
 808398c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083990:	d019      	beq.n	80839c6 <__aeabi_dmul+0x24a>
 8083992:	ea94 0f0c 	teq	r4, ip
 8083996:	d102      	bne.n	808399e <__aeabi_dmul+0x222>
 8083998:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808399c:	d113      	bne.n	80839c6 <__aeabi_dmul+0x24a>
 808399e:	ea95 0f0c 	teq	r5, ip
 80839a2:	d105      	bne.n	80839b0 <__aeabi_dmul+0x234>
 80839a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80839a8:	bf1c      	itt	ne
 80839aa:	4610      	movne	r0, r2
 80839ac:	4619      	movne	r1, r3
 80839ae:	d10a      	bne.n	80839c6 <__aeabi_dmul+0x24a>
 80839b0:	ea81 0103 	eor.w	r1, r1, r3
 80839b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80839b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80839bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80839c0:	f04f 0000 	mov.w	r0, #0
 80839c4:	bd70      	pop	{r4, r5, r6, pc}
 80839c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80839ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80839ce:	bd70      	pop	{r4, r5, r6, pc}

080839d0 <__aeabi_ddiv>:
 80839d0:	b570      	push	{r4, r5, r6, lr}
 80839d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80839d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80839da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80839de:	bf1d      	ittte	ne
 80839e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80839e4:	ea94 0f0c 	teqne	r4, ip
 80839e8:	ea95 0f0c 	teqne	r5, ip
 80839ec:	f000 f8a7 	bleq	8083b3e <__aeabi_ddiv+0x16e>
 80839f0:	eba4 0405 	sub.w	r4, r4, r5
 80839f4:	ea81 0e03 	eor.w	lr, r1, r3
 80839f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80839fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083a00:	f000 8088 	beq.w	8083b14 <__aeabi_ddiv+0x144>
 8083a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083a08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083a0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083a10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083a14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083a18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083a1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083a20:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083a24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083a28:	429d      	cmp	r5, r3
 8083a2a:	bf08      	it	eq
 8083a2c:	4296      	cmpeq	r6, r2
 8083a2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083a32:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083a36:	d202      	bcs.n	8083a3e <__aeabi_ddiv+0x6e>
 8083a38:	085b      	lsrs	r3, r3, #1
 8083a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083a3e:	1ab6      	subs	r6, r6, r2
 8083a40:	eb65 0503 	sbc.w	r5, r5, r3
 8083a44:	085b      	lsrs	r3, r3, #1
 8083a46:	ea4f 0232 	mov.w	r2, r2, rrx
 8083a4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083a4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8083a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083a5a:	bf22      	ittt	cs
 8083a5c:	1ab6      	subcs	r6, r6, r2
 8083a5e:	4675      	movcs	r5, lr
 8083a60:	ea40 000c 	orrcs.w	r0, r0, ip
 8083a64:	085b      	lsrs	r3, r3, #1
 8083a66:	ea4f 0232 	mov.w	r2, r2, rrx
 8083a6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083a72:	bf22      	ittt	cs
 8083a74:	1ab6      	subcs	r6, r6, r2
 8083a76:	4675      	movcs	r5, lr
 8083a78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083a7c:	085b      	lsrs	r3, r3, #1
 8083a7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083a82:	ebb6 0e02 	subs.w	lr, r6, r2
 8083a86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083a8a:	bf22      	ittt	cs
 8083a8c:	1ab6      	subcs	r6, r6, r2
 8083a8e:	4675      	movcs	r5, lr
 8083a90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083a94:	085b      	lsrs	r3, r3, #1
 8083a96:	ea4f 0232 	mov.w	r2, r2, rrx
 8083a9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083aa2:	bf22      	ittt	cs
 8083aa4:	1ab6      	subcs	r6, r6, r2
 8083aa6:	4675      	movcs	r5, lr
 8083aa8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083aac:	ea55 0e06 	orrs.w	lr, r5, r6
 8083ab0:	d018      	beq.n	8083ae4 <__aeabi_ddiv+0x114>
 8083ab2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083ab6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083aba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083abe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083ac2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083ac6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083aca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083ace:	d1c0      	bne.n	8083a52 <__aeabi_ddiv+0x82>
 8083ad0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ad4:	d10b      	bne.n	8083aee <__aeabi_ddiv+0x11e>
 8083ad6:	ea41 0100 	orr.w	r1, r1, r0
 8083ada:	f04f 0000 	mov.w	r0, #0
 8083ade:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083ae2:	e7b6      	b.n	8083a52 <__aeabi_ddiv+0x82>
 8083ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ae8:	bf04      	itt	eq
 8083aea:	4301      	orreq	r1, r0
 8083aec:	2000      	moveq	r0, #0
 8083aee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083af2:	bf88      	it	hi
 8083af4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083af8:	f63f aeaf 	bhi.w	808385a <__aeabi_dmul+0xde>
 8083afc:	ebb5 0c03 	subs.w	ip, r5, r3
 8083b00:	bf04      	itt	eq
 8083b02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083b06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083b0a:	f150 0000 	adcs.w	r0, r0, #0
 8083b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083b12:	bd70      	pop	{r4, r5, r6, pc}
 8083b14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083b18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083b1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083b20:	bfc2      	ittt	gt
 8083b22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083b26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083b2a:	bd70      	popgt	{r4, r5, r6, pc}
 8083b2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083b30:	f04f 0e00 	mov.w	lr, #0
 8083b34:	3c01      	subs	r4, #1
 8083b36:	e690      	b.n	808385a <__aeabi_dmul+0xde>
 8083b38:	ea45 0e06 	orr.w	lr, r5, r6
 8083b3c:	e68d      	b.n	808385a <__aeabi_dmul+0xde>
 8083b3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083b42:	ea94 0f0c 	teq	r4, ip
 8083b46:	bf08      	it	eq
 8083b48:	ea95 0f0c 	teqeq	r5, ip
 8083b4c:	f43f af3b 	beq.w	80839c6 <__aeabi_dmul+0x24a>
 8083b50:	ea94 0f0c 	teq	r4, ip
 8083b54:	d10a      	bne.n	8083b6c <__aeabi_ddiv+0x19c>
 8083b56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083b5a:	f47f af34 	bne.w	80839c6 <__aeabi_dmul+0x24a>
 8083b5e:	ea95 0f0c 	teq	r5, ip
 8083b62:	f47f af25 	bne.w	80839b0 <__aeabi_dmul+0x234>
 8083b66:	4610      	mov	r0, r2
 8083b68:	4619      	mov	r1, r3
 8083b6a:	e72c      	b.n	80839c6 <__aeabi_dmul+0x24a>
 8083b6c:	ea95 0f0c 	teq	r5, ip
 8083b70:	d106      	bne.n	8083b80 <__aeabi_ddiv+0x1b0>
 8083b72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083b76:	f43f aefd 	beq.w	8083974 <__aeabi_dmul+0x1f8>
 8083b7a:	4610      	mov	r0, r2
 8083b7c:	4619      	mov	r1, r3
 8083b7e:	e722      	b.n	80839c6 <__aeabi_dmul+0x24a>
 8083b80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083b84:	bf18      	it	ne
 8083b86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083b8a:	f47f aec5 	bne.w	8083918 <__aeabi_dmul+0x19c>
 8083b8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083b92:	f47f af0d 	bne.w	80839b0 <__aeabi_dmul+0x234>
 8083b96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083b9a:	f47f aeeb 	bne.w	8083974 <__aeabi_dmul+0x1f8>
 8083b9e:	e712      	b.n	80839c6 <__aeabi_dmul+0x24a>

08083ba0 <__aeabi_d2iz>:
 8083ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083ba8:	d215      	bcs.n	8083bd6 <__aeabi_d2iz+0x36>
 8083baa:	d511      	bpl.n	8083bd0 <__aeabi_d2iz+0x30>
 8083bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083bb4:	d912      	bls.n	8083bdc <__aeabi_d2iz+0x3c>
 8083bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8083bca:	bf18      	it	ne
 8083bcc:	4240      	negne	r0, r0
 8083bce:	4770      	bx	lr
 8083bd0:	f04f 0000 	mov.w	r0, #0
 8083bd4:	4770      	bx	lr
 8083bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083bda:	d105      	bne.n	8083be8 <__aeabi_d2iz+0x48>
 8083bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083be0:	bf08      	it	eq
 8083be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083be6:	4770      	bx	lr
 8083be8:	f04f 0000 	mov.w	r0, #0
 8083bec:	4770      	bx	lr
 8083bee:	bf00      	nop

08083bf0 <__aeabi_d2f>:
 8083bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083bf8:	bf24      	itt	cs
 8083bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083c02:	d90d      	bls.n	8083c20 <__aeabi_d2f+0x30>
 8083c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083c18:	bf08      	it	eq
 8083c1a:	f020 0001 	biceq.w	r0, r0, #1
 8083c1e:	4770      	bx	lr
 8083c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083c24:	d121      	bne.n	8083c6a <__aeabi_d2f+0x7a>
 8083c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083c2a:	bfbc      	itt	lt
 8083c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083c30:	4770      	bxlt	lr
 8083c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083c3a:	f1c2 0218 	rsb	r2, r2, #24
 8083c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8083c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8083c46:	fa20 f002 	lsr.w	r0, r0, r2
 8083c4a:	bf18      	it	ne
 8083c4c:	f040 0001 	orrne.w	r0, r0, #1
 8083c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083c5c:	ea40 000c 	orr.w	r0, r0, ip
 8083c60:	fa23 f302 	lsr.w	r3, r3, r2
 8083c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083c68:	e7cc      	b.n	8083c04 <__aeabi_d2f+0x14>
 8083c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083c6e:	d107      	bne.n	8083c80 <__aeabi_d2f+0x90>
 8083c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8083c74:	bf1e      	ittt	ne
 8083c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8083c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8083c7e:	4770      	bxne	lr
 8083c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8083c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083c8c:	4770      	bx	lr
 8083c8e:	bf00      	nop

08083c90 <__aeabi_frsub>:
 8083c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8083c94:	e002      	b.n	8083c9c <__addsf3>
 8083c96:	bf00      	nop

08083c98 <__aeabi_fsub>:
 8083c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08083c9c <__addsf3>:
 8083c9c:	0042      	lsls	r2, r0, #1
 8083c9e:	bf1f      	itttt	ne
 8083ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8083ca4:	ea92 0f03 	teqne	r2, r3
 8083ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8083cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083cb0:	d06a      	beq.n	8083d88 <__addsf3+0xec>
 8083cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8083cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8083cba:	bfc1      	itttt	gt
 8083cbc:	18d2      	addgt	r2, r2, r3
 8083cbe:	4041      	eorgt	r1, r0
 8083cc0:	4048      	eorgt	r0, r1
 8083cc2:	4041      	eorgt	r1, r0
 8083cc4:	bfb8      	it	lt
 8083cc6:	425b      	neglt	r3, r3
 8083cc8:	2b19      	cmp	r3, #25
 8083cca:	bf88      	it	hi
 8083ccc:	4770      	bxhi	lr
 8083cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083cda:	bf18      	it	ne
 8083cdc:	4240      	negne	r0, r0
 8083cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083cea:	bf18      	it	ne
 8083cec:	4249      	negne	r1, r1
 8083cee:	ea92 0f03 	teq	r2, r3
 8083cf2:	d03f      	beq.n	8083d74 <__addsf3+0xd8>
 8083cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8083cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8083cfc:	eb10 000c 	adds.w	r0, r0, ip
 8083d00:	f1c3 0320 	rsb	r3, r3, #32
 8083d04:	fa01 f103 	lsl.w	r1, r1, r3
 8083d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083d0c:	d502      	bpl.n	8083d14 <__addsf3+0x78>
 8083d0e:	4249      	negs	r1, r1
 8083d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083d18:	d313      	bcc.n	8083d42 <__addsf3+0xa6>
 8083d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083d1e:	d306      	bcc.n	8083d2e <__addsf3+0x92>
 8083d20:	0840      	lsrs	r0, r0, #1
 8083d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8083d26:	f102 0201 	add.w	r2, r2, #1
 8083d2a:	2afe      	cmp	r2, #254	; 0xfe
 8083d2c:	d251      	bcs.n	8083dd2 <__addsf3+0x136>
 8083d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8083d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083d36:	bf08      	it	eq
 8083d38:	f020 0001 	biceq.w	r0, r0, #1
 8083d3c:	ea40 0003 	orr.w	r0, r0, r3
 8083d40:	4770      	bx	lr
 8083d42:	0049      	lsls	r1, r1, #1
 8083d44:	eb40 0000 	adc.w	r0, r0, r0
 8083d48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083d4c:	f1a2 0201 	sub.w	r2, r2, #1
 8083d50:	d1ed      	bne.n	8083d2e <__addsf3+0x92>
 8083d52:	fab0 fc80 	clz	ip, r0
 8083d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8083d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8083d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8083d62:	bfaa      	itet	ge
 8083d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083d68:	4252      	neglt	r2, r2
 8083d6a:	4318      	orrge	r0, r3
 8083d6c:	bfbc      	itt	lt
 8083d6e:	40d0      	lsrlt	r0, r2
 8083d70:	4318      	orrlt	r0, r3
 8083d72:	4770      	bx	lr
 8083d74:	f092 0f00 	teq	r2, #0
 8083d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8083d7c:	bf06      	itte	eq
 8083d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8083d82:	3201      	addeq	r2, #1
 8083d84:	3b01      	subne	r3, #1
 8083d86:	e7b5      	b.n	8083cf4 <__addsf3+0x58>
 8083d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8083d90:	bf18      	it	ne
 8083d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8083d96:	d021      	beq.n	8083ddc <__addsf3+0x140>
 8083d98:	ea92 0f03 	teq	r2, r3
 8083d9c:	d004      	beq.n	8083da8 <__addsf3+0x10c>
 8083d9e:	f092 0f00 	teq	r2, #0
 8083da2:	bf08      	it	eq
 8083da4:	4608      	moveq	r0, r1
 8083da6:	4770      	bx	lr
 8083da8:	ea90 0f01 	teq	r0, r1
 8083dac:	bf1c      	itt	ne
 8083dae:	2000      	movne	r0, #0
 8083db0:	4770      	bxne	lr
 8083db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8083db6:	d104      	bne.n	8083dc2 <__addsf3+0x126>
 8083db8:	0040      	lsls	r0, r0, #1
 8083dba:	bf28      	it	cs
 8083dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8083dc0:	4770      	bx	lr
 8083dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8083dc6:	bf3c      	itt	cc
 8083dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8083dcc:	4770      	bxcc	lr
 8083dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083dda:	4770      	bx	lr
 8083ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083de0:	bf16      	itet	ne
 8083de2:	4608      	movne	r0, r1
 8083de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083de8:	4601      	movne	r1, r0
 8083dea:	0242      	lsls	r2, r0, #9
 8083dec:	bf06      	itte	eq
 8083dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8083df2:	ea90 0f01 	teqeq	r0, r1
 8083df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083dfa:	4770      	bx	lr

08083dfc <__aeabi_ui2f>:
 8083dfc:	f04f 0300 	mov.w	r3, #0
 8083e00:	e004      	b.n	8083e0c <__aeabi_i2f+0x8>
 8083e02:	bf00      	nop

08083e04 <__aeabi_i2f>:
 8083e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083e08:	bf48      	it	mi
 8083e0a:	4240      	negmi	r0, r0
 8083e0c:	ea5f 0c00 	movs.w	ip, r0
 8083e10:	bf08      	it	eq
 8083e12:	4770      	bxeq	lr
 8083e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083e18:	4601      	mov	r1, r0
 8083e1a:	f04f 0000 	mov.w	r0, #0
 8083e1e:	e01c      	b.n	8083e5a <__aeabi_l2f+0x2a>

08083e20 <__aeabi_ul2f>:
 8083e20:	ea50 0201 	orrs.w	r2, r0, r1
 8083e24:	bf08      	it	eq
 8083e26:	4770      	bxeq	lr
 8083e28:	f04f 0300 	mov.w	r3, #0
 8083e2c:	e00a      	b.n	8083e44 <__aeabi_l2f+0x14>
 8083e2e:	bf00      	nop

08083e30 <__aeabi_l2f>:
 8083e30:	ea50 0201 	orrs.w	r2, r0, r1
 8083e34:	bf08      	it	eq
 8083e36:	4770      	bxeq	lr
 8083e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083e3c:	d502      	bpl.n	8083e44 <__aeabi_l2f+0x14>
 8083e3e:	4240      	negs	r0, r0
 8083e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083e44:	ea5f 0c01 	movs.w	ip, r1
 8083e48:	bf02      	ittt	eq
 8083e4a:	4684      	moveq	ip, r0
 8083e4c:	4601      	moveq	r1, r0
 8083e4e:	2000      	moveq	r0, #0
 8083e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083e54:	bf08      	it	eq
 8083e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083e5e:	fabc f28c 	clz	r2, ip
 8083e62:	3a08      	subs	r2, #8
 8083e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083e68:	db10      	blt.n	8083e8c <__aeabi_l2f+0x5c>
 8083e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8083e6e:	4463      	add	r3, ip
 8083e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8083e74:	f1c2 0220 	rsb	r2, r2, #32
 8083e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8083e80:	eb43 0002 	adc.w	r0, r3, r2
 8083e84:	bf08      	it	eq
 8083e86:	f020 0001 	biceq.w	r0, r0, #1
 8083e8a:	4770      	bx	lr
 8083e8c:	f102 0220 	add.w	r2, r2, #32
 8083e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8083e94:	f1c2 0220 	rsb	r2, r2, #32
 8083e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8083e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8083ea0:	eb43 0002 	adc.w	r0, r3, r2
 8083ea4:	bf08      	it	eq
 8083ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083eaa:	4770      	bx	lr

08083eac <__aeabi_fmul>:
 8083eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083eb4:	bf1e      	ittt	ne
 8083eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8083eba:	ea92 0f0c 	teqne	r2, ip
 8083ebe:	ea93 0f0c 	teqne	r3, ip
 8083ec2:	d06f      	beq.n	8083fa4 <__aeabi_fmul+0xf8>
 8083ec4:	441a      	add	r2, r3
 8083ec6:	ea80 0c01 	eor.w	ip, r0, r1
 8083eca:	0240      	lsls	r0, r0, #9
 8083ecc:	bf18      	it	ne
 8083ece:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8083ed2:	d01e      	beq.n	8083f12 <__aeabi_fmul+0x66>
 8083ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083ed8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083edc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083ee0:	fba0 3101 	umull	r3, r1, r0, r1
 8083ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083ee8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083eec:	bf3e      	ittt	cc
 8083eee:	0049      	lslcc	r1, r1, #1
 8083ef0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083ef4:	005b      	lslcc	r3, r3, #1
 8083ef6:	ea40 0001 	orr.w	r0, r0, r1
 8083efa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083efe:	2afd      	cmp	r2, #253	; 0xfd
 8083f00:	d81d      	bhi.n	8083f3e <__aeabi_fmul+0x92>
 8083f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083f06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083f0a:	bf08      	it	eq
 8083f0c:	f020 0001 	biceq.w	r0, r0, #1
 8083f10:	4770      	bx	lr
 8083f12:	f090 0f00 	teq	r0, #0
 8083f16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083f1a:	bf08      	it	eq
 8083f1c:	0249      	lsleq	r1, r1, #9
 8083f1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8083f22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083f26:	3a7f      	subs	r2, #127	; 0x7f
 8083f28:	bfc2      	ittt	gt
 8083f2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083f2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8083f32:	4770      	bxgt	lr
 8083f34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083f38:	f04f 0300 	mov.w	r3, #0
 8083f3c:	3a01      	subs	r2, #1
 8083f3e:	dc5d      	bgt.n	8083ffc <__aeabi_fmul+0x150>
 8083f40:	f112 0f19 	cmn.w	r2, #25
 8083f44:	bfdc      	itt	le
 8083f46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083f4a:	4770      	bxle	lr
 8083f4c:	f1c2 0200 	rsb	r2, r2, #0
 8083f50:	0041      	lsls	r1, r0, #1
 8083f52:	fa21 f102 	lsr.w	r1, r1, r2
 8083f56:	f1c2 0220 	rsb	r2, r2, #32
 8083f5a:	fa00 fc02 	lsl.w	ip, r0, r2
 8083f5e:	ea5f 0031 	movs.w	r0, r1, rrx
 8083f62:	f140 0000 	adc.w	r0, r0, #0
 8083f66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083f6a:	bf08      	it	eq
 8083f6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083f70:	4770      	bx	lr
 8083f72:	f092 0f00 	teq	r2, #0
 8083f76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083f7a:	bf02      	ittt	eq
 8083f7c:	0040      	lsleq	r0, r0, #1
 8083f7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083f82:	3a01      	subeq	r2, #1
 8083f84:	d0f9      	beq.n	8083f7a <__aeabi_fmul+0xce>
 8083f86:	ea40 000c 	orr.w	r0, r0, ip
 8083f8a:	f093 0f00 	teq	r3, #0
 8083f8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083f92:	bf02      	ittt	eq
 8083f94:	0049      	lsleq	r1, r1, #1
 8083f96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083f9a:	3b01      	subeq	r3, #1
 8083f9c:	d0f9      	beq.n	8083f92 <__aeabi_fmul+0xe6>
 8083f9e:	ea41 010c 	orr.w	r1, r1, ip
 8083fa2:	e78f      	b.n	8083ec4 <__aeabi_fmul+0x18>
 8083fa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083fa8:	ea92 0f0c 	teq	r2, ip
 8083fac:	bf18      	it	ne
 8083fae:	ea93 0f0c 	teqne	r3, ip
 8083fb2:	d00a      	beq.n	8083fca <__aeabi_fmul+0x11e>
 8083fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083fb8:	bf18      	it	ne
 8083fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083fbe:	d1d8      	bne.n	8083f72 <__aeabi_fmul+0xc6>
 8083fc0:	ea80 0001 	eor.w	r0, r0, r1
 8083fc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083fc8:	4770      	bx	lr
 8083fca:	f090 0f00 	teq	r0, #0
 8083fce:	bf17      	itett	ne
 8083fd0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083fd4:	4608      	moveq	r0, r1
 8083fd6:	f091 0f00 	teqne	r1, #0
 8083fda:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083fde:	d014      	beq.n	808400a <__aeabi_fmul+0x15e>
 8083fe0:	ea92 0f0c 	teq	r2, ip
 8083fe4:	d101      	bne.n	8083fea <__aeabi_fmul+0x13e>
 8083fe6:	0242      	lsls	r2, r0, #9
 8083fe8:	d10f      	bne.n	808400a <__aeabi_fmul+0x15e>
 8083fea:	ea93 0f0c 	teq	r3, ip
 8083fee:	d103      	bne.n	8083ff8 <__aeabi_fmul+0x14c>
 8083ff0:	024b      	lsls	r3, r1, #9
 8083ff2:	bf18      	it	ne
 8083ff4:	4608      	movne	r0, r1
 8083ff6:	d108      	bne.n	808400a <__aeabi_fmul+0x15e>
 8083ff8:	ea80 0001 	eor.w	r0, r0, r1
 8083ffc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084000:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084008:	4770      	bx	lr
 808400a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808400e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8084012:	4770      	bx	lr

08084014 <__aeabi_fdiv>:
 8084014:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084018:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808401c:	bf1e      	ittt	ne
 808401e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084022:	ea92 0f0c 	teqne	r2, ip
 8084026:	ea93 0f0c 	teqne	r3, ip
 808402a:	d069      	beq.n	8084100 <__aeabi_fdiv+0xec>
 808402c:	eba2 0203 	sub.w	r2, r2, r3
 8084030:	ea80 0c01 	eor.w	ip, r0, r1
 8084034:	0249      	lsls	r1, r1, #9
 8084036:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808403a:	d037      	beq.n	80840ac <__aeabi_fdiv+0x98>
 808403c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084040:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084044:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084048:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808404c:	428b      	cmp	r3, r1
 808404e:	bf38      	it	cc
 8084050:	005b      	lslcc	r3, r3, #1
 8084052:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084056:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808405a:	428b      	cmp	r3, r1
 808405c:	bf24      	itt	cs
 808405e:	1a5b      	subcs	r3, r3, r1
 8084060:	ea40 000c 	orrcs.w	r0, r0, ip
 8084064:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084068:	bf24      	itt	cs
 808406a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808406e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084072:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084076:	bf24      	itt	cs
 8084078:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808407c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084080:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084084:	bf24      	itt	cs
 8084086:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808408a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808408e:	011b      	lsls	r3, r3, #4
 8084090:	bf18      	it	ne
 8084092:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084096:	d1e0      	bne.n	808405a <__aeabi_fdiv+0x46>
 8084098:	2afd      	cmp	r2, #253	; 0xfd
 808409a:	f63f af50 	bhi.w	8083f3e <__aeabi_fmul+0x92>
 808409e:	428b      	cmp	r3, r1
 80840a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80840a4:	bf08      	it	eq
 80840a6:	f020 0001 	biceq.w	r0, r0, #1
 80840aa:	4770      	bx	lr
 80840ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80840b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80840b4:	327f      	adds	r2, #127	; 0x7f
 80840b6:	bfc2      	ittt	gt
 80840b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80840bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80840c0:	4770      	bxgt	lr
 80840c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840c6:	f04f 0300 	mov.w	r3, #0
 80840ca:	3a01      	subs	r2, #1
 80840cc:	e737      	b.n	8083f3e <__aeabi_fmul+0x92>
 80840ce:	f092 0f00 	teq	r2, #0
 80840d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80840d6:	bf02      	ittt	eq
 80840d8:	0040      	lsleq	r0, r0, #1
 80840da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80840de:	3a01      	subeq	r2, #1
 80840e0:	d0f9      	beq.n	80840d6 <__aeabi_fdiv+0xc2>
 80840e2:	ea40 000c 	orr.w	r0, r0, ip
 80840e6:	f093 0f00 	teq	r3, #0
 80840ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80840ee:	bf02      	ittt	eq
 80840f0:	0049      	lsleq	r1, r1, #1
 80840f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80840f6:	3b01      	subeq	r3, #1
 80840f8:	d0f9      	beq.n	80840ee <__aeabi_fdiv+0xda>
 80840fa:	ea41 010c 	orr.w	r1, r1, ip
 80840fe:	e795      	b.n	808402c <__aeabi_fdiv+0x18>
 8084100:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084104:	ea92 0f0c 	teq	r2, ip
 8084108:	d108      	bne.n	808411c <__aeabi_fdiv+0x108>
 808410a:	0242      	lsls	r2, r0, #9
 808410c:	f47f af7d 	bne.w	808400a <__aeabi_fmul+0x15e>
 8084110:	ea93 0f0c 	teq	r3, ip
 8084114:	f47f af70 	bne.w	8083ff8 <__aeabi_fmul+0x14c>
 8084118:	4608      	mov	r0, r1
 808411a:	e776      	b.n	808400a <__aeabi_fmul+0x15e>
 808411c:	ea93 0f0c 	teq	r3, ip
 8084120:	d104      	bne.n	808412c <__aeabi_fdiv+0x118>
 8084122:	024b      	lsls	r3, r1, #9
 8084124:	f43f af4c 	beq.w	8083fc0 <__aeabi_fmul+0x114>
 8084128:	4608      	mov	r0, r1
 808412a:	e76e      	b.n	808400a <__aeabi_fmul+0x15e>
 808412c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084130:	bf18      	it	ne
 8084132:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084136:	d1ca      	bne.n	80840ce <__aeabi_fdiv+0xba>
 8084138:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808413c:	f47f af5c 	bne.w	8083ff8 <__aeabi_fmul+0x14c>
 8084140:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084144:	f47f af3c 	bne.w	8083fc0 <__aeabi_fmul+0x114>
 8084148:	e75f      	b.n	808400a <__aeabi_fmul+0x15e>
 808414a:	bf00      	nop

0808414c <__gesf2>:
 808414c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084150:	e006      	b.n	8084160 <__cmpsf2+0x4>
 8084152:	bf00      	nop

08084154 <__lesf2>:
 8084154:	f04f 0c01 	mov.w	ip, #1
 8084158:	e002      	b.n	8084160 <__cmpsf2+0x4>
 808415a:	bf00      	nop

0808415c <__cmpsf2>:
 808415c:	f04f 0c01 	mov.w	ip, #1
 8084160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808416c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084170:	bf18      	it	ne
 8084172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084176:	d011      	beq.n	808419c <__cmpsf2+0x40>
 8084178:	b001      	add	sp, #4
 808417a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808417e:	bf18      	it	ne
 8084180:	ea90 0f01 	teqne	r0, r1
 8084184:	bf58      	it	pl
 8084186:	ebb2 0003 	subspl.w	r0, r2, r3
 808418a:	bf88      	it	hi
 808418c:	17c8      	asrhi	r0, r1, #31
 808418e:	bf38      	it	cc
 8084190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084194:	bf18      	it	ne
 8084196:	f040 0001 	orrne.w	r0, r0, #1
 808419a:	4770      	bx	lr
 808419c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80841a0:	d102      	bne.n	80841a8 <__cmpsf2+0x4c>
 80841a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80841a6:	d105      	bne.n	80841b4 <__cmpsf2+0x58>
 80841a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80841ac:	d1e4      	bne.n	8084178 <__cmpsf2+0x1c>
 80841ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80841b2:	d0e1      	beq.n	8084178 <__cmpsf2+0x1c>
 80841b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80841b8:	4770      	bx	lr
 80841ba:	bf00      	nop

080841bc <__aeabi_cfrcmple>:
 80841bc:	4684      	mov	ip, r0
 80841be:	4608      	mov	r0, r1
 80841c0:	4661      	mov	r1, ip
 80841c2:	e7ff      	b.n	80841c4 <__aeabi_cfcmpeq>

080841c4 <__aeabi_cfcmpeq>:
 80841c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80841c6:	f7ff ffc9 	bl	808415c <__cmpsf2>
 80841ca:	2800      	cmp	r0, #0
 80841cc:	bf48      	it	mi
 80841ce:	f110 0f00 	cmnmi.w	r0, #0
 80841d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080841d4 <__aeabi_fcmpeq>:
 80841d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80841d8:	f7ff fff4 	bl	80841c4 <__aeabi_cfcmpeq>
 80841dc:	bf0c      	ite	eq
 80841de:	2001      	moveq	r0, #1
 80841e0:	2000      	movne	r0, #0
 80841e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80841e6:	bf00      	nop

080841e8 <__aeabi_fcmplt>:
 80841e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80841ec:	f7ff ffea 	bl	80841c4 <__aeabi_cfcmpeq>
 80841f0:	bf34      	ite	cc
 80841f2:	2001      	movcc	r0, #1
 80841f4:	2000      	movcs	r0, #0
 80841f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80841fa:	bf00      	nop

080841fc <__aeabi_fcmple>:
 80841fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084200:	f7ff ffe0 	bl	80841c4 <__aeabi_cfcmpeq>
 8084204:	bf94      	ite	ls
 8084206:	2001      	movls	r0, #1
 8084208:	2000      	movhi	r0, #0
 808420a:	f85d fb08 	ldr.w	pc, [sp], #8
 808420e:	bf00      	nop

08084210 <__aeabi_fcmpge>:
 8084210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084214:	f7ff ffd2 	bl	80841bc <__aeabi_cfrcmple>
 8084218:	bf94      	ite	ls
 808421a:	2001      	movls	r0, #1
 808421c:	2000      	movhi	r0, #0
 808421e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084222:	bf00      	nop

08084224 <__aeabi_fcmpgt>:
 8084224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084228:	f7ff ffc8 	bl	80841bc <__aeabi_cfrcmple>
 808422c:	bf34      	ite	cc
 808422e:	2001      	movcc	r0, #1
 8084230:	2000      	movcs	r0, #0
 8084232:	f85d fb08 	ldr.w	pc, [sp], #8
 8084236:	bf00      	nop

08084238 <__aeabi_f2iz>:
 8084238:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808423c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084240:	d30f      	bcc.n	8084262 <__aeabi_f2iz+0x2a>
 8084242:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084246:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808424a:	d90d      	bls.n	8084268 <__aeabi_f2iz+0x30>
 808424c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084254:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084258:	fa23 f002 	lsr.w	r0, r3, r2
 808425c:	bf18      	it	ne
 808425e:	4240      	negne	r0, r0
 8084260:	4770      	bx	lr
 8084262:	f04f 0000 	mov.w	r0, #0
 8084266:	4770      	bx	lr
 8084268:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808426c:	d101      	bne.n	8084272 <__aeabi_f2iz+0x3a>
 808426e:	0242      	lsls	r2, r0, #9
 8084270:	d105      	bne.n	808427e <__aeabi_f2iz+0x46>
 8084272:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084276:	bf08      	it	eq
 8084278:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808427c:	4770      	bx	lr
 808427e:	f04f 0000 	mov.w	r0, #0
 8084282:	4770      	bx	lr

08084284 <asctime>:
 8084284:	4b09      	ldr	r3, [pc, #36]	; (80842ac <asctime+0x28>)
 8084286:	b570      	push	{r4, r5, r6, lr}
 8084288:	681c      	ldr	r4, [r3, #0]
 808428a:	4606      	mov	r6, r0
 808428c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808428e:	b93d      	cbnz	r5, 80842a0 <asctime+0x1c>
 8084290:	201a      	movs	r0, #26
 8084292:	f7fd fb7b 	bl	808198c <malloc>
 8084296:	221a      	movs	r2, #26
 8084298:	6420      	str	r0, [r4, #64]	; 0x40
 808429a:	4629      	mov	r1, r5
 808429c:	f000 f949 	bl	8084532 <memset>
 80842a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80842a2:	4630      	mov	r0, r6
 80842a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80842a8:	f000 b802 	b.w	80842b0 <asctime_r>
 80842ac:	200000ac 	.word	0x200000ac

080842b0 <asctime_r>:
 80842b0:	b510      	push	{r4, lr}
 80842b2:	460c      	mov	r4, r1
 80842b4:	6941      	ldr	r1, [r0, #20]
 80842b6:	b086      	sub	sp, #24
 80842b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80842bc:	6903      	ldr	r3, [r0, #16]
 80842be:	6982      	ldr	r2, [r0, #24]
 80842c0:	9104      	str	r1, [sp, #16]
 80842c2:	6801      	ldr	r1, [r0, #0]
 80842c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80842c8:	9103      	str	r1, [sp, #12]
 80842ca:	6841      	ldr	r1, [r0, #4]
 80842cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80842d0:	9102      	str	r1, [sp, #8]
 80842d2:	6881      	ldr	r1, [r0, #8]
 80842d4:	9101      	str	r1, [sp, #4]
 80842d6:	68c1      	ldr	r1, [r0, #12]
 80842d8:	4620      	mov	r0, r4
 80842da:	9100      	str	r1, [sp, #0]
 80842dc:	4904      	ldr	r1, [pc, #16]	; (80842f0 <asctime_r+0x40>)
 80842de:	440b      	add	r3, r1
 80842e0:	4904      	ldr	r1, [pc, #16]	; (80842f4 <asctime_r+0x44>)
 80842e2:	440a      	add	r2, r1
 80842e4:	4904      	ldr	r1, [pc, #16]	; (80842f8 <asctime_r+0x48>)
 80842e6:	f7fd fb69 	bl	80819bc <siprintf>
 80842ea:	4620      	mov	r0, r4
 80842ec:	b006      	add	sp, #24
 80842ee:	bd10      	pop	{r4, pc}
 80842f0:	08085405 	.word	0x08085405
 80842f4:	080853f0 	.word	0x080853f0
 80842f8:	08085429 	.word	0x08085429

080842fc <atoi>:
 80842fc:	220a      	movs	r2, #10
 80842fe:	2100      	movs	r1, #0
 8084300:	f000 ba3c 	b.w	808477c <strtol>

08084304 <__cxa_atexit>:
 8084304:	b510      	push	{r4, lr}
 8084306:	4c05      	ldr	r4, [pc, #20]	; (808431c <__cxa_atexit+0x18>)
 8084308:	4613      	mov	r3, r2
 808430a:	b12c      	cbz	r4, 8084318 <__cxa_atexit+0x14>
 808430c:	460a      	mov	r2, r1
 808430e:	4601      	mov	r1, r0
 8084310:	2002      	movs	r0, #2
 8084312:	f3af 8000 	nop.w
 8084316:	bd10      	pop	{r4, pc}
 8084318:	4620      	mov	r0, r4
 808431a:	bd10      	pop	{r4, pc}
 808431c:	00000000 	.word	0x00000000

08084320 <difftime>:
 8084320:	b508      	push	{r3, lr}
 8084322:	1a40      	subs	r0, r0, r1
 8084324:	f7ff f9c4 	bl	80836b0 <__aeabi_i2d>
 8084328:	bd08      	pop	{r3, pc}
	...

0808432c <localtime>:
 808432c:	b538      	push	{r3, r4, r5, lr}
 808432e:	4b07      	ldr	r3, [pc, #28]	; (808434c <localtime+0x20>)
 8084330:	4605      	mov	r5, r0
 8084332:	681c      	ldr	r4, [r3, #0]
 8084334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084336:	b91b      	cbnz	r3, 8084340 <localtime+0x14>
 8084338:	2024      	movs	r0, #36	; 0x24
 808433a:	f7fd fb27 	bl	808198c <malloc>
 808433e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084342:	4628      	mov	r0, r5
 8084344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084348:	f000 b802 	b.w	8084350 <localtime_r>
 808434c:	200000ac 	.word	0x200000ac

08084350 <localtime_r>:
 8084350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084354:	460c      	mov	r4, r1
 8084356:	4680      	mov	r8, r0
 8084358:	f000 fd16 	bl	8084d88 <__gettzinfo>
 808435c:	4621      	mov	r1, r4
 808435e:	4607      	mov	r7, r0
 8084360:	4640      	mov	r0, r8
 8084362:	f000 fd15 	bl	8084d90 <gmtime_r>
 8084366:	6946      	ldr	r6, [r0, #20]
 8084368:	4604      	mov	r4, r0
 808436a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808436e:	07b3      	lsls	r3, r6, #30
 8084370:	d105      	bne.n	808437e <localtime_r+0x2e>
 8084372:	2264      	movs	r2, #100	; 0x64
 8084374:	fb96 f3f2 	sdiv	r3, r6, r2
 8084378:	fb02 6313 	mls	r3, r2, r3, r6
 808437c:	b94b      	cbnz	r3, 8084392 <localtime_r+0x42>
 808437e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084382:	fb96 f3f5 	sdiv	r3, r6, r5
 8084386:	fb05 6513 	mls	r5, r5, r3, r6
 808438a:	fab5 f385 	clz	r3, r5
 808438e:	095b      	lsrs	r3, r3, #5
 8084390:	e000      	b.n	8084394 <localtime_r+0x44>
 8084392:	2301      	movs	r3, #1
 8084394:	4a5f      	ldr	r2, [pc, #380]	; (8084514 <localtime_r+0x1c4>)
 8084396:	2530      	movs	r5, #48	; 0x30
 8084398:	fb05 2503 	mla	r5, r5, r3, r2
 808439c:	f000 fb28 	bl	80849f0 <__tz_lock>
 80843a0:	f000 fb28 	bl	80849f4 <_tzset_unlocked>
 80843a4:	4b5c      	ldr	r3, [pc, #368]	; (8084518 <localtime_r+0x1c8>)
 80843a6:	681b      	ldr	r3, [r3, #0]
 80843a8:	b1f3      	cbz	r3, 80843e8 <localtime_r+0x98>
 80843aa:	687b      	ldr	r3, [r7, #4]
 80843ac:	429e      	cmp	r6, r3
 80843ae:	d105      	bne.n	80843bc <localtime_r+0x6c>
 80843b0:	6839      	ldr	r1, [r7, #0]
 80843b2:	f8d8 3000 	ldr.w	r3, [r8]
 80843b6:	69fa      	ldr	r2, [r7, #28]
 80843b8:	b941      	cbnz	r1, 80843cc <localtime_r+0x7c>
 80843ba:	e00a      	b.n	80843d2 <localtime_r+0x82>
 80843bc:	4630      	mov	r0, r6
 80843be:	f000 fa6f 	bl	80848a0 <__tzcalc_limits>
 80843c2:	2800      	cmp	r0, #0
 80843c4:	d1f4      	bne.n	80843b0 <localtime_r+0x60>
 80843c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80843ca:	e00d      	b.n	80843e8 <localtime_r+0x98>
 80843cc:	4293      	cmp	r3, r2
 80843ce:	db08      	blt.n	80843e2 <localtime_r+0x92>
 80843d0:	e001      	b.n	80843d6 <localtime_r+0x86>
 80843d2:	4293      	cmp	r3, r2
 80843d4:	da07      	bge.n	80843e6 <localtime_r+0x96>
 80843d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80843d8:	4293      	cmp	r3, r2
 80843da:	bfac      	ite	ge
 80843dc:	2300      	movge	r3, #0
 80843de:	2301      	movlt	r3, #1
 80843e0:	e002      	b.n	80843e8 <localtime_r+0x98>
 80843e2:	2300      	movs	r3, #0
 80843e4:	e000      	b.n	80843e8 <localtime_r+0x98>
 80843e6:	2301      	movs	r3, #1
 80843e8:	6223      	str	r3, [r4, #32]
 80843ea:	6a23      	ldr	r3, [r4, #32]
 80843ec:	203c      	movs	r0, #60	; 0x3c
 80843ee:	2b01      	cmp	r3, #1
 80843f0:	bf0c      	ite	eq
 80843f2:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80843f4:	6a39      	ldrne	r1, [r7, #32]
 80843f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80843fa:	fb91 f6f3 	sdiv	r6, r1, r3
 80843fe:	fb03 1316 	mls	r3, r3, r6, r1
 8084402:	fb93 f2f0 	sdiv	r2, r3, r0
 8084406:	fb00 3012 	mls	r0, r0, r2, r3
 808440a:	6861      	ldr	r1, [r4, #4]
 808440c:	6823      	ldr	r3, [r4, #0]
 808440e:	1a89      	subs	r1, r1, r2
 8084410:	68a2      	ldr	r2, [r4, #8]
 8084412:	1a1b      	subs	r3, r3, r0
 8084414:	1b92      	subs	r2, r2, r6
 8084416:	2b3b      	cmp	r3, #59	; 0x3b
 8084418:	6023      	str	r3, [r4, #0]
 808441a:	6061      	str	r1, [r4, #4]
 808441c:	60a2      	str	r2, [r4, #8]
 808441e:	dd03      	ble.n	8084428 <localtime_r+0xd8>
 8084420:	3101      	adds	r1, #1
 8084422:	6061      	str	r1, [r4, #4]
 8084424:	3b3c      	subs	r3, #60	; 0x3c
 8084426:	e004      	b.n	8084432 <localtime_r+0xe2>
 8084428:	2b00      	cmp	r3, #0
 808442a:	da03      	bge.n	8084434 <localtime_r+0xe4>
 808442c:	3901      	subs	r1, #1
 808442e:	6061      	str	r1, [r4, #4]
 8084430:	333c      	adds	r3, #60	; 0x3c
 8084432:	6023      	str	r3, [r4, #0]
 8084434:	6863      	ldr	r3, [r4, #4]
 8084436:	2b3b      	cmp	r3, #59	; 0x3b
 8084438:	dd03      	ble.n	8084442 <localtime_r+0xf2>
 808443a:	3201      	adds	r2, #1
 808443c:	60a2      	str	r2, [r4, #8]
 808443e:	3b3c      	subs	r3, #60	; 0x3c
 8084440:	e004      	b.n	808444c <localtime_r+0xfc>
 8084442:	2b00      	cmp	r3, #0
 8084444:	da03      	bge.n	808444e <localtime_r+0xfe>
 8084446:	3a01      	subs	r2, #1
 8084448:	60a2      	str	r2, [r4, #8]
 808444a:	333c      	adds	r3, #60	; 0x3c
 808444c:	6063      	str	r3, [r4, #4]
 808444e:	68a3      	ldr	r3, [r4, #8]
 8084450:	2b17      	cmp	r3, #23
 8084452:	dd22      	ble.n	808449a <localtime_r+0x14a>
 8084454:	69e2      	ldr	r2, [r4, #28]
 8084456:	3b18      	subs	r3, #24
 8084458:	3201      	adds	r2, #1
 808445a:	61e2      	str	r2, [r4, #28]
 808445c:	69a2      	ldr	r2, [r4, #24]
 808445e:	60a3      	str	r3, [r4, #8]
 8084460:	3201      	adds	r2, #1
 8084462:	2a06      	cmp	r2, #6
 8084464:	bfc8      	it	gt
 8084466:	2200      	movgt	r2, #0
 8084468:	61a2      	str	r2, [r4, #24]
 808446a:	68e2      	ldr	r2, [r4, #12]
 808446c:	6923      	ldr	r3, [r4, #16]
 808446e:	3201      	adds	r2, #1
 8084470:	60e2      	str	r2, [r4, #12]
 8084472:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8084476:	428a      	cmp	r2, r1
 8084478:	dd46      	ble.n	8084508 <localtime_r+0x1b8>
 808447a:	3301      	adds	r3, #1
 808447c:	2b0c      	cmp	r3, #12
 808447e:	bf08      	it	eq
 8084480:	6963      	ldreq	r3, [r4, #20]
 8084482:	eba2 0201 	sub.w	r2, r2, r1
 8084486:	60e2      	str	r2, [r4, #12]
 8084488:	bf05      	ittet	eq
 808448a:	3301      	addeq	r3, #1
 808448c:	2200      	moveq	r2, #0
 808448e:	6123      	strne	r3, [r4, #16]
 8084490:	6122      	streq	r2, [r4, #16]
 8084492:	bf04      	itt	eq
 8084494:	6163      	streq	r3, [r4, #20]
 8084496:	61e2      	streq	r2, [r4, #28]
 8084498:	e036      	b.n	8084508 <localtime_r+0x1b8>
 808449a:	2b00      	cmp	r3, #0
 808449c:	da34      	bge.n	8084508 <localtime_r+0x1b8>
 808449e:	69e2      	ldr	r2, [r4, #28]
 80844a0:	3318      	adds	r3, #24
 80844a2:	3a01      	subs	r2, #1
 80844a4:	61e2      	str	r2, [r4, #28]
 80844a6:	69a2      	ldr	r2, [r4, #24]
 80844a8:	60a3      	str	r3, [r4, #8]
 80844aa:	3a01      	subs	r2, #1
 80844ac:	bf48      	it	mi
 80844ae:	2206      	movmi	r2, #6
 80844b0:	61a2      	str	r2, [r4, #24]
 80844b2:	68e2      	ldr	r2, [r4, #12]
 80844b4:	3a01      	subs	r2, #1
 80844b6:	60e2      	str	r2, [r4, #12]
 80844b8:	bb32      	cbnz	r2, 8084508 <localtime_r+0x1b8>
 80844ba:	6923      	ldr	r3, [r4, #16]
 80844bc:	3b01      	subs	r3, #1
 80844be:	d401      	bmi.n	80844c4 <localtime_r+0x174>
 80844c0:	6123      	str	r3, [r4, #16]
 80844c2:	e01d      	b.n	8084500 <localtime_r+0x1b0>
 80844c4:	230b      	movs	r3, #11
 80844c6:	6123      	str	r3, [r4, #16]
 80844c8:	6963      	ldr	r3, [r4, #20]
 80844ca:	1e5a      	subs	r2, r3, #1
 80844cc:	f012 0f03 	tst.w	r2, #3
 80844d0:	6162      	str	r2, [r4, #20]
 80844d2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80844d6:	d105      	bne.n	80844e4 <localtime_r+0x194>
 80844d8:	2164      	movs	r1, #100	; 0x64
 80844da:	fb93 f2f1 	sdiv	r2, r3, r1
 80844de:	fb01 3212 	mls	r2, r1, r2, r3
 80844e2:	b94a      	cbnz	r2, 80844f8 <localtime_r+0x1a8>
 80844e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80844e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80844ec:	fb01 3312 	mls	r3, r1, r2, r3
 80844f0:	fab3 f383 	clz	r3, r3
 80844f4:	095b      	lsrs	r3, r3, #5
 80844f6:	e000      	b.n	80844fa <localtime_r+0x1aa>
 80844f8:	2301      	movs	r3, #1
 80844fa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80844fe:	61e3      	str	r3, [r4, #28]
 8084500:	6923      	ldr	r3, [r4, #16]
 8084502:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8084506:	60e3      	str	r3, [r4, #12]
 8084508:	f000 fa73 	bl	80849f2 <__tz_unlock>
 808450c:	4620      	mov	r0, r4
 808450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084512:	bf00      	nop
 8084514:	080855b0 	.word	0x080855b0
 8084518:	200007dc 	.word	0x200007dc

0808451c <memcpy>:
 808451c:	b510      	push	{r4, lr}
 808451e:	1e43      	subs	r3, r0, #1
 8084520:	440a      	add	r2, r1
 8084522:	4291      	cmp	r1, r2
 8084524:	d004      	beq.n	8084530 <memcpy+0x14>
 8084526:	f811 4b01 	ldrb.w	r4, [r1], #1
 808452a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808452e:	e7f8      	b.n	8084522 <memcpy+0x6>
 8084530:	bd10      	pop	{r4, pc}

08084532 <memset>:
 8084532:	4603      	mov	r3, r0
 8084534:	4402      	add	r2, r0
 8084536:	4293      	cmp	r3, r2
 8084538:	d002      	beq.n	8084540 <memset+0xe>
 808453a:	f803 1b01 	strb.w	r1, [r3], #1
 808453e:	e7fa      	b.n	8084536 <memset+0x4>
 8084540:	4770      	bx	lr
	...

08084544 <srand>:
 8084544:	b538      	push	{r3, r4, r5, lr}
 8084546:	4b12      	ldr	r3, [pc, #72]	; (8084590 <srand+0x4c>)
 8084548:	4605      	mov	r5, r0
 808454a:	681c      	ldr	r4, [r3, #0]
 808454c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808454e:	b9d3      	cbnz	r3, 8084586 <srand+0x42>
 8084550:	2018      	movs	r0, #24
 8084552:	f7fd fa1b 	bl	808198c <malloc>
 8084556:	f243 330e 	movw	r3, #13070	; 0x330e
 808455a:	63a0      	str	r0, [r4, #56]	; 0x38
 808455c:	8003      	strh	r3, [r0, #0]
 808455e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084562:	8043      	strh	r3, [r0, #2]
 8084564:	f241 2334 	movw	r3, #4660	; 0x1234
 8084568:	8083      	strh	r3, [r0, #4]
 808456a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808456e:	80c3      	strh	r3, [r0, #6]
 8084570:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084574:	8103      	strh	r3, [r0, #8]
 8084576:	2305      	movs	r3, #5
 8084578:	8143      	strh	r3, [r0, #10]
 808457a:	230b      	movs	r3, #11
 808457c:	8183      	strh	r3, [r0, #12]
 808457e:	2201      	movs	r2, #1
 8084580:	2300      	movs	r3, #0
 8084582:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084588:	2200      	movs	r2, #0
 808458a:	611d      	str	r5, [r3, #16]
 808458c:	615a      	str	r2, [r3, #20]
 808458e:	bd38      	pop	{r3, r4, r5, pc}
 8084590:	200000ac 	.word	0x200000ac

08084594 <strcat>:
 8084594:	4602      	mov	r2, r0
 8084596:	b510      	push	{r4, lr}
 8084598:	4613      	mov	r3, r2
 808459a:	781c      	ldrb	r4, [r3, #0]
 808459c:	3201      	adds	r2, #1
 808459e:	2c00      	cmp	r4, #0
 80845a0:	d1fa      	bne.n	8084598 <strcat+0x4>
 80845a2:	3b01      	subs	r3, #1
 80845a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80845a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80845ac:	2a00      	cmp	r2, #0
 80845ae:	d1f9      	bne.n	80845a4 <strcat+0x10>
 80845b0:	bd10      	pop	{r4, pc}

080845b2 <strcmp>:
 80845b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80845b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80845ba:	2a01      	cmp	r2, #1
 80845bc:	bf28      	it	cs
 80845be:	429a      	cmpcs	r2, r3
 80845c0:	d0f7      	beq.n	80845b2 <strcmp>
 80845c2:	1ad0      	subs	r0, r2, r3
 80845c4:	4770      	bx	lr

080845c6 <strcpy>:
 80845c6:	4603      	mov	r3, r0
 80845c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80845cc:	f803 2b01 	strb.w	r2, [r3], #1
 80845d0:	2a00      	cmp	r2, #0
 80845d2:	d1f9      	bne.n	80845c8 <strcpy+0x2>
 80845d4:	4770      	bx	lr
	...

080845d8 <strdup>:
 80845d8:	4b02      	ldr	r3, [pc, #8]	; (80845e4 <strdup+0xc>)
 80845da:	4601      	mov	r1, r0
 80845dc:	6818      	ldr	r0, [r3, #0]
 80845de:	f000 b803 	b.w	80845e8 <_strdup_r>
 80845e2:	bf00      	nop
 80845e4:	200000ac 	.word	0x200000ac

080845e8 <_strdup_r>:
 80845e8:	b570      	push	{r4, r5, r6, lr}
 80845ea:	4606      	mov	r6, r0
 80845ec:	4608      	mov	r0, r1
 80845ee:	460c      	mov	r4, r1
 80845f0:	f000 f80d 	bl	808460e <strlen>
 80845f4:	1c45      	adds	r5, r0, #1
 80845f6:	4629      	mov	r1, r5
 80845f8:	4630      	mov	r0, r6
 80845fa:	f7fd f9ff 	bl	80819fc <_malloc_r>
 80845fe:	4606      	mov	r6, r0
 8084600:	b118      	cbz	r0, 808460a <_strdup_r+0x22>
 8084602:	462a      	mov	r2, r5
 8084604:	4621      	mov	r1, r4
 8084606:	f7ff ff89 	bl	808451c <memcpy>
 808460a:	4630      	mov	r0, r6
 808460c:	bd70      	pop	{r4, r5, r6, pc}

0808460e <strlen>:
 808460e:	4603      	mov	r3, r0
 8084610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084614:	2a00      	cmp	r2, #0
 8084616:	d1fb      	bne.n	8084610 <strlen+0x2>
 8084618:	1a18      	subs	r0, r3, r0
 808461a:	3801      	subs	r0, #1
 808461c:	4770      	bx	lr

0808461e <strncmp>:
 808461e:	b530      	push	{r4, r5, lr}
 8084620:	b182      	cbz	r2, 8084644 <strncmp+0x26>
 8084622:	1e45      	subs	r5, r0, #1
 8084624:	3901      	subs	r1, #1
 8084626:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808462a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808462e:	42a3      	cmp	r3, r4
 8084630:	d106      	bne.n	8084640 <strncmp+0x22>
 8084632:	43ec      	mvns	r4, r5
 8084634:	4414      	add	r4, r2
 8084636:	42e0      	cmn	r0, r4
 8084638:	d001      	beq.n	808463e <strncmp+0x20>
 808463a:	2b00      	cmp	r3, #0
 808463c:	d1f3      	bne.n	8084626 <strncmp+0x8>
 808463e:	461c      	mov	r4, r3
 8084640:	1b18      	subs	r0, r3, r4
 8084642:	bd30      	pop	{r4, r5, pc}
 8084644:	4610      	mov	r0, r2
 8084646:	bd30      	pop	{r4, r5, pc}

08084648 <strncpy>:
 8084648:	4603      	mov	r3, r0
 808464a:	b510      	push	{r4, lr}
 808464c:	b142      	cbz	r2, 8084660 <strncpy+0x18>
 808464e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084652:	3a01      	subs	r2, #1
 8084654:	f803 4b01 	strb.w	r4, [r3], #1
 8084658:	2c00      	cmp	r4, #0
 808465a:	d1f7      	bne.n	808464c <strncpy+0x4>
 808465c:	441a      	add	r2, r3
 808465e:	e000      	b.n	8084662 <strncpy+0x1a>
 8084660:	bd10      	pop	{r4, pc}
 8084662:	4293      	cmp	r3, r2
 8084664:	d002      	beq.n	808466c <strncpy+0x24>
 8084666:	f803 4b01 	strb.w	r4, [r3], #1
 808466a:	e7fa      	b.n	8084662 <strncpy+0x1a>
 808466c:	bd10      	pop	{r4, pc}
	...

08084670 <_strtol_r>:
 8084670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084674:	460f      	mov	r7, r1
 8084676:	4680      	mov	r8, r0
 8084678:	483f      	ldr	r0, [pc, #252]	; (8084778 <_strtol_r+0x108>)
 808467a:	f8d0 9000 	ldr.w	r9, [r0]
 808467e:	463d      	mov	r5, r7
 8084680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084684:	eb09 0004 	add.w	r0, r9, r4
 8084688:	7840      	ldrb	r0, [r0, #1]
 808468a:	f000 0008 	and.w	r0, r0, #8
 808468e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084692:	b108      	cbz	r0, 8084698 <_strtol_r+0x28>
 8084694:	462f      	mov	r7, r5
 8084696:	e7f2      	b.n	808467e <_strtol_r+0xe>
 8084698:	2c2d      	cmp	r4, #45	; 0x2d
 808469a:	d103      	bne.n	80846a4 <_strtol_r+0x34>
 808469c:	1cbd      	adds	r5, r7, #2
 808469e:	787c      	ldrb	r4, [r7, #1]
 80846a0:	2601      	movs	r6, #1
 80846a2:	e003      	b.n	80846ac <_strtol_r+0x3c>
 80846a4:	2c2b      	cmp	r4, #43	; 0x2b
 80846a6:	bf04      	itt	eq
 80846a8:	787c      	ldrbeq	r4, [r7, #1]
 80846aa:	1cbd      	addeq	r5, r7, #2
 80846ac:	b113      	cbz	r3, 80846b4 <_strtol_r+0x44>
 80846ae:	2b10      	cmp	r3, #16
 80846b0:	d10a      	bne.n	80846c8 <_strtol_r+0x58>
 80846b2:	e05b      	b.n	808476c <_strtol_r+0xfc>
 80846b4:	2c30      	cmp	r4, #48	; 0x30
 80846b6:	d157      	bne.n	8084768 <_strtol_r+0xf8>
 80846b8:	7828      	ldrb	r0, [r5, #0]
 80846ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80846be:	2858      	cmp	r0, #88	; 0x58
 80846c0:	d14d      	bne.n	808475e <_strtol_r+0xee>
 80846c2:	786c      	ldrb	r4, [r5, #1]
 80846c4:	2310      	movs	r3, #16
 80846c6:	3502      	adds	r5, #2
 80846c8:	2e00      	cmp	r6, #0
 80846ca:	bf14      	ite	ne
 80846cc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80846d0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80846d4:	fbbc faf3 	udiv	sl, ip, r3
 80846d8:	2700      	movs	r7, #0
 80846da:	4638      	mov	r0, r7
 80846dc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80846e0:	eb09 0e04 	add.w	lr, r9, r4
 80846e4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80846e8:	f01e 0f04 	tst.w	lr, #4
 80846ec:	d001      	beq.n	80846f2 <_strtol_r+0x82>
 80846ee:	3c30      	subs	r4, #48	; 0x30
 80846f0:	e00b      	b.n	808470a <_strtol_r+0x9a>
 80846f2:	f01e 0e03 	ands.w	lr, lr, #3
 80846f6:	d01b      	beq.n	8084730 <_strtol_r+0xc0>
 80846f8:	f1be 0f01 	cmp.w	lr, #1
 80846fc:	bf0c      	ite	eq
 80846fe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084702:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084706:	ebce 0404 	rsb	r4, lr, r4
 808470a:	42a3      	cmp	r3, r4
 808470c:	dd10      	ble.n	8084730 <_strtol_r+0xc0>
 808470e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084712:	d00a      	beq.n	808472a <_strtol_r+0xba>
 8084714:	4550      	cmp	r0, sl
 8084716:	d806      	bhi.n	8084726 <_strtol_r+0xb6>
 8084718:	d101      	bne.n	808471e <_strtol_r+0xae>
 808471a:	4564      	cmp	r4, ip
 808471c:	dc03      	bgt.n	8084726 <_strtol_r+0xb6>
 808471e:	fb03 4000 	mla	r0, r3, r0, r4
 8084722:	2701      	movs	r7, #1
 8084724:	e001      	b.n	808472a <_strtol_r+0xba>
 8084726:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808472a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808472e:	e7d7      	b.n	80846e0 <_strtol_r+0x70>
 8084730:	1c7b      	adds	r3, r7, #1
 8084732:	d10c      	bne.n	808474e <_strtol_r+0xde>
 8084734:	2e00      	cmp	r6, #0
 8084736:	f04f 0322 	mov.w	r3, #34	; 0x22
 808473a:	bf14      	ite	ne
 808473c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084740:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084744:	f8c8 3000 	str.w	r3, [r8]
 8084748:	b92a      	cbnz	r2, 8084756 <_strtol_r+0xe6>
 808474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808474e:	b106      	cbz	r6, 8084752 <_strtol_r+0xe2>
 8084750:	4240      	negs	r0, r0
 8084752:	b172      	cbz	r2, 8084772 <_strtol_r+0x102>
 8084754:	b107      	cbz	r7, 8084758 <_strtol_r+0xe8>
 8084756:	1e69      	subs	r1, r5, #1
 8084758:	6011      	str	r1, [r2, #0]
 808475a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808475e:	2430      	movs	r4, #48	; 0x30
 8084760:	2b00      	cmp	r3, #0
 8084762:	d1b1      	bne.n	80846c8 <_strtol_r+0x58>
 8084764:	2308      	movs	r3, #8
 8084766:	e7af      	b.n	80846c8 <_strtol_r+0x58>
 8084768:	230a      	movs	r3, #10
 808476a:	e7ad      	b.n	80846c8 <_strtol_r+0x58>
 808476c:	2c30      	cmp	r4, #48	; 0x30
 808476e:	d0a3      	beq.n	80846b8 <_strtol_r+0x48>
 8084770:	e7aa      	b.n	80846c8 <_strtol_r+0x58>
 8084772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084776:	bf00      	nop
 8084778:	20000048 	.word	0x20000048

0808477c <strtol>:
 808477c:	4613      	mov	r3, r2
 808477e:	460a      	mov	r2, r1
 8084780:	4601      	mov	r1, r0
 8084782:	4802      	ldr	r0, [pc, #8]	; (808478c <strtol+0x10>)
 8084784:	6800      	ldr	r0, [r0, #0]
 8084786:	f7ff bf73 	b.w	8084670 <_strtol_r>
 808478a:	bf00      	nop
 808478c:	200000ac 	.word	0x200000ac

08084790 <_strtoul_r>:
 8084790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084794:	460e      	mov	r6, r1
 8084796:	4680      	mov	r8, r0
 8084798:	483b      	ldr	r0, [pc, #236]	; (8084888 <_strtoul_r+0xf8>)
 808479a:	f8d0 9000 	ldr.w	r9, [r0]
 808479e:	4635      	mov	r5, r6
 80847a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80847a4:	eb09 0004 	add.w	r0, r9, r4
 80847a8:	7840      	ldrb	r0, [r0, #1]
 80847aa:	f000 0008 	and.w	r0, r0, #8
 80847ae:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80847b2:	b108      	cbz	r0, 80847b8 <_strtoul_r+0x28>
 80847b4:	462e      	mov	r6, r5
 80847b6:	e7f2      	b.n	808479e <_strtoul_r+0xe>
 80847b8:	2c2d      	cmp	r4, #45	; 0x2d
 80847ba:	d103      	bne.n	80847c4 <_strtoul_r+0x34>
 80847bc:	1cb5      	adds	r5, r6, #2
 80847be:	7874      	ldrb	r4, [r6, #1]
 80847c0:	2701      	movs	r7, #1
 80847c2:	e003      	b.n	80847cc <_strtoul_r+0x3c>
 80847c4:	2c2b      	cmp	r4, #43	; 0x2b
 80847c6:	bf04      	itt	eq
 80847c8:	7874      	ldrbeq	r4, [r6, #1]
 80847ca:	1cb5      	addeq	r5, r6, #2
 80847cc:	b113      	cbz	r3, 80847d4 <_strtoul_r+0x44>
 80847ce:	2b10      	cmp	r3, #16
 80847d0:	d10a      	bne.n	80847e8 <_strtoul_r+0x58>
 80847d2:	e053      	b.n	808487c <_strtoul_r+0xec>
 80847d4:	2c30      	cmp	r4, #48	; 0x30
 80847d6:	d14f      	bne.n	8084878 <_strtoul_r+0xe8>
 80847d8:	7828      	ldrb	r0, [r5, #0]
 80847da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80847de:	2858      	cmp	r0, #88	; 0x58
 80847e0:	d145      	bne.n	808486e <_strtoul_r+0xde>
 80847e2:	786c      	ldrb	r4, [r5, #1]
 80847e4:	2310      	movs	r3, #16
 80847e6:	3502      	adds	r5, #2
 80847e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80847ec:	fbbc fcf3 	udiv	ip, ip, r3
 80847f0:	fb03 fa0c 	mul.w	sl, r3, ip
 80847f4:	2600      	movs	r6, #0
 80847f6:	ea6f 0a0a 	mvn.w	sl, sl
 80847fa:	4630      	mov	r0, r6
 80847fc:	eb09 0e04 	add.w	lr, r9, r4
 8084800:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084804:	f01e 0f04 	tst.w	lr, #4
 8084808:	d001      	beq.n	808480e <_strtoul_r+0x7e>
 808480a:	3c30      	subs	r4, #48	; 0x30
 808480c:	e00b      	b.n	8084826 <_strtoul_r+0x96>
 808480e:	f01e 0e03 	ands.w	lr, lr, #3
 8084812:	d01a      	beq.n	808484a <_strtoul_r+0xba>
 8084814:	f1be 0f01 	cmp.w	lr, #1
 8084818:	bf0c      	ite	eq
 808481a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808481e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084822:	ebce 0404 	rsb	r4, lr, r4
 8084826:	42a3      	cmp	r3, r4
 8084828:	dd0f      	ble.n	808484a <_strtoul_r+0xba>
 808482a:	2e00      	cmp	r6, #0
 808482c:	db08      	blt.n	8084840 <_strtoul_r+0xb0>
 808482e:	4560      	cmp	r0, ip
 8084830:	d806      	bhi.n	8084840 <_strtoul_r+0xb0>
 8084832:	d101      	bne.n	8084838 <_strtoul_r+0xa8>
 8084834:	4554      	cmp	r4, sl
 8084836:	dc03      	bgt.n	8084840 <_strtoul_r+0xb0>
 8084838:	fb03 4000 	mla	r0, r3, r0, r4
 808483c:	2601      	movs	r6, #1
 808483e:	e001      	b.n	8084844 <_strtoul_r+0xb4>
 8084840:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084848:	e7d8      	b.n	80847fc <_strtoul_r+0x6c>
 808484a:	2e00      	cmp	r6, #0
 808484c:	da07      	bge.n	808485e <_strtoul_r+0xce>
 808484e:	2322      	movs	r3, #34	; 0x22
 8084850:	f8c8 3000 	str.w	r3, [r8]
 8084854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084858:	b92a      	cbnz	r2, 8084866 <_strtoul_r+0xd6>
 808485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808485e:	b107      	cbz	r7, 8084862 <_strtoul_r+0xd2>
 8084860:	4240      	negs	r0, r0
 8084862:	b172      	cbz	r2, 8084882 <_strtoul_r+0xf2>
 8084864:	b106      	cbz	r6, 8084868 <_strtoul_r+0xd8>
 8084866:	1e69      	subs	r1, r5, #1
 8084868:	6011      	str	r1, [r2, #0]
 808486a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808486e:	2430      	movs	r4, #48	; 0x30
 8084870:	2b00      	cmp	r3, #0
 8084872:	d1b9      	bne.n	80847e8 <_strtoul_r+0x58>
 8084874:	2308      	movs	r3, #8
 8084876:	e7b7      	b.n	80847e8 <_strtoul_r+0x58>
 8084878:	230a      	movs	r3, #10
 808487a:	e7b5      	b.n	80847e8 <_strtoul_r+0x58>
 808487c:	2c30      	cmp	r4, #48	; 0x30
 808487e:	d0ab      	beq.n	80847d8 <_strtoul_r+0x48>
 8084880:	e7b2      	b.n	80847e8 <_strtoul_r+0x58>
 8084882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084886:	bf00      	nop
 8084888:	20000048 	.word	0x20000048

0808488c <strtoul>:
 808488c:	4613      	mov	r3, r2
 808488e:	460a      	mov	r2, r1
 8084890:	4601      	mov	r1, r0
 8084892:	4802      	ldr	r0, [pc, #8]	; (808489c <strtoul+0x10>)
 8084894:	6800      	ldr	r0, [r0, #0]
 8084896:	f7ff bf7b 	b.w	8084790 <_strtoul_r>
 808489a:	bf00      	nop
 808489c:	200000ac 	.word	0x200000ac

080848a0 <__tzcalc_limits>:
 80848a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80848a4:	4604      	mov	r4, r0
 80848a6:	f000 fa6f 	bl	8084d88 <__gettzinfo>
 80848aa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80848ae:	429c      	cmp	r4, r3
 80848b0:	f340 8096 	ble.w	80849e0 <__tzcalc_limits+0x140>
 80848b4:	f240 156d 	movw	r5, #365	; 0x16d
 80848b8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80848bc:	18e3      	adds	r3, r4, r3
 80848be:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80848c2:	109b      	asrs	r3, r3, #2
 80848c4:	fb05 3502 	mla	r5, r5, r2, r3
 80848c8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80848cc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80848d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80848d4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80848d8:	442b      	add	r3, r5
 80848da:	18a5      	adds	r5, r4, r2
 80848dc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80848e0:	fb94 f7f2 	sdiv	r7, r4, r2
 80848e4:	fb95 f5f2 	sdiv	r5, r5, r2
 80848e8:	fb02 4717 	mls	r7, r2, r7, r4
 80848ec:	441d      	add	r5, r3
 80848ee:	2364      	movs	r3, #100	; 0x64
 80848f0:	fb94 f6f3 	sdiv	r6, r4, r3
 80848f4:	fab7 fe87 	clz	lr, r7
 80848f8:	4601      	mov	r1, r0
 80848fa:	fb03 4616 	mls	r6, r3, r6, r4
 80848fe:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8084902:	9301      	str	r3, [sp, #4]
 8084904:	f004 0303 	and.w	r3, r4, #3
 8084908:	6044      	str	r4, [r0, #4]
 808490a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808490e:	9300      	str	r3, [sp, #0]
 8084910:	f04f 0c07 	mov.w	ip, #7
 8084914:	7a0b      	ldrb	r3, [r1, #8]
 8084916:	2b4a      	cmp	r3, #74	; 0x4a
 8084918:	d10e      	bne.n	8084938 <__tzcalc_limits+0x98>
 808491a:	694b      	ldr	r3, [r1, #20]
 808491c:	9a00      	ldr	r2, [sp, #0]
 808491e:	18ec      	adds	r4, r5, r3
 8084920:	b902      	cbnz	r2, 8084924 <__tzcalc_limits+0x84>
 8084922:	b906      	cbnz	r6, 8084926 <__tzcalc_limits+0x86>
 8084924:	b927      	cbnz	r7, 8084930 <__tzcalc_limits+0x90>
 8084926:	2b3b      	cmp	r3, #59	; 0x3b
 8084928:	bfd4      	ite	le
 808492a:	2300      	movle	r3, #0
 808492c:	2301      	movgt	r3, #1
 808492e:	e000      	b.n	8084932 <__tzcalc_limits+0x92>
 8084930:	2300      	movs	r3, #0
 8084932:	4423      	add	r3, r4
 8084934:	3b01      	subs	r3, #1
 8084936:	e03f      	b.n	80849b8 <__tzcalc_limits+0x118>
 8084938:	2b44      	cmp	r3, #68	; 0x44
 808493a:	d102      	bne.n	8084942 <__tzcalc_limits+0xa2>
 808493c:	694b      	ldr	r3, [r1, #20]
 808493e:	442b      	add	r3, r5
 8084940:	e03a      	b.n	80849b8 <__tzcalc_limits+0x118>
 8084942:	9b00      	ldr	r3, [sp, #0]
 8084944:	b92b      	cbnz	r3, 8084952 <__tzcalc_limits+0xb2>
 8084946:	2e00      	cmp	r6, #0
 8084948:	bf0c      	ite	eq
 808494a:	46f0      	moveq	r8, lr
 808494c:	f04f 0801 	movne.w	r8, #1
 8084950:	e000      	b.n	8084954 <__tzcalc_limits+0xb4>
 8084952:	46f0      	mov	r8, lr
 8084954:	46a9      	mov	r9, r5
 8084956:	4b24      	ldr	r3, [pc, #144]	; (80849e8 <__tzcalc_limits+0x148>)
 8084958:	2230      	movs	r2, #48	; 0x30
 808495a:	fb02 3808 	mla	r8, r2, r8, r3
 808495e:	68cc      	ldr	r4, [r1, #12]
 8084960:	f1a8 0a04 	sub.w	sl, r8, #4
 8084964:	2301      	movs	r3, #1
 8084966:	42a3      	cmp	r3, r4
 8084968:	da04      	bge.n	8084974 <__tzcalc_limits+0xd4>
 808496a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808496e:	3301      	adds	r3, #1
 8084970:	44d9      	add	r9, fp
 8084972:	e7f8      	b.n	8084966 <__tzcalc_limits+0xc6>
 8084974:	f109 0304 	add.w	r3, r9, #4
 8084978:	fb93 fbfc 	sdiv	fp, r3, ip
 808497c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084980:	ebca 0a03 	rsb	sl, sl, r3
 8084984:	694b      	ldr	r3, [r1, #20]
 8084986:	2c01      	cmp	r4, #1
 8084988:	bfb8      	it	lt
 808498a:	2401      	movlt	r4, #1
 808498c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084990:	690b      	ldr	r3, [r1, #16]
 8084992:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084996:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 808499a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 808499e:	bf48      	it	mi
 80849a0:	f10a 0a07 	addmi.w	sl, sl, #7
 80849a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80849a8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80849ac:	4453      	add	r3, sl
 80849ae:	42a3      	cmp	r3, r4
 80849b0:	db01      	blt.n	80849b6 <__tzcalc_limits+0x116>
 80849b2:	3b07      	subs	r3, #7
 80849b4:	e7fb      	b.n	80849ae <__tzcalc_limits+0x10e>
 80849b6:	444b      	add	r3, r9
 80849b8:	698c      	ldr	r4, [r1, #24]
 80849ba:	4a0c      	ldr	r2, [pc, #48]	; (80849ec <__tzcalc_limits+0x14c>)
 80849bc:	fb02 4303 	mla	r3, r2, r3, r4
 80849c0:	6a0c      	ldr	r4, [r1, #32]
 80849c2:	4423      	add	r3, r4
 80849c4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80849c8:	9b01      	ldr	r3, [sp, #4]
 80849ca:	4299      	cmp	r1, r3
 80849cc:	d1a2      	bne.n	8084914 <__tzcalc_limits+0x74>
 80849ce:	69c3      	ldr	r3, [r0, #28]
 80849d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80849d2:	4293      	cmp	r3, r2
 80849d4:	bfac      	ite	ge
 80849d6:	2300      	movge	r3, #0
 80849d8:	2301      	movlt	r3, #1
 80849da:	6003      	str	r3, [r0, #0]
 80849dc:	2001      	movs	r0, #1
 80849de:	e000      	b.n	80849e2 <__tzcalc_limits+0x142>
 80849e0:	2000      	movs	r0, #0
 80849e2:	b003      	add	sp, #12
 80849e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80849e8:	080855b0 	.word	0x080855b0
 80849ec:	00015180 	.word	0x00015180

080849f0 <__tz_lock>:
 80849f0:	4770      	bx	lr

080849f2 <__tz_unlock>:
 80849f2:	4770      	bx	lr

080849f4 <_tzset_unlocked>:
 80849f4:	4b01      	ldr	r3, [pc, #4]	; (80849fc <_tzset_unlocked+0x8>)
 80849f6:	6818      	ldr	r0, [r3, #0]
 80849f8:	f000 b802 	b.w	8084a00 <_tzset_unlocked_r>
 80849fc:	200000ac 	.word	0x200000ac

08084a00 <_tzset_unlocked_r>:
 8084a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084a04:	b08d      	sub	sp, #52	; 0x34
 8084a06:	4607      	mov	r7, r0
 8084a08:	f000 f9be 	bl	8084d88 <__gettzinfo>
 8084a0c:	49b0      	ldr	r1, [pc, #704]	; (8084cd0 <_tzset_unlocked_r+0x2d0>)
 8084a0e:	4604      	mov	r4, r0
 8084a10:	4638      	mov	r0, r7
 8084a12:	f000 f9b1 	bl	8084d78 <_getenv_r>
 8084a16:	4eaf      	ldr	r6, [pc, #700]	; (8084cd4 <_tzset_unlocked_r+0x2d4>)
 8084a18:	4605      	mov	r5, r0
 8084a1a:	b960      	cbnz	r0, 8084a36 <_tzset_unlocked_r+0x36>
 8084a1c:	4bae      	ldr	r3, [pc, #696]	; (8084cd8 <_tzset_unlocked_r+0x2d8>)
 8084a1e:	4aaf      	ldr	r2, [pc, #700]	; (8084cdc <_tzset_unlocked_r+0x2dc>)
 8084a20:	6018      	str	r0, [r3, #0]
 8084a22:	4baf      	ldr	r3, [pc, #700]	; (8084ce0 <_tzset_unlocked_r+0x2e0>)
 8084a24:	6018      	str	r0, [r3, #0]
 8084a26:	4baf      	ldr	r3, [pc, #700]	; (8084ce4 <_tzset_unlocked_r+0x2e4>)
 8084a28:	6830      	ldr	r0, [r6, #0]
 8084a2a:	601a      	str	r2, [r3, #0]
 8084a2c:	605a      	str	r2, [r3, #4]
 8084a2e:	f7fc ffb5 	bl	808199c <free>
 8084a32:	6035      	str	r5, [r6, #0]
 8084a34:	e148      	b.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084a36:	6831      	ldr	r1, [r6, #0]
 8084a38:	b979      	cbnz	r1, 8084a5a <_tzset_unlocked_r+0x5a>
 8084a3a:	6830      	ldr	r0, [r6, #0]
 8084a3c:	f7fc ffae 	bl	808199c <free>
 8084a40:	4628      	mov	r0, r5
 8084a42:	f7ff fde4 	bl	808460e <strlen>
 8084a46:	1c41      	adds	r1, r0, #1
 8084a48:	4638      	mov	r0, r7
 8084a4a:	f7fc ffd7 	bl	80819fc <_malloc_r>
 8084a4e:	6030      	str	r0, [r6, #0]
 8084a50:	b148      	cbz	r0, 8084a66 <_tzset_unlocked_r+0x66>
 8084a52:	4629      	mov	r1, r5
 8084a54:	f7ff fdb7 	bl	80845c6 <strcpy>
 8084a58:	e005      	b.n	8084a66 <_tzset_unlocked_r+0x66>
 8084a5a:	f7ff fdaa 	bl	80845b2 <strcmp>
 8084a5e:	2800      	cmp	r0, #0
 8084a60:	f000 8132 	beq.w	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084a64:	e7e9      	b.n	8084a3a <_tzset_unlocked_r+0x3a>
 8084a66:	782b      	ldrb	r3, [r5, #0]
 8084a68:	ae0a      	add	r6, sp, #40	; 0x28
 8084a6a:	2b3a      	cmp	r3, #58	; 0x3a
 8084a6c:	bf08      	it	eq
 8084a6e:	3501      	addeq	r5, #1
 8084a70:	4633      	mov	r3, r6
 8084a72:	4a9d      	ldr	r2, [pc, #628]	; (8084ce8 <_tzset_unlocked_r+0x2e8>)
 8084a74:	499d      	ldr	r1, [pc, #628]	; (8084cec <_tzset_unlocked_r+0x2ec>)
 8084a76:	4628      	mov	r0, r5
 8084a78:	f7fc ffa8 	bl	80819cc <siscanf>
 8084a7c:	2800      	cmp	r0, #0
 8084a7e:	f340 8123 	ble.w	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084a84:	18ef      	adds	r7, r5, r3
 8084a86:	5ceb      	ldrb	r3, [r5, r3]
 8084a88:	2b2d      	cmp	r3, #45	; 0x2d
 8084a8a:	d103      	bne.n	8084a94 <_tzset_unlocked_r+0x94>
 8084a8c:	3701      	adds	r7, #1
 8084a8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084a92:	e003      	b.n	8084a9c <_tzset_unlocked_r+0x9c>
 8084a94:	2b2b      	cmp	r3, #43	; 0x2b
 8084a96:	bf08      	it	eq
 8084a98:	3701      	addeq	r7, #1
 8084a9a:	2501      	movs	r5, #1
 8084a9c:	f10d 0a20 	add.w	sl, sp, #32
 8084aa0:	f10d 0b1e 	add.w	fp, sp, #30
 8084aa4:	f04f 0800 	mov.w	r8, #0
 8084aa8:	9603      	str	r6, [sp, #12]
 8084aaa:	f8cd a008 	str.w	sl, [sp, #8]
 8084aae:	9601      	str	r6, [sp, #4]
 8084ab0:	f8cd b000 	str.w	fp, [sp]
 8084ab4:	4633      	mov	r3, r6
 8084ab6:	aa07      	add	r2, sp, #28
 8084ab8:	498d      	ldr	r1, [pc, #564]	; (8084cf0 <_tzset_unlocked_r+0x2f0>)
 8084aba:	4638      	mov	r0, r7
 8084abc:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084ac0:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084ac4:	f7fc ff82 	bl	80819cc <siscanf>
 8084ac8:	4540      	cmp	r0, r8
 8084aca:	f340 80fd 	ble.w	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084ace:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084ad2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084ad6:	213c      	movs	r1, #60	; 0x3c
 8084ad8:	fb01 3302 	mla	r3, r1, r2, r3
 8084adc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084ae0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084ae4:	fb01 3302 	mla	r3, r1, r2, r3
 8084ae8:	435d      	muls	r5, r3
 8084aea:	4b7f      	ldr	r3, [pc, #508]	; (8084ce8 <_tzset_unlocked_r+0x2e8>)
 8084aec:	6225      	str	r5, [r4, #32]
 8084aee:	4d7d      	ldr	r5, [pc, #500]	; (8084ce4 <_tzset_unlocked_r+0x2e4>)
 8084af0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8084cfc <_tzset_unlocked_r+0x2fc>
 8084af4:	602b      	str	r3, [r5, #0]
 8084af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084af8:	464a      	mov	r2, r9
 8084afa:	441f      	add	r7, r3
 8084afc:	497b      	ldr	r1, [pc, #492]	; (8084cec <_tzset_unlocked_r+0x2ec>)
 8084afe:	4633      	mov	r3, r6
 8084b00:	4638      	mov	r0, r7
 8084b02:	f7fc ff63 	bl	80819cc <siscanf>
 8084b06:	4540      	cmp	r0, r8
 8084b08:	dc08      	bgt.n	8084b1c <_tzset_unlocked_r+0x11c>
 8084b0a:	682b      	ldr	r3, [r5, #0]
 8084b0c:	6a22      	ldr	r2, [r4, #32]
 8084b0e:	606b      	str	r3, [r5, #4]
 8084b10:	4b71      	ldr	r3, [pc, #452]	; (8084cd8 <_tzset_unlocked_r+0x2d8>)
 8084b12:	601a      	str	r2, [r3, #0]
 8084b14:	4b72      	ldr	r3, [pc, #456]	; (8084ce0 <_tzset_unlocked_r+0x2e0>)
 8084b16:	f8c3 8000 	str.w	r8, [r3]
 8084b1a:	e0d5      	b.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b1e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084b22:	18fd      	adds	r5, r7, r3
 8084b24:	5cfb      	ldrb	r3, [r7, r3]
 8084b26:	2b2d      	cmp	r3, #45	; 0x2d
 8084b28:	d103      	bne.n	8084b32 <_tzset_unlocked_r+0x132>
 8084b2a:	3501      	adds	r5, #1
 8084b2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084b30:	e003      	b.n	8084b3a <_tzset_unlocked_r+0x13a>
 8084b32:	2b2b      	cmp	r3, #43	; 0x2b
 8084b34:	bf08      	it	eq
 8084b36:	3501      	addeq	r5, #1
 8084b38:	2701      	movs	r7, #1
 8084b3a:	2300      	movs	r3, #0
 8084b3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084b40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084b44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084b48:	930a      	str	r3, [sp, #40]	; 0x28
 8084b4a:	9603      	str	r6, [sp, #12]
 8084b4c:	f8cd a008 	str.w	sl, [sp, #8]
 8084b50:	9601      	str	r6, [sp, #4]
 8084b52:	f8cd b000 	str.w	fp, [sp]
 8084b56:	4633      	mov	r3, r6
 8084b58:	aa07      	add	r2, sp, #28
 8084b5a:	4965      	ldr	r1, [pc, #404]	; (8084cf0 <_tzset_unlocked_r+0x2f0>)
 8084b5c:	4628      	mov	r0, r5
 8084b5e:	f7fc ff35 	bl	80819cc <siscanf>
 8084b62:	2800      	cmp	r0, #0
 8084b64:	dc04      	bgt.n	8084b70 <_tzset_unlocked_r+0x170>
 8084b66:	6a23      	ldr	r3, [r4, #32]
 8084b68:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8084b6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8084b6e:	e00e      	b.n	8084b8e <_tzset_unlocked_r+0x18e>
 8084b70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084b74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084b78:	213c      	movs	r1, #60	; 0x3c
 8084b7a:	fb01 3302 	mla	r3, r1, r2, r3
 8084b7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084b82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084b86:	fb01 3302 	mla	r3, r1, r2, r3
 8084b8a:	435f      	muls	r7, r3
 8084b8c:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084b8e:	4627      	mov	r7, r4
 8084b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084b92:	f04f 0900 	mov.w	r9, #0
 8084b96:	441d      	add	r5, r3
 8084b98:	782b      	ldrb	r3, [r5, #0]
 8084b9a:	2b2c      	cmp	r3, #44	; 0x2c
 8084b9c:	bf08      	it	eq
 8084b9e:	3501      	addeq	r5, #1
 8084ba0:	f895 8000 	ldrb.w	r8, [r5]
 8084ba4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084ba8:	d126      	bne.n	8084bf8 <_tzset_unlocked_r+0x1f8>
 8084baa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084bae:	9302      	str	r3, [sp, #8]
 8084bb0:	ab09      	add	r3, sp, #36	; 0x24
 8084bb2:	9300      	str	r3, [sp, #0]
 8084bb4:	9603      	str	r6, [sp, #12]
 8084bb6:	9601      	str	r6, [sp, #4]
 8084bb8:	4633      	mov	r3, r6
 8084bba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084bbe:	494d      	ldr	r1, [pc, #308]	; (8084cf4 <_tzset_unlocked_r+0x2f4>)
 8084bc0:	4628      	mov	r0, r5
 8084bc2:	f7fc ff03 	bl	80819cc <siscanf>
 8084bc6:	2803      	cmp	r0, #3
 8084bc8:	d17e      	bne.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084bca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084bce:	1e4b      	subs	r3, r1, #1
 8084bd0:	2b0b      	cmp	r3, #11
 8084bd2:	d879      	bhi.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084bd4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084bd8:	1e53      	subs	r3, r2, #1
 8084bda:	2b04      	cmp	r3, #4
 8084bdc:	d874      	bhi.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084bde:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8084be2:	2b06      	cmp	r3, #6
 8084be4:	d870      	bhi.n	8084cc8 <_tzset_unlocked_r+0x2c8>
 8084be6:	f887 8008 	strb.w	r8, [r7, #8]
 8084bea:	60f9      	str	r1, [r7, #12]
 8084bec:	613a      	str	r2, [r7, #16]
 8084bee:	617b      	str	r3, [r7, #20]
 8084bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084bf2:	eb05 0803 	add.w	r8, r5, r3
 8084bf6:	e02a      	b.n	8084c4e <_tzset_unlocked_r+0x24e>
 8084bf8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084bfc:	bf06      	itte	eq
 8084bfe:	4643      	moveq	r3, r8
 8084c00:	3501      	addeq	r5, #1
 8084c02:	2344      	movne	r3, #68	; 0x44
 8084c04:	220a      	movs	r2, #10
 8084c06:	a90b      	add	r1, sp, #44	; 0x2c
 8084c08:	4628      	mov	r0, r5
 8084c0a:	9305      	str	r3, [sp, #20]
 8084c0c:	f7ff fe3e 	bl	808488c <strtoul>
 8084c10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084c14:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084c18:	4545      	cmp	r5, r8
 8084c1a:	9b05      	ldr	r3, [sp, #20]
 8084c1c:	d114      	bne.n	8084c48 <_tzset_unlocked_r+0x248>
 8084c1e:	234d      	movs	r3, #77	; 0x4d
 8084c20:	f1b9 0f00 	cmp.w	r9, #0
 8084c24:	d107      	bne.n	8084c36 <_tzset_unlocked_r+0x236>
 8084c26:	7223      	strb	r3, [r4, #8]
 8084c28:	2303      	movs	r3, #3
 8084c2a:	60e3      	str	r3, [r4, #12]
 8084c2c:	2302      	movs	r3, #2
 8084c2e:	6123      	str	r3, [r4, #16]
 8084c30:	f8c4 9014 	str.w	r9, [r4, #20]
 8084c34:	e00b      	b.n	8084c4e <_tzset_unlocked_r+0x24e>
 8084c36:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084c3a:	230b      	movs	r3, #11
 8084c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8084c3e:	2301      	movs	r3, #1
 8084c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084c42:	2300      	movs	r3, #0
 8084c44:	6323      	str	r3, [r4, #48]	; 0x30
 8084c46:	e002      	b.n	8084c4e <_tzset_unlocked_r+0x24e>
 8084c48:	b280      	uxth	r0, r0
 8084c4a:	723b      	strb	r3, [r7, #8]
 8084c4c:	6178      	str	r0, [r7, #20]
 8084c4e:	2302      	movs	r3, #2
 8084c50:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084c54:	2300      	movs	r3, #0
 8084c56:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084c5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8084c60:	f898 3000 	ldrb.w	r3, [r8]
 8084c64:	2b2f      	cmp	r3, #47	; 0x2f
 8084c66:	d10b      	bne.n	8084c80 <_tzset_unlocked_r+0x280>
 8084c68:	9603      	str	r6, [sp, #12]
 8084c6a:	f8cd a008 	str.w	sl, [sp, #8]
 8084c6e:	9601      	str	r6, [sp, #4]
 8084c70:	f8cd b000 	str.w	fp, [sp]
 8084c74:	4633      	mov	r3, r6
 8084c76:	aa07      	add	r2, sp, #28
 8084c78:	491f      	ldr	r1, [pc, #124]	; (8084cf8 <_tzset_unlocked_r+0x2f8>)
 8084c7a:	4640      	mov	r0, r8
 8084c7c:	f7fc fea6 	bl	80819cc <siscanf>
 8084c80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084c84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084c88:	213c      	movs	r1, #60	; 0x3c
 8084c8a:	fb01 3302 	mla	r3, r1, r2, r3
 8084c8e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084c92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084c96:	fb01 3302 	mla	r3, r1, r2, r3
 8084c9a:	61bb      	str	r3, [r7, #24]
 8084c9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8084c9e:	f109 0901 	add.w	r9, r9, #1
 8084ca2:	f1b9 0f02 	cmp.w	r9, #2
 8084ca6:	4445      	add	r5, r8
 8084ca8:	f107 071c 	add.w	r7, r7, #28
 8084cac:	f47f af74 	bne.w	8084b98 <_tzset_unlocked_r+0x198>
 8084cb0:	6860      	ldr	r0, [r4, #4]
 8084cb2:	f7ff fdf5 	bl	80848a0 <__tzcalc_limits>
 8084cb6:	6a22      	ldr	r2, [r4, #32]
 8084cb8:	4b07      	ldr	r3, [pc, #28]	; (8084cd8 <_tzset_unlocked_r+0x2d8>)
 8084cba:	601a      	str	r2, [r3, #0]
 8084cbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084cbe:	1a9b      	subs	r3, r3, r2
 8084cc0:	4a07      	ldr	r2, [pc, #28]	; (8084ce0 <_tzset_unlocked_r+0x2e0>)
 8084cc2:	bf18      	it	ne
 8084cc4:	2301      	movne	r3, #1
 8084cc6:	6013      	str	r3, [r2, #0]
 8084cc8:	b00d      	add	sp, #52	; 0x34
 8084cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084cce:	bf00      	nop
 8084cd0:	08085610 	.word	0x08085610
 8084cd4:	200007d8 	.word	0x200007d8
 8084cd8:	200007e0 	.word	0x200007e0
 8084cdc:	08085613 	.word	0x08085613
 8084ce0:	200007dc 	.word	0x200007dc
 8084ce4:	200000b0 	.word	0x200000b0
 8084ce8:	200007cb 	.word	0x200007cb
 8084cec:	08085617 	.word	0x08085617
 8084cf0:	0808563a 	.word	0x0808563a
 8084cf4:	08085626 	.word	0x08085626
 8084cf8:	08085639 	.word	0x08085639
 8084cfc:	200007c0 	.word	0x200007c0

08084d00 <_findenv_r>:
 8084d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d04:	4607      	mov	r7, r0
 8084d06:	468b      	mov	fp, r1
 8084d08:	4690      	mov	r8, r2
 8084d0a:	f000 f8d7 	bl	8084ebc <__env_lock>
 8084d0e:	4b19      	ldr	r3, [pc, #100]	; (8084d74 <_findenv_r+0x74>)
 8084d10:	681d      	ldr	r5, [r3, #0]
 8084d12:	469a      	mov	sl, r3
 8084d14:	b13d      	cbz	r5, 8084d26 <_findenv_r+0x26>
 8084d16:	465c      	mov	r4, fp
 8084d18:	4623      	mov	r3, r4
 8084d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084d1e:	b142      	cbz	r2, 8084d32 <_findenv_r+0x32>
 8084d20:	2a3d      	cmp	r2, #61	; 0x3d
 8084d22:	461c      	mov	r4, r3
 8084d24:	d1f8      	bne.n	8084d18 <_findenv_r+0x18>
 8084d26:	4638      	mov	r0, r7
 8084d28:	f000 f8c9 	bl	8084ebe <__env_unlock>
 8084d2c:	2000      	movs	r0, #0
 8084d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d32:	ebcb 0404 	rsb	r4, fp, r4
 8084d36:	46a9      	mov	r9, r5
 8084d38:	f859 0b04 	ldr.w	r0, [r9], #4
 8084d3c:	2800      	cmp	r0, #0
 8084d3e:	d0f2      	beq.n	8084d26 <_findenv_r+0x26>
 8084d40:	4622      	mov	r2, r4
 8084d42:	4659      	mov	r1, fp
 8084d44:	f7ff fc6b 	bl	808461e <strncmp>
 8084d48:	b988      	cbnz	r0, 8084d6e <_findenv_r+0x6e>
 8084d4a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8084d4e:	191e      	adds	r6, r3, r4
 8084d50:	5d1b      	ldrb	r3, [r3, r4]
 8084d52:	2b3d      	cmp	r3, #61	; 0x3d
 8084d54:	d10b      	bne.n	8084d6e <_findenv_r+0x6e>
 8084d56:	f8da 3000 	ldr.w	r3, [sl]
 8084d5a:	4638      	mov	r0, r7
 8084d5c:	1aed      	subs	r5, r5, r3
 8084d5e:	10ad      	asrs	r5, r5, #2
 8084d60:	f8c8 5000 	str.w	r5, [r8]
 8084d64:	f000 f8ab 	bl	8084ebe <__env_unlock>
 8084d68:	1c70      	adds	r0, r6, #1
 8084d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d6e:	464d      	mov	r5, r9
 8084d70:	e7e1      	b.n	8084d36 <_findenv_r+0x36>
 8084d72:	bf00      	nop
 8084d74:	200000f8 	.word	0x200000f8

08084d78 <_getenv_r>:
 8084d78:	b507      	push	{r0, r1, r2, lr}
 8084d7a:	aa01      	add	r2, sp, #4
 8084d7c:	f7ff ffc0 	bl	8084d00 <_findenv_r>
 8084d80:	b003      	add	sp, #12
 8084d82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084d88 <__gettzinfo>:
 8084d88:	4800      	ldr	r0, [pc, #0]	; (8084d8c <__gettzinfo+0x4>)
 8084d8a:	4770      	bx	lr
 8084d8c:	200000b8 	.word	0x200000b8

08084d90 <gmtime_r>:
 8084d90:	6802      	ldr	r2, [r0, #0]
 8084d92:	4b46      	ldr	r3, [pc, #280]	; (8084eac <gmtime_r+0x11c>)
 8084d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084d96:	fb92 f4f3 	sdiv	r4, r2, r3
 8084d9a:	fb03 2214 	mls	r2, r3, r4, r2
 8084d9e:	2a00      	cmp	r2, #0
 8084da0:	bfbc      	itt	lt
 8084da2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8084da6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8084daa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8084dae:	fb92 f3f0 	sdiv	r3, r2, r0
 8084db2:	fb00 2213 	mls	r2, r0, r3, r2
 8084db6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8084dba:	608b      	str	r3, [r1, #8]
 8084dbc:	fb92 f3f0 	sdiv	r3, r2, r0
 8084dc0:	fb00 2213 	mls	r2, r0, r3, r2
 8084dc4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8084dc8:	bfac      	ite	ge
 8084dca:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8084dce:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8084dd2:	604b      	str	r3, [r1, #4]
 8084dd4:	600a      	str	r2, [r1, #0]
 8084dd6:	2307      	movs	r3, #7
 8084dd8:	1ce2      	adds	r2, r4, #3
 8084dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8084dde:	4d34      	ldr	r5, [pc, #208]	; (8084eb0 <gmtime_r+0x120>)
 8084de0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084de4:	fb94 f5f5 	sdiv	r5, r4, r5
 8084de8:	1ad3      	subs	r3, r2, r3
 8084dea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8084dee:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8084df2:	618b      	str	r3, [r1, #24]
 8084df4:	4b2f      	ldr	r3, [pc, #188]	; (8084eb4 <gmtime_r+0x124>)
 8084df6:	4830      	ldr	r0, [pc, #192]	; (8084eb8 <gmtime_r+0x128>)
 8084df8:	fb03 4405 	mla	r4, r3, r5, r4
 8084dfc:	fbb4 f2f2 	udiv	r2, r4, r2
 8084e00:	fbb4 f3f7 	udiv	r3, r4, r7
 8084e04:	fbb4 f0f0 	udiv	r0, r4, r0
 8084e08:	4422      	add	r2, r4
 8084e0a:	1ad2      	subs	r2, r2, r3
 8084e0c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084e10:	1a13      	subs	r3, r2, r0
 8084e12:	f240 126d 	movw	r2, #365	; 0x16d
 8084e16:	fbb3 f6f6 	udiv	r6, r3, r6
 8084e1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8084e1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8084e22:	4434      	add	r4, r6
 8084e24:	1ae3      	subs	r3, r4, r3
 8084e26:	fb02 3310 	mls	r3, r2, r0, r3
 8084e2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8084e2e:	2499      	movs	r4, #153	; 0x99
 8084e30:	3202      	adds	r2, #2
 8084e32:	fbb2 f2f4 	udiv	r2, r2, r4
 8084e36:	4354      	muls	r4, r2
 8084e38:	1ca6      	adds	r6, r4, #2
 8084e3a:	2405      	movs	r4, #5
 8084e3c:	fbb6 f4f4 	udiv	r4, r6, r4
 8084e40:	2a0a      	cmp	r2, #10
 8084e42:	bf34      	ite	cc
 8084e44:	2602      	movcc	r6, #2
 8084e46:	f06f 0609 	mvncs.w	r6, #9
 8084e4a:	4416      	add	r6, r2
 8084e4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084e50:	fb02 0505 	mla	r5, r2, r5, r0
 8084e54:	1c5f      	adds	r7, r3, #1
 8084e56:	2e01      	cmp	r6, #1
 8084e58:	bf98      	it	ls
 8084e5a:	3501      	addls	r5, #1
 8084e5c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084e60:	eba7 0704 	sub.w	r7, r7, r4
 8084e64:	d302      	bcc.n	8084e6c <gmtime_r+0xdc>
 8084e66:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8084e6a:	e014      	b.n	8084e96 <gmtime_r+0x106>
 8084e6c:	0782      	lsls	r2, r0, #30
 8084e6e:	d105      	bne.n	8084e7c <gmtime_r+0xec>
 8084e70:	2464      	movs	r4, #100	; 0x64
 8084e72:	fbb0 f2f4 	udiv	r2, r0, r4
 8084e76:	fb04 0212 	mls	r2, r4, r2, r0
 8084e7a:	b94a      	cbnz	r2, 8084e90 <gmtime_r+0x100>
 8084e7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084e80:	fbb0 f4f2 	udiv	r4, r0, r2
 8084e84:	fb02 0014 	mls	r0, r2, r4, r0
 8084e88:	fab0 f280 	clz	r2, r0
 8084e8c:	0952      	lsrs	r2, r2, #5
 8084e8e:	e000      	b.n	8084e92 <gmtime_r+0x102>
 8084e90:	2201      	movs	r2, #1
 8084e92:	333b      	adds	r3, #59	; 0x3b
 8084e94:	441a      	add	r2, r3
 8084e96:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8084e9a:	2300      	movs	r3, #0
 8084e9c:	61ca      	str	r2, [r1, #28]
 8084e9e:	614d      	str	r5, [r1, #20]
 8084ea0:	610e      	str	r6, [r1, #16]
 8084ea2:	60cf      	str	r7, [r1, #12]
 8084ea4:	620b      	str	r3, [r1, #32]
 8084ea6:	4608      	mov	r0, r1
 8084ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084eaa:	bf00      	nop
 8084eac:	00015180 	.word	0x00015180
 8084eb0:	00023ab1 	.word	0x00023ab1
 8084eb4:	fffdc54f 	.word	0xfffdc54f
 8084eb8:	00023ab0 	.word	0x00023ab0

08084ebc <__env_lock>:
 8084ebc:	4770      	bx	lr

08084ebe <__env_unlock>:
 8084ebe:	4770      	bx	lr

08084ec0 <dynalib_user>:
 8084ec0:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8084ed0:	0000 0000                                   ....

08084ed4 <_ZTV5Timer>:
	...
 8084edc:	034d 0808 0391 0808 0239 0808 0030 7325     M.......9...0.%s
 8084eec:	5320 253a 2e32 6630 2525 202c 3a51 3225      S:%2.0f%%, Q:%2
 8084efc:	302e 2566 2025 4100 2b54 4643 4e55 313d     .0f%% .AT+CFUN=1
 8084f0c:	0d36 000a 6552 6573 7474 6e69 2067 6e69     6...Resetting in
 8084f1c:	7020 6f72 7267 7365 0073 3532 2025 6f64      progress.25% do
 8084f2c:	656e 3500 2530 6420 6e6f 0065 3537 2025     ne.50% done.75% 
 8084f3c:	6f64 656e 4400 6e6f 0065 6f43 746e 6f72     done.Done.Contro
 8084f4c:	206c 6f50 6577 2072 202d 4c00 776f 4c20     l Power - .Low L
 8084f5c:	7665 6c65 2d20 0020 7550 706d 4f20 206e     evel - .Pump On 
 8084f6c:	202d 5000 7261 6974 6c63 2065 6f50 6577     - .Particle Powe
 8084f7c:	0072 6c41 7265 7374 7b00 6122 656c 7472     r.Alerts.{"alert
 8084f8c:	6156 756c 2265 253a 2c69 2220 7570 706d     Value":%i, "pump
 8084f9c:	6d41 7370 3a22 6925 202c 7022 6d75 4d70     Amps":%i, "pumpM
 8084fac:	6e69 2273 253a 2c69 2220 6162 7474 7265     ins":%i, "batter
 8084fbc:	2279 253a 2c69 2220 6574 706d 3a22 6925     y":%i, "temp":%i
 8084fcc:	202c 7222 7365 7465 2273 253a 7d69 4d00     , "resets":%i}.M
 8084fdc:	6e6f 7469 726f 6e69 5f67 7645 6e65 0074     onitoring_Event.
 8084fec:	6157 7469 6e69 2067 6f66 2072 6552 7073     Waiting for Resp
 8084ffc:	6e6f 6573 5300 6174 6574 4900 6c64 0065     onse.State.Idle.
 808500c:	6552 7073 6e6f 6573 5420 6d69 6f65 7475     Response Timeout
 808501c:	4520 7272 726f 4500 5252 524f 535f 4154      Error.ERROR_STA
 808502c:	4554 2d20 5220 7365 7465 6974 676e 4e00     TE - Resetting.N
 808503c:	206f 6144 6174 5500 6962 6f64 7374 4820     o Data.Ubidots H
 808504c:	6f6f 006b 6552 7073 6e6f 6573 5220 6365     ook.Response Rec
 808505c:	6965 6576 0064 6553 2074 6556 6272 736f     eived.Set Verbos
 808506c:	2065 6f4d 6564 4300 656c 7261 6465 5620     e Mode.Cleared V
 808507c:	7265 6f62 6573 4d20 646f 0065 6954 656d     erbose Mode.Time
 808508c:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
 808509c:	6954 656d 5300 6769 616e 006c 6552 6573     Time.Signal.Rese
 80850ac:	4374 756f 746e 5400 6d65 6570 6172 7574     tCount.Temperatu
 80850bc:	6572 5200 6c65 6165 6573 7300 6174 6574     re.Release.state
 80850cc:	664f 6843 0067 7570 706d 6d41 7370 7000     OfChg.pumpAmps.p
 80850dc:	6d75 4d70 6e69 7475 7365 5200 7365 7465     umpMinutes.Reset
 80850ec:	462d 4152 004d 7550 706d 6f43 746e 6f72     -FRAM.PumpContro
 80850fc:	006c 6552 6573 2d74 6f43 6e75 7374 4800     l.Reset-Counts.H
 808510c:	7261 2d64 6552 6573 0074 6553 646e 4e2d     ard-Reset.Send-N
 808511c:	776f 5600 7265 6f62 6573 4d2d 646f 0065     ow.Verbose-Mode.
 808512c:	6553 2d74 6954 656d 6f7a 656e 5500 6b6e     Set-Timezone.Unk
 808513c:	6f6e 6e77 4e00 6e6f 0065 6957 6946 4700     nown.None.WiFi.G
 808514c:	4d53 5500 544d 0053 4443 414d 4c00 4554     SM.UMTS.CDMA.LTE
 808515c:	4900 4545 3845 3230 3531 0034 544c 5f45     .IEEE802154.LTE_
 808516c:	4143 5f54 314d 4c00 4554 435f 5441 4e5f     CAT_M1.LTE_CAT_N
 808517c:	3142 3000 342e 0038                         B1.0.48.

08085184 <_ZTVN5spark13CellularClassE>:
	...
 808518c:	1aeb 0808 1ae1 0808 1ad7 0808 030f 0808     ................
 808519c:	1acb 0808 1abf 0808 1ab3 0808 1aab 0808     ................
 80851ac:	1aa1 0808 1a97 0808 1a53 0808               ........S...

080851b8 <_ZTV14CellularSignal>:
	...
 80851c0:	1b99 0808 1c1b 0808 1b9b 0808 1c59 0808     ............Y...
 80851d0:	1ba1 0808 1c29 0808 1bc5 0808 1be9 0808     ....)...........
 80851e0:	fffc ffff 0000 0000 1c13 0808               ............

080851ec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80851f4:	1ca1 0808 1ca7 0808 1ceb 0808 1cb5 0808     ................
 8085204:	1ca3 0808                                   ....

08085208 <_ZTV7TwoWire>:
	...
 8085210:	2391 0808 23db 0808 23b3 0808 2393 0808     .#...#...#...#..
 8085220:	23bb 0808 23c3 0808 23cb 0808 23d3 0808     .#...#...#...#..

08085230 <_ZTV9IPAddress>:
	...
 8085238:	24f1 0808 24e1 0808 24e3 0808 6162 6475     .$...$...$..baud
 8085248:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8085258:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8085268:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8085278:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8085288:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8085298:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80852a8:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80852b8:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80852c8:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80852d8:	6564 3d20 0020 6564 6174 6c69 2073 203d     de = .details = 
 80852e8:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
 80852f8:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 8085308:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8085318:	6170 696e 0063 6c61 006c 0000               panic.all...

08085324 <_ZTVN5spark12NetworkClassE>:
	...
 808532c:	2591 0808 259b 0808 25a5 0808 25af 0808     .%...%...%...%..
 808533c:	25b9 0808 25c5 0808 25d1 0808 25dd 0808     .%...%...%...%..
 808534c:	25e5 0808 25ef 0808 25f9 0808               .%...%...%..

08085358 <_ZTV8SPIClass>:
	...
 8085360:	2845 0808 2847 0808 2b25 3330 3a64 3025     E(..G(..%+03d:%0
 8085370:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8085380:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08085390 <_ZTV11USARTSerial>:
	...
 8085398:	2ba1 0808 2bf1 0808 2bff 0808 26fd 0808     .+...+...+...&..
 80853a8:	2bb5 0808 2bd7 0808 2bc3 0808 2beb 0808     .+...+...+...+..
 80853b8:	2ba3 0808 2ba7 0808                         .+...+..

080853c0 <_ZTV9USBSerial>:
	...
 80853c8:	2ca9 0808 2cf9 0808 2d07 0808 26fd 0808     .,...,...-...&..
 80853d8:	2ce5 0808 2cab 0808 2cc1 0808 2cf3 0808     .,...,...,...,..
 80853e8:	2cd7 0808 2ca5 0808                         .,...,..

080853f0 <day_name.4723>:
 80853f0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085400:	6972 6153 4a74                                   riSat

08085405 <mon_name.4724>:
 8085405:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085415:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085425:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085435:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8085445:	6425 000a                                   %d..

08085449 <_ctype_>:
 8085449:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085459:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8085469:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085479:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085489:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085499:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80854a9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80854b9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80854c9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808554c <__sf_fake_stdin>:
	...

0808556c <__sf_fake_stdout>:
	...

0808558c <__sf_fake_stderr>:
	...
 80855ac:	0043 0000                                   C...

080855b0 <__month_lengths>:
 80855b0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80855c0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80855d0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80855e0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80855f0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085600:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085610:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085620:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085630:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085640:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

0808564c <link_const_variable_data_end>:
 808564c:	080801f1 	.word	0x080801f1
 8085650:	080812e9 	.word	0x080812e9
 8085654:	08081b69 	.word	0x08081b69
 8085658:	08082581 	.word	0x08082581
 808565c:	08082645 	.word	0x08082645
 8085660:	08082829 	.word	0x08082829
 8085664:	08082a01 	.word	0x08082a01
 8085668:	08082b8d 	.word	0x08082b8d
 808566c:	080830dd 	.word	0x080830dd
 8085670:	0808310d 	.word	0x0808310d
 8085674:	0808317d 	.word	0x0808317d
 8085678:	08083241 	.word	0x08083241
 808567c:	080832c5 	.word	0x080832c5
 8085680:	08083349 	.word	0x08083349

08085684 <link_constructors_end>:
	...
